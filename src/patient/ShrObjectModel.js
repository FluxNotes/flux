// Reordered by hand the output of json-model
// Copied from sixth-attempt.js. One minus sign remains in the output of schema2js.code(), manually fixed.

 var makeHierarchy = function (superclass, classes, request) {
	function pointerEscape(key) {
		return key.replace(/~/g, "~0").replace(/\//g, "~1");
	}
	function unicodeLength(string) {
		return string.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "_").length;
	}
	if (superclass && typeof superclass === "object") {
		request = classes;
		classes = superclass;
		superclass = null;
	}
	superclass = superclass || function GeneratedClass() {};
	if (typeof classes === "function") {
		request = classes;
		classes = null;
	}
	request = request || function ErrorFunc() {throw new Error("No web-request function provided");};
	classes = classes || {};
// above here is code from the top of the autogenerated file, unsure if necessary


/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept */
	var CoreDefinitionsCodeableConceptClass = classes.CoreDefinitionsCodeableConcept = function CoreDefinitionsCodeableConceptClass(value) {
		if (!(this instanceof CoreDefinitionsCodeableConceptClass)) return new CoreDefinitionsCodeableConceptClass(value);
		if (typeof value.Coding !== "undefined") {
			this.Coding = value.Coding;
		}
		if (typeof value.DisplayText !== "undefined") {
			this.DisplayText = value.DisplayText;
		}
		if (this.DisplayText && !Array.isArray(this.DisplayText) && this.DisplayText) {
			this.DisplayText = new classes.CoreDefinitionsDisplayText(this.DisplayText);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodeableConceptClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodeableConceptClass.prototype.constructor = CoreDefinitionsCodeableConceptClass;
	CoreDefinitionsCodeableConceptClass.description = "A set of codes drawn from different coding systems, representing the same concept.";
	CoreDefinitionsCodeableConceptClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept";
	CoreDefinitionsCodeableConceptClass.links = {};
	CoreDefinitionsCodeableConceptClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (typeof value === "object") {
			if ("Coding" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConceptPropertiesCoding.validationErrors(value.Coding, dataPath + "/Coding", missing));
			}
			if ("DisplayText" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayText.validationErrors(value.DisplayText, dataPath + "/DisplayText", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		}
		return errors;
	}
	CoreDefinitionsCodeableConceptClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeableConceptClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.Coding, {
		get: function() { return CoreDefinitionsCodeableConceptClass.Coding; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.Coding = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.DisplayText, {
		get: function() { return CoreDefinitionsCodeableConceptClass.DisplayText; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.DisplayText = newValue; },
		enumerable: true,
		configurable: true
	});
	
	
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category */
	var BaseDefinitionsCategoryClass = classes.BaseDefinitionsCategory = function BaseDefinitionsCategoryClass(value) {
		if (!(this instanceof BaseDefinitionsCategoryClass)) return new BaseDefinitionsCategoryClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsCategoryClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsCategoryClass.prototype.constructor = BaseDefinitionsCategoryClass;
	BaseDefinitionsCategoryClass.description = "A categorization of the action according its type, often a code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This can be used for searching, sorting and display purposes.";
	BaseDefinitionsCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category";
	BaseDefinitionsCategoryClass.links = {};
	BaseDefinitionsCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		}
		return errors;
	}
	BaseDefinitionsCategoryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsCategoryClass, BaseDefinitionsCategoryClass.Value, {
		get: function() { return BaseDefinitionsCategoryClass.Value; },
		set: function(newValue) { BaseDefinitionsCategoryClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType */
	var CoreDefinitionsSpecificTypeClass = classes.CoreDefinitionsSpecificType = function CoreDefinitionsSpecificTypeClass(value) {
		if (!(this instanceof CoreDefinitionsSpecificTypeClass)) return new CoreDefinitionsSpecificTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsSpecificTypeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsSpecificTypeClass.prototype.constructor = CoreDefinitionsSpecificTypeClass;
	CoreDefinitionsSpecificTypeClass.description = "A code or description representing the concept represented by the instance at a specific level. For example, for a Condition, the concept is MTH#C0348080 (Condition) but the Value is the SpecificType, i.e. MTH#C0011849 (Diabetes Mellitus). For an observation, the SpecificType defines what is being observed, measured, or asked, as specifically as possible. The SpecificType should always align with the concept of the element, for example, a blood pressure observation can be coded as a sitting blood pressure or standing blood pressure, and may be from a different code system (e.g. LOINC versus MTH). In other cases, the SpecificType is the specific question being asked, or the specific goal being pursued.";
	CoreDefinitionsSpecificTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType";
	CoreDefinitionsSpecificTypeClass.links = {};
	CoreDefinitionsSpecificTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		}
		return errors;
	}
	CoreDefinitionsSpecificTypeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsSpecificTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsSpecificTypeClass, CoreDefinitionsSpecificTypeClass.Value, {
		get: function() { return CoreDefinitionsSpecificTypeClass.Value; },
		set: function(newValue) { CoreDefinitionsSpecificTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action */
	var BaseDefinitionsActionClass = classes.BaseDefinitionsAction = function BaseDefinitionsActionClass(value) {
		console.log("inside BaseDefinitionsActionClass constructor");
		if (!(this instanceof BaseDefinitionsActionClass)) return new BaseDefinitionsActionClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && this.NonOccurrenceModifier) {
			this.NonOccurrenceModifier = new classes.BaseDefinitionsNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (typeof value.OccurrenceTime !== "undefined") {
			this.OccurrenceTime = value.OccurrenceTime;
		}
		if (this.OccurrenceTime && !Array.isArray(this.OccurrenceTime) && this.OccurrenceTime) {
			this.OccurrenceTime = new classes.CoreDefinitionsOccurrenceTime(this.OccurrenceTime);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsActionClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsActionClass.prototype.constructor = BaseDefinitionsActionClass;
	BaseDefinitionsActionClass.description = "A deed or endeavor; an action taken to address a undesired health state, behavior, risk, or goal. An action can have various contexts: definitional, occurred/not occurred, ordered/not ordered, recommended/recommended against.";
	BaseDefinitionsActionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action";
	BaseDefinitionsActionClass.links = {};
	BaseDefinitionsActionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
			if ("OccurrenceTime" in value) {
				errors = errors.concat(classes.CoreDefinitionsOccurrenceTime.validationErrors(value.OccurrenceTime, dataPath + "/OccurrenceTime", missing));
			}
			if ("Participant" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesParticipant.validationErrors(value.Participant, dataPath + "/Participant", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		}
		return errors;
	}
	BaseDefinitionsActionClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.SpecificType, {
		get: function() { return BaseDefinitionsActionClass.SpecificType; },
		set: function(newValue) { BaseDefinitionsActionClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Status, {
		get: function() { return BaseDefinitionsActionClass.Status; },
		set: function(newValue) { BaseDefinitionsActionClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Category, {
		get: function() { return BaseDefinitionsActionClass.Category; },
		set: function(newValue) { BaseDefinitionsActionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.NonOccurrenceModifier, {
		get: function() { return BaseDefinitionsActionClass.NonOccurrenceModifier; },
		set: function(newValue) { BaseDefinitionsActionClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Reason, {
		get: function() { return BaseDefinitionsActionClass.Reason; },
		set: function(newValue) { BaseDefinitionsActionClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.OccurrenceTime, {
		get: function() { return BaseDefinitionsActionClass.OccurrenceTime; },
		set: function(newValue) { BaseDefinitionsActionClass.OccurrenceTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Participant, {
		get: function() { return BaseDefinitionsActionClass.Participant; },
		set: function(newValue) { BaseDefinitionsActionClass.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus */
	var AssessmentDefinitionsAssessmentFocusClass = classes.AssessmentDefinitionsAssessmentFocus = function AssessmentDefinitionsAssessmentFocusClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentFocusClass)) return new AssessmentDefinitionsAssessmentFocusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.AssessmentDefinitionsAssessmentFocusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentFocusClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentFocusClass.prototype.constructor = AssessmentDefinitionsAssessmentFocusClass;
	AssessmentDefinitionsAssessmentFocusClass.description = "The topic or target of an analysis or assessment. For example, if the assessment involves the progression of the subject's diabetes, then the AssessmentFocus would be diabetes and the category would be progression. If the investigation involves the toxicity of chemotherapy regimen, the focus would be that regimen and the category would be toxicity.";
	AssessmentDefinitionsAssessmentFocusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus";
	AssessmentDefinitionsAssessmentFocusClass.links = {};
	AssessmentDefinitionsAssessmentFocusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusClass, AssessmentDefinitionsAssessmentFocusClass.Value, {
		get: function() { return AssessmentDefinitionsAssessmentFocusClass.Value; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2 */
	var AssessmentDefinitionsAssessmentAllOf2Class = classes.AssessmentDefinitionsAssessmentAllOf2 = function AssessmentDefinitionsAssessmentAllOf2Class(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentAllOf2Class)) return new AssessmentDefinitionsAssessmentAllOf2Class(value);
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (typeof value.AssessmentResult !== "undefined") {
			this.AssessmentResult = value.AssessmentResult;
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.ClinicallyRelevantTime !== "undefined") {
			this.ClinicallyRelevantTime = value.ClinicallyRelevantTime;
		}
		if (this.ClinicallyRelevantTime && !Array.isArray(this.ClinicallyRelevantTime) && this.ClinicallyRelevantTime) {
			this.ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.ClinicallyRelevantTime);
		}
		if (typeof value.EvidenceQuality !== "undefined") {
			this.EvidenceQuality = value.EvidenceQuality;
		}
		if (this.EvidenceQuality && !Array.isArray(this.EvidenceQuality) && this.EvidenceQuality) {
			this.EvidenceQuality = new classes.AssessmentDefinitionsEvidenceQuality(this.EvidenceQuality);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.Summary !== "undefined") {
			this.Summary = value.Summary;
		}
		if (this.Summary && !Array.isArray(this.Summary) && this.Summary) {
			this.Summary = new classes.CoreDefinitionsSummary(this.Summary);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentAllOf2Class.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentAllOf2Class.prototype.constructor = AssessmentDefinitionsAssessmentAllOf2Class;
	AssessmentDefinitionsAssessmentAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2";
	AssessmentDefinitionsAssessmentAllOf2Class.links = {};
	AssessmentDefinitionsAssessmentAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		} else if (typeof value === "object") {
			if ("Category" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
			}
			if ("AssessmentFocus" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocus.validationErrors(value.AssessmentFocus, dataPath + "/AssessmentFocus", missing));
			}
			if ("AssessmentResult" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResult.validationErrors(value.AssessmentResult, dataPath + "/AssessmentResult", missing));
			}
			if ("Method" in value) {
				errors = errors.concat(classes.ObservationDefinitionsMethod.validationErrors(value.Method, dataPath + "/Method", missing));
			}
			if ("ClinicallyRelevantTime" in value) {
				errors = errors.concat(classes.ObservationDefinitionsClinicallyRelevantTime.validationErrors(value.ClinicallyRelevantTime, dataPath + "/ClinicallyRelevantTime", missing));
			}
			if ("EvidenceQuality" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsEvidenceQuality.validationErrors(value.EvidenceQuality, dataPath + "/EvidenceQuality", missing));
			}
			if ("Evidence" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesEvidence.validationErrors(value.Evidence, dataPath + "/Evidence", missing));
			}
			if ("Summary" in value) {
				errors = errors.concat(classes.CoreDefinitionsSummary.validationErrors(value.Summary, dataPath + "/Summary", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Category, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Category; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Status, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Status; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Method, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Method; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Evidence, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Evidence; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Summary, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Summary; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Summary = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status */
	var BaseDefinitionsStatusClass = classes.BaseDefinitionsStatus = function BaseDefinitionsStatusClass(value) {
		if (!(this instanceof BaseDefinitionsStatusClass)) return new BaseDefinitionsStatusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.BaseDefinitionsStatusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsStatusClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsStatusClass.prototype.constructor = BaseDefinitionsStatusClass;
	BaseDefinitionsStatusClass.description = "The position of affairs at a particular time\nConcepts: http://ncimeta.nci.nih.gov:C0449438";
	BaseDefinitionsStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status";
	BaseDefinitionsStatusClass.links = {};
	BaseDefinitionsStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		}
		return errors;
	}
	BaseDefinitionsStatusClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsStatusClass, BaseDefinitionsStatusClass.Value, {
		get: function() { return BaseDefinitionsStatusClass.Value; },
		set: function(newValue) { BaseDefinitionsStatusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment */
	var AssessmentDefinitionsAssessmentClass = classes.AssessmentDefinitionsAssessment = function AssessmentDefinitionsAssessmentClass(value) {
		console.log("inside AssessmentDefinitionsAssessmentClass constructor");
		//console.log(value); value contains everything passed in to Progression constructor, as it should.
		
		if (!(this instanceof AssessmentDefinitionsAssessmentClass)) return new AssessmentDefinitionsAssessmentClass(value);
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status) && this.Status) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (typeof value.AssessmentResult !== "undefined") {
			this.AssessmentResult = value.AssessmentResult;
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.ClinicallyRelevantTime !== "undefined") {
			this.ClinicallyRelevantTime = value.ClinicallyRelevantTime;
		}
		if (this.ClinicallyRelevantTime && !Array.isArray(this.ClinicallyRelevantTime) && this.ClinicallyRelevantTime) {
			this.ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.ClinicallyRelevantTime);
		}
		if (typeof value.EvidenceQuality !== "undefined") {
			this.EvidenceQuality = value.EvidenceQuality;
		}
		if (this.EvidenceQuality && !Array.isArray(this.EvidenceQuality) && this.EvidenceQuality) {
			this.EvidenceQuality = new classes.AssessmentDefinitionsEvidenceQuality(this.EvidenceQuality);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.Summary !== "undefined") {
			this.Summary = value.Summary;
		}
		if (this.Summary && !Array.isArray(this.Summary) && this.Summary) {
			this.Summary = new classes.CoreDefinitionsSummary(this.Summary);
		}
		
		BaseDefinitionsActionClass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentClass.prototype = Object.create(BaseDefinitionsActionClass.prototype);
	AssessmentDefinitionsAssessmentClass.prototype.constructor = AssessmentDefinitionsAssessmentClass;
	AssessmentDefinitionsAssessmentClass.description = "A conclusion (tentative or final) resulting from synthesis of evidence (one or more observations). An Assessment is a judgment rendered at a point in time. A diagnosis is a type of Assessment that can lead to creation of a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0220825";
	AssessmentDefinitionsAssessmentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment";
	AssessmentDefinitionsAssessmentClass.links = {};
	AssessmentDefinitionsAssessmentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsAction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Category, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Category; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Status, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Status; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentFocus, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentFocus; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentResult, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentResult; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentResult = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Method, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Method; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime, {
		get: function() { return AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.EvidenceQuality, {
		get: function() { return AssessmentDefinitionsAssessmentClass.EvidenceQuality; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.EvidenceQuality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Evidence, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Evidence; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Summary, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Summary; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Summary = newValue; },
		enumerable: true,
		configurable: true
	});
	
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression */
	var OncologyDefinitionsProgressionClass = classes.OncologyDefinitionsProgression = function OncologyDefinitionsProgressionClass(value) {
		if (!(this instanceof OncologyDefinitionsProgressionClass)) return new OncologyDefinitionsProgressionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (this.AssessmentFocus && !Array.isArray(this.AssessmentFocus) && this.AssessmentFocus) {
			this.AssessmentFocus = new classes.AssessmentDefinitionsAssessmentFocus(this.AssessmentFocus);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		
		AssessmentDefinitionsAssessmentClass.apply(this, arguments);
	};
	OncologyDefinitionsProgressionClass.prototype = Object.create(AssessmentDefinitionsAssessmentClass.prototype);
	OncologyDefinitionsProgressionClass.prototype.constructor = OncologyDefinitionsProgressionClass;
	OncologyDefinitionsProgressionClass.description = "A finding related to the current trend of a disease. This concept is most often used for chronic and incurable diseases where the status and trendline of the disease is an important determinant of therapy and prognosis. The specific disorder being evaluated must be cited in the AssessmentFocus as a reference to a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0449258";
	OncologyDefinitionsProgressionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression";
	OncologyDefinitionsProgressionClass.links = {};
	OncologyDefinitionsProgressionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessment.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsProgressionAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsProgressionClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgressionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Value, {
		get: function() { return OncologyDefinitionsProgressionClass.Value; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Category, {
		get: function() { return OncologyDefinitionsProgressionClass.Category; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.AssessmentFocus, {
		get: function() { return OncologyDefinitionsProgressionClass.AssessmentFocus; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Evidence, {
		get: function() { return OncologyDefinitionsProgressionClass.Evidence; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});













	return classes;
 }
module.exports = { makeHierarchy };