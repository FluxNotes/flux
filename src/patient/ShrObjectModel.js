// hand edited, with multiple inheritance
// Reordered by hand the output of json-model
// Copied from seventh-attempt-mixins.js. One minus sign remains in the output of schema2js.code(), manually fixed.

 var makeHierarchy = function (superclass, classes, request) {
	function pointerEscape(key) {
		return key.replace(/~/g, "~0").replace(/\//g, "~1");
	}
	function unicodeLength(string) {
		return string.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "_").length;
	}
	if (superclass && typeof superclass === "object") {
		request = classes;
		classes = superclass;
		superclass = null;
	}
	superclass = superclass || function GeneratedClass() {};
	if (typeof classes === "function") {
		request = classes;
		classes = null;
	}
	request = request || function ErrorFunc() {throw new Error("No web-request function provided");};
	classes = classes || {};
// above here is code from the top of the autogenerated file, unsure if necessary





/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category */
	var BaseDefinitionsCategoryClass = classes.BaseDefinitionsCategory = function BaseDefinitionsCategoryClass(value) {
		if (!(this instanceof BaseDefinitionsCategoryClass)) return new BaseDefinitionsCategoryClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsCategoryClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsCategoryClass.prototype.constructor = BaseDefinitionsCategoryClass;
	BaseDefinitionsCategoryClass.description = "A categorization of the action according its type, often a code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This can be used for searching, sorting and display purposes.";
	BaseDefinitionsCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category";
	BaseDefinitionsCategoryClass.links = {};
	BaseDefinitionsCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		}
		return errors;
	}
	BaseDefinitionsCategoryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsCategoryClass, BaseDefinitionsCategoryClass.Value, {
		get: function() { return BaseDefinitionsCategoryClass.Value; },
		set: function(newValue) { BaseDefinitionsCategoryClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId */
	var BaseDefinitionsShrIdClass = classes.BaseDefinitionsShrId = function BaseDefinitionsShrIdClass(value) {
		if (!(this instanceof BaseDefinitionsShrIdClass)) return new BaseDefinitionsShrIdClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsShrIdClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsShrIdClass.prototype.constructor = BaseDefinitionsShrIdClass;
	BaseDefinitionsShrIdClass.description = "A unique, persistent identifier for the Standard Health Record to which this entry belongs.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	BaseDefinitionsShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId";
	BaseDefinitionsShrIdClass.links = {};
	BaseDefinitionsShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsShrIdPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		}
		return errors;
	}
	BaseDefinitionsShrIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsShrIdClass, BaseDefinitionsShrIdClass.Value, {
		get: function() { return BaseDefinitionsShrIdClass.Value; },
		set: function(newValue) { BaseDefinitionsShrIdClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId */
	var BaseDefinitionsEntryIdClass = classes.BaseDefinitionsEntryId = function BaseDefinitionsEntryIdClass(value) {
		if (!(this instanceof BaseDefinitionsEntryIdClass)) return new BaseDefinitionsEntryIdClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsEntryIdClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsEntryIdClass.prototype.constructor = BaseDefinitionsEntryIdClass;
	BaseDefinitionsEntryIdClass.description = "A unique, persistent, permanent identifier for an entry in a health record.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	BaseDefinitionsEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId";
	BaseDefinitionsEntryIdClass.links = {};
	BaseDefinitionsEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryIdPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		}
		return errors;
	}
	BaseDefinitionsEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsEntryIdClass, BaseDefinitionsEntryIdClass.Value, {
		get: function() { return BaseDefinitionsEntryIdClass.Value; },
		set: function(newValue) { BaseDefinitionsEntryIdClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject */
	var BaseDefinitionsFocalSubjectClass = classes.BaseDefinitionsFocalSubject = function BaseDefinitionsFocalSubjectClass(value) {
		if (!(this instanceof BaseDefinitionsFocalSubjectClass)) return new BaseDefinitionsFocalSubjectClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsFocalSubjectPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsFocalSubjectClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsFocalSubjectClass.prototype.constructor = BaseDefinitionsFocalSubjectClass;
	BaseDefinitionsFocalSubjectClass.description = "The person or thing that this entry refers to, usually the Person of Record. However, not all entries refer to the Person of Record. The entry could refer to a fetus, care giver, or relative (living or dead).";
	BaseDefinitionsFocalSubjectClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject";
	BaseDefinitionsFocalSubjectClass.links = {};
	BaseDefinitionsFocalSubjectClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubjectPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsFocalSubjectClass, BaseDefinitionsFocalSubjectClass.Value, {
		get: function() { return BaseDefinitionsFocalSubjectClass.Value; },
		set: function(newValue) { BaseDefinitionsFocalSubjectClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author */
	var BaseDefinitionsAuthorClass = classes.BaseDefinitionsAuthor = function BaseDefinitionsAuthorClass(value) {
		if (!(this instanceof BaseDefinitionsAuthorClass)) return new BaseDefinitionsAuthorClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsAuthorPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAuthorClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAuthorClass.prototype.constructor = BaseDefinitionsAuthorClass;
	BaseDefinitionsAuthorClass.description = "The person or organization who created the entry and is responsible for (and may certify) its content.";
	BaseDefinitionsAuthorClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author";
	BaseDefinitionsAuthorClass.links = {};
	BaseDefinitionsAuthorClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthorPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		}
		return errors;
	}
	BaseDefinitionsAuthorClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAuthorClass, BaseDefinitionsAuthorClass.Value, {
		get: function() { return BaseDefinitionsAuthorClass.Value; },
		set: function(newValue) { BaseDefinitionsAuthorClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag */
	var BaseDefinitionsSubjectIsThirdPartyFlagClass = classes.BaseDefinitionsSubjectIsThirdPartyFlag = function BaseDefinitionsSubjectIsThirdPartyFlagClass(value) {
		if (!(this instanceof BaseDefinitionsSubjectIsThirdPartyFlagClass)) return new BaseDefinitionsSubjectIsThirdPartyFlagClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsSubjectIsThirdPartyFlagClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsSubjectIsThirdPartyFlagClass.prototype.constructor = BaseDefinitionsSubjectIsThirdPartyFlagClass;
	BaseDefinitionsSubjectIsThirdPartyFlagClass.description = "If true, the subject of this entry is someone other than the Person of Record, for example, a family member.";
	BaseDefinitionsSubjectIsThirdPartyFlagClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag";
	BaseDefinitionsSubjectIsThirdPartyFlagClass.links = {};
	BaseDefinitionsSubjectIsThirdPartyFlagClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		}
		return errors;
	}
	BaseDefinitionsSubjectIsThirdPartyFlagClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsSubjectIsThirdPartyFlagClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsSubjectIsThirdPartyFlagClass, BaseDefinitionsSubjectIsThirdPartyFlagClass.Value, {
		get: function() { return BaseDefinitionsSubjectIsThirdPartyFlagClass.Value; },
		set: function(newValue) { BaseDefinitionsSubjectIsThirdPartyFlagClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative */
	var BaseDefinitionsNarrativeClass = classes.BaseDefinitionsNarrative = function BaseDefinitionsNarrativeClass(value) {
		if (!(this instanceof BaseDefinitionsNarrativeClass)) return new BaseDefinitionsNarrativeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.NarrativeQualifier !== "undefined") {
			this.NarrativeQualifier = value.NarrativeQualifier;
		}
		if (this.NarrativeQualifier && !Array.isArray(this.NarrativeQualifier)) {
			this.NarrativeQualifier = new classes.BaseDefinitionsNarrativeQualifier(this.NarrativeQualifier);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsNarrativeClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsNarrativeClass.prototype.constructor = BaseDefinitionsNarrativeClass;
	BaseDefinitionsNarrativeClass.description = "A human-readable narrative, potentially including images, that contains a summary of the resource, and may be used to represent the content of the resource to a human.";
	BaseDefinitionsNarrativeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative";
	BaseDefinitionsNarrativeClass.links = {};
	BaseDefinitionsNarrativeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrativePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
			}
			if ("NarrativeQualifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrativeQualifier.validationErrors(value.NarrativeQualifier, dataPath + "/NarrativeQualifier", missing));
			} else {
				errors.push({code: 302, params: {key: "NarrativeQualifier"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		}
		return errors;
	}
	BaseDefinitionsNarrativeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNarrativeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsNarrativeClass, BaseDefinitionsNarrativeClass.Value, {
		get: function() { return BaseDefinitionsNarrativeClass.Value; },
		set: function(newValue) { BaseDefinitionsNarrativeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsNarrativeClass, BaseDefinitionsNarrativeClass.NarrativeQualifier, {
		get: function() { return BaseDefinitionsNarrativeClass.NarrativeQualifier; },
		set: function(newValue) { BaseDefinitionsNarrativeClass.NarrativeQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant */
	var BaseDefinitionsInformantClass = classes.BaseDefinitionsInformant = function BaseDefinitionsInformantClass(value) {
		if (!(this instanceof BaseDefinitionsInformantClass)) return new BaseDefinitionsInformantClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.BaseDefinitionsInformantPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsInformantClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsInformantClass.prototype.constructor = BaseDefinitionsInformantClass;
	BaseDefinitionsInformantClass.description = "The person or entity that provided the information in the entry, as distinct from the actor creating the entry, e.g. the subject (patient), medical professional, family member, device or software program.\nConcepts: http://ncimeta.nci.nih.gov:C0449416";
	BaseDefinitionsInformantClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant";
	BaseDefinitionsInformantClass.links = {};
	BaseDefinitionsInformantClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsInformantPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		}
		return errors;
	}
	BaseDefinitionsInformantClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsInformantClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsInformantClass, BaseDefinitionsInformantClass.Value, {
		get: function() { return BaseDefinitionsInformantClass.Value; },
		set: function(newValue) { BaseDefinitionsInformantClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter */
	var BaseDefinitionsAssociatedEncounterClass = classes.BaseDefinitionsAssociatedEncounter = function BaseDefinitionsAssociatedEncounterClass(value) {
		if (!(this instanceof BaseDefinitionsAssociatedEncounterClass)) return new BaseDefinitionsAssociatedEncounterClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsAssociatedEncounterPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAssociatedEncounterClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAssociatedEncounterClass.prototype.constructor = BaseDefinitionsAssociatedEncounterClass;
	BaseDefinitionsAssociatedEncounterClass.description = "The encounter or episode of care that led to creation of this entry.";
	BaseDefinitionsAssociatedEncounterClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter";
	BaseDefinitionsAssociatedEncounterClass.links = {};
	BaseDefinitionsAssociatedEncounterClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounterPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAssociatedEncounterClass, BaseDefinitionsAssociatedEncounterClass.Value, {
		get: function() { return BaseDefinitionsAssociatedEncounterClass.Value; },
		set: function(newValue) { BaseDefinitionsAssociatedEncounterClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate */
	var BaseDefinitionsOriginalCreationDateClass = classes.BaseDefinitionsOriginalCreationDate = function BaseDefinitionsOriginalCreationDateClass(value) {
		if (!(this instanceof BaseDefinitionsOriginalCreationDateClass)) return new BaseDefinitionsOriginalCreationDateClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsOriginalCreationDateClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsOriginalCreationDateClass.prototype.constructor = BaseDefinitionsOriginalCreationDateClass;
	BaseDefinitionsOriginalCreationDateClass.description = "The point in time when the information was recorded in the system of record.\nConcepts: http://ncimeta.nci.nih.gov:C3669169";
	BaseDefinitionsOriginalCreationDateClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate";
	BaseDefinitionsOriginalCreationDateClass.links = {};
	BaseDefinitionsOriginalCreationDateClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsOriginalCreationDatePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		}
		return errors;
	}
	BaseDefinitionsOriginalCreationDateClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsOriginalCreationDateClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsOriginalCreationDateClass, BaseDefinitionsOriginalCreationDateClass.Value, {
		get: function() { return BaseDefinitionsOriginalCreationDateClass.Value; },
		set: function(newValue) { BaseDefinitionsOriginalCreationDateClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate */
	var BaseDefinitionsLastUpdateDateClass = classes.BaseDefinitionsLastUpdateDate = function BaseDefinitionsLastUpdateDateClass(value) {
		if (!(this instanceof BaseDefinitionsLastUpdateDateClass)) return new BaseDefinitionsLastUpdateDateClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsLastUpdateDateClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsLastUpdateDateClass.prototype.constructor = BaseDefinitionsLastUpdateDateClass;
	BaseDefinitionsLastUpdateDateClass.description = "A date that the entry was changed.";
	BaseDefinitionsLastUpdateDateClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate";
	BaseDefinitionsLastUpdateDateClass.links = {};
	BaseDefinitionsLastUpdateDateClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsLastUpdateDatePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		}
		return errors;
	}
	BaseDefinitionsLastUpdateDateClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsLastUpdateDateClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsLastUpdateDateClass, BaseDefinitionsLastUpdateDateClass.Value, {
		get: function() { return BaseDefinitionsLastUpdateDateClass.Value; },
		set: function(newValue) { BaseDefinitionsLastUpdateDateClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language */
	var BaseDefinitionsLanguageClass = classes.BaseDefinitionsLanguage = function BaseDefinitionsLanguageClass(value) {
		if (!(this instanceof BaseDefinitionsLanguageClass)) return new BaseDefinitionsLanguageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsLanguageClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsLanguageClass.prototype.constructor = BaseDefinitionsLanguageClass;
	BaseDefinitionsLanguageClass.description = "A human language, spoken or written.\nConcepts: http://ncimeta.nci.nih.gov:C0023008";
	BaseDefinitionsLanguageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language";
	BaseDefinitionsLanguageClass.links = {};
	BaseDefinitionsLanguageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		}
		return errors;
	}
	BaseDefinitionsLanguageClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsLanguageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsLanguageClass, BaseDefinitionsLanguageClass.Value, {
		get: function() { return BaseDefinitionsLanguageClass.Value; },
		set: function(newValue) { BaseDefinitionsLanguageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry */
	var BaseDefinitionsEntryClass = classes.BaseDefinitionsEntry = function BaseDefinitionsEntryClass(value) {
		if (!(this instanceof BaseDefinitionsEntryClass)) return new BaseDefinitionsEntryClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId)) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId)) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject)) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate)) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate)) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsEntryClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsEntryClass.prototype.constructor = BaseDefinitionsEntryClass;
	BaseDefinitionsEntryClass.description = "An item inserted in an electronic record.\nConcepts: http://ncimeta.nci.nih.gov:C1705654\nTBD Fields: SecurityLabel\nTag";
	BaseDefinitionsEntryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry";
	BaseDefinitionsEntryClass.links = {};
	BaseDefinitionsEntryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.BaseDefinitionsShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("Version" in value) {
				errors = errors.concat(classes.CoreDefinitionsVersion.validationErrors(value.Version, dataPath + "/Version", missing));
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryPropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("FocalSubject" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubject.validationErrors(value.FocalSubject, dataPath + "/FocalSubject", missing));
			} else {
				errors.push({code: 302, params: {key: "FocalSubject"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("SubjectIsThirdPartyFlag" in value) {
				errors = errors.concat(classes.BaseDefinitionsSubjectIsThirdPartyFlag.validationErrors(value.SubjectIsThirdPartyFlag, dataPath + "/SubjectIsThirdPartyFlag", missing));
			}
			if ("Narrative" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrative.validationErrors(value.Narrative, dataPath + "/Narrative", missing));
			}
			if ("Informant" in value) {
				errors = errors.concat(classes.BaseDefinitionsInformant.validationErrors(value.Informant, dataPath + "/Informant", missing));
			}
			if ("Author" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthor.validationErrors(value.Author, dataPath + "/Author", missing));
			}
			if ("AssociatedEncounter" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounter.validationErrors(value.AssociatedEncounter, dataPath + "/AssociatedEncounter", missing));
			}
			if ("OriginalCreationDate" in value) {
				errors = errors.concat(classes.BaseDefinitionsOriginalCreationDate.validationErrors(value.OriginalCreationDate, dataPath + "/OriginalCreationDate", missing));
			} else {
				errors.push({code: 302, params: {key: "OriginalCreationDate"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("LastUpdateDate" in value) {
				errors = errors.concat(classes.BaseDefinitionsLastUpdateDate.validationErrors(value.LastUpdateDate, dataPath + "/LastUpdateDate", missing));
			} else {
				errors.push({code: 302, params: {key: "LastUpdateDate"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("Language" in value) {
				errors = errors.concat(classes.BaseDefinitionsLanguage.validationErrors(value.Language, dataPath + "/Language", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		}
		return errors;
	}
	BaseDefinitionsEntryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.ShrId, {
		get: function() { return BaseDefinitionsEntryClass.ShrId; },
		set: function(newValue) { BaseDefinitionsEntryClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.EntryId, {
		get: function() { return BaseDefinitionsEntryClass.EntryId; },
		set: function(newValue) { BaseDefinitionsEntryClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Version, {
		get: function() { return BaseDefinitionsEntryClass.Version; },
		set: function(newValue) { BaseDefinitionsEntryClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.EntryType, {
		get: function() { return BaseDefinitionsEntryClass.EntryType; },
		set: function(newValue) { BaseDefinitionsEntryClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.FocalSubject, {
		get: function() { return BaseDefinitionsEntryClass.FocalSubject; },
		set: function(newValue) { BaseDefinitionsEntryClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag, {
		get: function() { return BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Narrative, {
		get: function() { return BaseDefinitionsEntryClass.Narrative; },
		set: function(newValue) { BaseDefinitionsEntryClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Informant, {
		get: function() { return BaseDefinitionsEntryClass.Informant; },
		set: function(newValue) { BaseDefinitionsEntryClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Author, {
		get: function() { return BaseDefinitionsEntryClass.Author; },
		set: function(newValue) { BaseDefinitionsEntryClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.AssociatedEncounter, {
		get: function() { return BaseDefinitionsEntryClass.AssociatedEncounter; },
		set: function(newValue) { BaseDefinitionsEntryClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.OriginalCreationDate, {
		get: function() { return BaseDefinitionsEntryClass.OriginalCreationDate; },
		set: function(newValue) { BaseDefinitionsEntryClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.LastUpdateDate, {
		get: function() { return BaseDefinitionsEntryClass.LastUpdateDate; },
		set: function(newValue) { BaseDefinitionsEntryClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Language, {
		get: function() { return BaseDefinitionsEntryClass.Language; },
		set: function(newValue) { BaseDefinitionsEntryClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action */
	var BaseDefinitionsActionClass = classes.BaseDefinitionsAction = function BaseDefinitionsActionClass(value) {
		if (!(this instanceof BaseDefinitionsActionClass)) return new BaseDefinitionsActionClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && this.NonOccurrenceModifier) {
			this.NonOccurrenceModifier = new classes.BaseDefinitionsNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (typeof value.OccurrenceTime !== "undefined") {
			this.OccurrenceTime = value.OccurrenceTime;
		}
		if (this.OccurrenceTime && !Array.isArray(this.OccurrenceTime) && this.OccurrenceTime) {
			this.OccurrenceTime = new classes.CoreDefinitionsOccurrenceTime(this.OccurrenceTime);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsActionClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsActionClass.prototype.constructor = BaseDefinitionsActionClass;
	BaseDefinitionsActionClass.description = "A deed or endeavor; an action taken to address a undesired health state, behavior, risk, or goal. An action can have various contexts: definitional, occurred/not occurred, ordered/not ordered, recommended/recommended against.";
	BaseDefinitionsActionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action";
	BaseDefinitionsActionClass.links = {};
	BaseDefinitionsActionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
			if ("OccurrenceTime" in value) {
				errors = errors.concat(classes.CoreDefinitionsOccurrenceTime.validationErrors(value.OccurrenceTime, dataPath + "/OccurrenceTime", missing));
			}
			if ("Participant" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesParticipant.validationErrors(value.Participant, dataPath + "/Participant", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		}
		return errors;
	}
	BaseDefinitionsActionClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.SpecificType, {
		get: function() { return BaseDefinitionsActionClass.SpecificType; },
		set: function(newValue) { BaseDefinitionsActionClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Status, {
		get: function() { return BaseDefinitionsActionClass.Status; },
		set: function(newValue) { BaseDefinitionsActionClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Category, {
		get: function() { return BaseDefinitionsActionClass.Category; },
		set: function(newValue) { BaseDefinitionsActionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.NonOccurrenceModifier, {
		get: function() { return BaseDefinitionsActionClass.NonOccurrenceModifier; },
		set: function(newValue) { BaseDefinitionsActionClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Reason, {
		get: function() { return BaseDefinitionsActionClass.Reason; },
		set: function(newValue) { BaseDefinitionsActionClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.OccurrenceTime, {
		get: function() { return BaseDefinitionsActionClass.OccurrenceTime; },
		set: function(newValue) { BaseDefinitionsActionClass.OccurrenceTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Participant, {
		get: function() { return BaseDefinitionsActionClass.Participant; },
		set: function(newValue) { BaseDefinitionsActionClass.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText */
	var CoreDefinitionsDisplayTextClass = classes.CoreDefinitionsDisplayText = function CoreDefinitionsDisplayTextClass(value) {
		if (!(this instanceof CoreDefinitionsDisplayTextClass)) return new CoreDefinitionsDisplayTextClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDisplayTextClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDisplayTextClass.prototype.constructor = CoreDefinitionsDisplayTextClass;
	CoreDefinitionsDisplayTextClass.description = "A string meant for reading by a person, usually accompanying a code.\nConcepts: http://ncimeta.nci.nih.gov:C1548311";
	CoreDefinitionsDisplayTextClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText";
	CoreDefinitionsDisplayTextClass.links = {};
	CoreDefinitionsDisplayTextClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayTextPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		}
		return errors;
	}
	CoreDefinitionsDisplayTextClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDisplayTextClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDisplayTextClass, CoreDefinitionsDisplayTextClass.Value, {
		get: function() { return CoreDefinitionsDisplayTextClass.Value; },
		set: function(newValue) { CoreDefinitionsDisplayTextClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding */
	var CoreDefinitionsCodeableConceptPropertiesCodingClass = classes.CoreDefinitionsCodeableConceptPropertiesCoding = {};
	CoreDefinitionsCodeableConceptPropertiesCodingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding";
	CoreDefinitionsCodeableConceptPropertiesCodingClass.links = {};
	CoreDefinitionsCodeableConceptPropertiesCodingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsCoding.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding"});
		}
		return errors;
	}
	CoreDefinitionsCodeableConceptPropertiesCodingClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeableConceptPropertiesCodingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept */
	var CoreDefinitionsCodeableConceptClass = classes.CoreDefinitionsCodeableConcept = function CoreDefinitionsCodeableConceptClass(value) {
		if (!(this instanceof CoreDefinitionsCodeableConceptClass)) return new CoreDefinitionsCodeableConceptClass(value);
		if (typeof value.Coding !== "undefined") {
			this.Coding = value.Coding;
		}
		if (typeof value.DisplayText !== "undefined") {
			this.DisplayText = value.DisplayText;
		}
		if (this.DisplayText && !Array.isArray(this.DisplayText) && this.DisplayText) {
			this.DisplayText = new classes.CoreDefinitionsDisplayText(this.DisplayText);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodeableConceptClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodeableConceptClass.prototype.constructor = CoreDefinitionsCodeableConceptClass;
	CoreDefinitionsCodeableConceptClass.description = "A set of codes drawn from different coding systems, representing the same concept.";
	CoreDefinitionsCodeableConceptClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept";
	CoreDefinitionsCodeableConceptClass.links = {};
	CoreDefinitionsCodeableConceptClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (typeof value === "object") {
			if ("Coding" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConceptPropertiesCoding.validationErrors(value.Coding, dataPath + "/Coding", missing));
			}
			if ("DisplayText" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayText.validationErrors(value.DisplayText, dataPath + "/DisplayText", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		}
		return errors;
	}
	CoreDefinitionsCodeableConceptClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeableConceptClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.Coding, {
		get: function() { return CoreDefinitionsCodeableConceptClass.Coding; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.Coding = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.DisplayText, {
		get: function() { return CoreDefinitionsCodeableConceptClass.DisplayText; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.DisplayText = newValue; },
		enumerable: true,
		configurable: true
	});
	
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus */
	var AssessmentDefinitionsAssessmentFocusClass = classes.AssessmentDefinitionsAssessmentFocus = function AssessmentDefinitionsAssessmentFocusClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentFocusClass)) return new AssessmentDefinitionsAssessmentFocusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.AssessmentDefinitionsAssessmentFocusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentFocusClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentFocusClass.prototype.constructor = AssessmentDefinitionsAssessmentFocusClass;
	AssessmentDefinitionsAssessmentFocusClass.description = "The topic or target of an analysis or assessment. For example, if the assessment involves the progression of the subject's diabetes, then the AssessmentFocus would be diabetes and the category would be progression. If the investigation involves the toxicity of chemotherapy regimen, the focus would be that regimen and the category would be toxicity.";
	AssessmentDefinitionsAssessmentFocusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus";
	AssessmentDefinitionsAssessmentFocusClass.links = {};
	AssessmentDefinitionsAssessmentFocusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusClass, AssessmentDefinitionsAssessmentFocusClass.Value, {
		get: function() { return AssessmentDefinitionsAssessmentFocusClass.Value; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value */
	var BaseDefinitionsStatusPropertiesValueClass = classes.BaseDefinitionsStatusPropertiesValue = function BaseDefinitionsStatusPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsStatusPropertiesValueClass)) return new BaseDefinitionsStatusPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsStatusPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsStatusPropertiesValueClass.prototype.constructor = BaseDefinitionsStatusPropertiesValueClass;
	BaseDefinitionsStatusPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value";
	BaseDefinitionsStatusPropertiesValueClass.links = {};
	BaseDefinitionsStatusPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.BaseDefinitionsStatusPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCoding.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	BaseDefinitionsStatusPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status */
	var BaseDefinitionsStatusClass = classes.BaseDefinitionsStatus = function BaseDefinitionsStatusClass(value) {
		if (!(this instanceof BaseDefinitionsStatusClass)) return new BaseDefinitionsStatusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.BaseDefinitionsStatusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsStatusClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsStatusClass.prototype.constructor = BaseDefinitionsStatusClass;
	BaseDefinitionsStatusClass.description = "The position of affairs at a particular time\nConcepts: http://ncimeta.nci.nih.gov:C0449438";
	BaseDefinitionsStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status";
	BaseDefinitionsStatusClass.links = {};
	BaseDefinitionsStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		}
		return errors;
	}
	BaseDefinitionsStatusClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsStatusClass, BaseDefinitionsStatusClass.Value, {
		get: function() { return BaseDefinitionsStatusClass.Value; },
		set: function(newValue) { BaseDefinitionsStatusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment */
	var AssessmentDefinitionsAssessmentClass = classes.AssessmentDefinitionsAssessment = function AssessmentDefinitionsAssessmentClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentClass)) return new AssessmentDefinitionsAssessmentClass(value);
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status) && this.Status) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (typeof value.AssessmentResult !== "undefined") {
			this.AssessmentResult = value.AssessmentResult;
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.ClinicallyRelevantTime !== "undefined") {
			this.ClinicallyRelevantTime = value.ClinicallyRelevantTime;
		}
		if (this.ClinicallyRelevantTime && !Array.isArray(this.ClinicallyRelevantTime) && this.ClinicallyRelevantTime) {
			this.ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.ClinicallyRelevantTime);
		}
		if (typeof value.EvidenceQuality !== "undefined") {
			this.EvidenceQuality = value.EvidenceQuality;
		}
		if (this.EvidenceQuality && !Array.isArray(this.EvidenceQuality) && this.EvidenceQuality) {
			this.EvidenceQuality = new classes.AssessmentDefinitionsEvidenceQuality(this.EvidenceQuality);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.Summary !== "undefined") {
			this.Summary = value.Summary;
		}
		if (this.Summary && !Array.isArray(this.Summary) && this.Summary) {
			this.Summary = new classes.CoreDefinitionsSummary(this.Summary);
		}
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId) && this.ShrId) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId) && this.EntryId) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject) && this.FocalSubject) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate) && this.OriginalCreationDate) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate) && this.LastUpdateDate) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		BaseDefinitionsActionClass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentClass.prototype = Object.create(BaseDefinitionsActionClass.prototype);
	AssessmentDefinitionsAssessmentClass.prototype.constructor = AssessmentDefinitionsAssessmentClass;
	AssessmentDefinitionsAssessmentClass.description = "A conclusion (tentative or final) resulting from synthesis of evidence (one or more observations). An Assessment is a judgment rendered at a point in time. A diagnosis is a type of Assessment that can lead to creation of a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0220825";
	AssessmentDefinitionsAssessmentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment";
	AssessmentDefinitionsAssessmentClass.links = {};
	AssessmentDefinitionsAssessmentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsAction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Category, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Category; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Status, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Status; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentFocus, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentFocus; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentResult, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentResult; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentResult = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Method, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Method; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime, {
		get: function() { return AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.EvidenceQuality, {
		get: function() { return AssessmentDefinitionsAssessmentClass.EvidenceQuality; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.EvidenceQuality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Evidence, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Evidence; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Summary, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Summary; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Summary = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.ShrId, {
		get: function() { return AssessmentDefinitionsAssessmentClass.ShrId; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.EntryId, {
		get: function() { return AssessmentDefinitionsAssessmentClass.EntryId; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Version, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Version; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.EntryType, {
		get: function() { return AssessmentDefinitionsAssessmentClass.EntryType; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.FocalSubject, {
		get: function() { return AssessmentDefinitionsAssessmentClass.FocalSubject; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.SubjectIsThirdPartyFlag, {
		get: function() { return AssessmentDefinitionsAssessmentClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Narrative, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Narrative; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Informant, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Informant; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Author, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Author; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssociatedEncounter, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssociatedEncounter; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.OriginalCreationDate, {
		get: function() { return AssessmentDefinitionsAssessmentClass.OriginalCreationDate; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.LastUpdateDate, {
		get: function() { return AssessmentDefinitionsAssessmentClass.LastUpdateDate; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Language, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Language; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression */
	var OncologyDefinitionsProgressionClass = classes.OncologyDefinitionsProgression = function OncologyDefinitionsProgressionClass(value) {
		if (!(this instanceof OncologyDefinitionsProgressionClass)) return new OncologyDefinitionsProgressionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (this.AssessmentFocus && !Array.isArray(this.AssessmentFocus) && this.AssessmentFocus) {
			this.AssessmentFocus = new classes.AssessmentDefinitionsAssessmentFocus(this.AssessmentFocus);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId) && this.ShrId) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId) && this.EntryId) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject) && this.FocalSubject) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate) && this.OriginalCreationDate) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate) && this.LastUpdateDate) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		AssessmentDefinitionsAssessmentClass.apply(this, arguments);
	};
	OncologyDefinitionsProgressionClass.prototype = Object.create(AssessmentDefinitionsAssessmentClass.prototype);
	OncologyDefinitionsProgressionClass.prototype.constructor = OncologyDefinitionsProgressionClass;
	OncologyDefinitionsProgressionClass.description = "A finding related to the current trend of a disease. This concept is most often used for chronic and incurable diseases where the status and trendline of the disease is an important determinant of therapy and prognosis. The specific disorder being evaluated must be cited in the AssessmentFocus as a reference to a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0449258";
	OncologyDefinitionsProgressionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression";
	OncologyDefinitionsProgressionClass.links = {};
	OncologyDefinitionsProgressionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessment.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsProgressionAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsProgressionClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgressionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Value, {
		get: function() { return OncologyDefinitionsProgressionClass.Value; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Category, {
		get: function() { return OncologyDefinitionsProgressionClass.Category; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.AssessmentFocus, {
		get: function() { return OncologyDefinitionsProgressionClass.AssessmentFocus; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Evidence, {
		get: function() { return OncologyDefinitionsProgressionClass.Evidence; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.ShrId, {
		get: function() { return OncologyDefinitionsProgressionClass.ShrId; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.EntryId, {
		get: function() { return OncologyDefinitionsProgressionClass.EntryId; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Version, {
		get: function() { return OncologyDefinitionsProgressionClass.Version; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.EntryType, {
		get: function() { return OncologyDefinitionsProgressionClass.EntryType; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.FocalSubject, {
		get: function() { return OncologyDefinitionsProgressionClass.FocalSubject; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.SubjectIsThirdPartyFlag, {
		get: function() { return OncologyDefinitionsProgressionClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Narrative, {
		get: function() { return OncologyDefinitionsProgressionClass.Narrative; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Informant, {
		get: function() { return OncologyDefinitionsProgressionClass.Informant; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Author, {
		get: function() { return OncologyDefinitionsProgressionClass.Author; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.AssociatedEncounter, {
		get: function() { return OncologyDefinitionsProgressionClass.AssociatedEncounter; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.OriginalCreationDate, {
		get: function() { return OncologyDefinitionsProgressionClass.OriginalCreationDate; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.LastUpdateDate, {
		get: function() { return OncologyDefinitionsProgressionClass.LastUpdateDate; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Language, {
		get: function() { return OncologyDefinitionsProgressionClass.Language; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	////end of Progression (includes some general Base/Core types)
	
	
	
	
	
	
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent */
	var AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass = classes.AdverseDefinitionsAdverseReactionPropertiesAdverseEvent = function AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass)) return new AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass(value);
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.prototype.constructor = AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass;
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent";
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent";
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.links = {};
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
		/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent */
	var OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass = classes.OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEvent = function OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass)) return new OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass;
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent";
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent";
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.links = {};
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction */
	var AdverseDefinitionsAdverseReactionClass = classes.AdverseDefinitionsAdverseReaction = function AdverseDefinitionsAdverseReactionClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionClass)) return new AdverseDefinitionsAdverseReactionClass(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent) && this.AdverseEvent) {
			this.AdverseEvent = new classes.AdverseDefinitionsAdverseReactionPropertiesAdverseEvent(this.AdverseEvent);
		}
		if (typeof value.AdverseReactionAttribution !== "undefined") {
			this.AdverseReactionAttribution = value.AdverseReactionAttribution;
		}
		
		BaseDefinitionsEntryClass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionClass.prototype = Object.create(BaseDefinitionsEntryClass.prototype);
	AdverseDefinitionsAdverseReactionClass.prototype.constructor = AdverseDefinitionsAdverseReactionClass;
	AdverseDefinitionsAdverseReactionClass.description = "Any noxious and unintended response to a medical product, procedure, or other intervention, for which a causal relationship to an intervention is at least a reasonable possibility i.e., the relationship cannot be ruled out. It is not necessarily associated with a previously-recorded SubstanceRisk. This entry could be used to record the occurrence or non-occurrence of an adverse reaction.\nTBD Fields: ActionTakenWithMedication\nOtherActionTaken";
	AdverseDefinitionsAdverseReactionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction";
	AdverseDefinitionsAdverseReactionClass.links = {};
	AdverseDefinitionsAdverseReactionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionClass, AdverseDefinitionsAdverseReactionClass.AdverseEvent, {
		get: function() { return AdverseDefinitionsAdverseReactionClass.AdverseEvent; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionClass.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionClass, AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution, {
		get: function() { return AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment */
	var OncologyDefinitionsToxicReactionToTreatmentClass = classes.OncologyDefinitionsToxicReactionToTreatment = function OncologyDefinitionsToxicReactionToTreatmentClass(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentClass)) return new OncologyDefinitionsToxicReactionToTreatmentClass(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent) && typeof this.AdverseEvent === "object") {
			this.AdverseEvent = new classes.OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEvent(this.AdverseEvent);
		}
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId) && this.ShrId) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId) && this.EntryId) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject) && this.FocalSubject) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate) && this.OriginalCreationDate) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate) && this.LastUpdateDate) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		AdverseDefinitionsAdverseReactionClass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentClass.prototype = Object.create(AdverseDefinitionsAdverseReactionClass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentClass.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentClass;
	OncologyDefinitionsToxicReactionToTreatmentClass.description = "A grade 3 or 4 adverse reaction to medication, radiation treatment, or other therapy.";
	OncologyDefinitionsToxicReactionToTreatmentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment";
	OncologyDefinitionsToxicReactionToTreatmentClass.links = {};
	OncologyDefinitionsToxicReactionToTreatmentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AdverseDefinitionsAdverseReaction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.ShrId, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.ShrId; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.EntryId, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.EntryId; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.Version, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.Version; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.EntryType, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.EntryType; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.FocalSubject, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.FocalSubject; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.SubjectIsThirdPartyFlag, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.Narrative, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.Narrative; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.Informant, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.Informant; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.Author, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.Author; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.AssociatedEncounter, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.AssociatedEncounter; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.OriginalCreationDate, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.OriginalCreationDate; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.LastUpdateDate, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.LastUpdateDate; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.Language, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.Language; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	////end of Toxicity-specific
	
	
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value */
	var ObservationDefinitionsObservationPropertiesValueClass = classes.ObservationDefinitionsObservationPropertiesValue = function ObservationDefinitionsObservationPropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationPropertiesValueClass)) return new ObservationDefinitionsObservationPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationPropertiesValueClass.prototype.constructor = ObservationDefinitionsObservationPropertiesValueClass;
	ObservationDefinitionsObservationPropertiesValueClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value";
	ObservationDefinitionsObservationPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value";
	ObservationDefinitionsObservationPropertiesValueClass.links = {};
	ObservationDefinitionsObservationPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason */
	var CoreDefinitionsReasonClass = classes.CoreDefinitionsReason = function CoreDefinitionsReasonClass(value) {
		if (!(this instanceof CoreDefinitionsReasonClass)) return new CoreDefinitionsReasonClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsReasonPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsReasonClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsReasonClass.prototype.constructor = CoreDefinitionsReasonClass;
	CoreDefinitionsReasonClass.description = "The justification for an action or non-action, conclusion, opinion, etc.\nConcepts: http://ncimeta.nci.nih.gov:C0566251";
	CoreDefinitionsReasonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason";
	CoreDefinitionsReasonClass.links = {};
	CoreDefinitionsReasonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		}
		return errors;
	}
	CoreDefinitionsReasonClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsReasonClass, CoreDefinitionsReasonClass.Value, {
		get: function() { return CoreDefinitionsReasonClass.Value; },
		set: function(newValue) { CoreDefinitionsReasonClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy */
	var ObservationDefinitionsAssociatedStudyClass = classes.ObservationDefinitionsAssociatedStudy = function ObservationDefinitionsAssociatedStudyClass(value) {
		if (!(this instanceof ObservationDefinitionsAssociatedStudyClass)) return new ObservationDefinitionsAssociatedStudyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.ObservationDefinitionsAssociatedStudyPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsAssociatedStudyClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsAssociatedStudyClass.prototype.constructor = ObservationDefinitionsAssociatedStudyClass;
	ObservationDefinitionsAssociatedStudyClass.description = "The clinical trial or other formal study related to this finding.";
	ObservationDefinitionsAssociatedStudyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy";
	ObservationDefinitionsAssociatedStudyClass.links = {};
	ObservationDefinitionsAssociatedStudyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudyPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsAssociatedStudyClass, ObservationDefinitionsAssociatedStudyClass.Value, {
		get: function() { return ObservationDefinitionsAssociatedStudyClass.Value; },
		set: function(newValue) { ObservationDefinitionsAssociatedStudyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem */
	var OncologyDefinitionsStagingSystemClass = classes.OncologyDefinitionsStagingSystem = function OncologyDefinitionsStagingSystemClass(value) {
		if (!(this instanceof OncologyDefinitionsStagingSystemClass)) return new OncologyDefinitionsStagingSystemClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsStagingSystemClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsStagingSystemClass.prototype.constructor = OncologyDefinitionsStagingSystemClass;
	OncologyDefinitionsStagingSystemClass.description = "What staging system are used ";
	OncologyDefinitionsStagingSystemClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem";
	OncologyDefinitionsStagingSystemClass.links = {};
	OncologyDefinitionsStagingSystemClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				if (Array.isArray(value.Value)) {
					errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				} else if (value.Value == null) {
					errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				} else if (typeof value.Value === "object" || typeof value.Value === "number" || typeof value.Value === "boolean") {
					errors.push({code: 0, params: {type: typeof value.Value, expected: "string"}, path:dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				}
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
			}
			if ("Version" in value) {
				errors = errors.concat(classes.CoreDefinitionsVersion.validationErrors(value.Version, dataPath + "/Version", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		}
		return errors;
	}
	OncologyDefinitionsStagingSystemClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsStagingSystemClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsStagingSystemClass, OncologyDefinitionsStagingSystemClass.Value, {
		get: function() { return OncologyDefinitionsStagingSystemClass.Value; },
		set: function(newValue) { OncologyDefinitionsStagingSystemClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsStagingSystemClass, OncologyDefinitionsStagingSystemClass.Version, {
		get: function() { return OncologyDefinitionsStagingSystemClass.Version; },
		set: function(newValue) { OncologyDefinitionsStagingSystemClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation */
	var ObservationDefinitionsObservationClass = classes.ObservationDefinitionsObservation = function ObservationDefinitionsObservationClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationClass)) return new ObservationDefinitionsObservationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsObservationPropertiesValue(this.Value);
		}
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (this.BodySite && !Array.isArray(this.BodySite) && this.BodySite) {
			this.BodySite = new classes.CoreDefinitionsBodySite(this.BodySite);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (this.Reason && !Array.isArray(this.Reason) && this.Reason) {
			this.Reason = new classes.CoreDefinitionsReason(this.Reason);
		}
		if (typeof value.AssociatedStudy !== "undefined") {
			this.AssociatedStudy = value.AssociatedStudy;
		}
		if (this.AssociatedStudy && !Array.isArray(this.AssociatedStudy) && this.AssociatedStudy) {
			this.AssociatedStudy = new classes.ObservationDefinitionsAssociatedStudy(this.AssociatedStudy);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status) && this.Status) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && typeof this.NonOccurrenceModifier === "object") {
			this.NonOccurrenceModifier = new classes.ObservationDefinitionsObservationPropertiesNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.AssertionNegationModifier !== "undefined") {
			this.AssertionNegationModifier = value.AssertionNegationModifier;
		}
		if (this.AssertionNegationModifier && !Array.isArray(this.AssertionNegationModifier) && this.AssertionNegationModifier) {
			this.AssertionNegationModifier = new classes.BaseDefinitionsAssertionNegationModifier(this.AssertionNegationModifier);
		}
		if (typeof value.ObservationQualifier !== "undefined") {
			this.ObservationQualifier = value.ObservationQualifier;
		}
		if (typeof value.DataAbsentReason !== "undefined") {
			this.DataAbsentReason = value.DataAbsentReason;
		}
		if (this.DataAbsentReason && !Array.isArray(this.DataAbsentReason) && this.DataAbsentReason) {
			this.DataAbsentReason = new classes.ObservationDefinitionsDataAbsentReason(this.DataAbsentReason);
		}
		if (typeof value.shr_observation_ClinicallyRelevantTime !== "undefined") {
			this.shr_observation_ClinicallyRelevantTime = value.shr_observation_ClinicallyRelevantTime;
		}
		if (this.shr_observation_ClinicallyRelevantTime && !Array.isArray(this.shr_observation_ClinicallyRelevantTime) && this.shr_observation_ClinicallyRelevantTime) {
			this.shr_observation_ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.shr_observation_ClinicallyRelevantTime);
		}
		if (typeof value.ReferenceRange !== "undefined") {
			this.ReferenceRange = value.ReferenceRange;
		}
		if (typeof value.Interpretation !== "undefined") {
			this.Interpretation = value.Interpretation;
		}
		if (this.Interpretation && !Array.isArray(this.Interpretation) && this.Interpretation) {
			this.Interpretation = new classes.LabDefinitionsInterpretation(this.Interpretation);
		}
		if (typeof value.Comment !== "undefined") {
			this.Comment = value.Comment;
		}
		if (this.Comment && !Array.isArray(this.Comment) && this.Comment) {
			this.Comment = new classes.CoreDefinitionsComment(this.Comment);
		}
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && this.PanelMembers) {
			this.PanelMembers = new classes.ObservationDefinitionsPanelMembers(this.PanelMembers);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		if (typeof value.Setting !== "undefined") {
			this.Setting = value.Setting;
		}
		if (typeof value.Location !== "undefined") {
			this.Location = value.Location;
		}
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId) && this.ShrId) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId) && this.EntryId) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject) && this.FocalSubject) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate) && this.OriginalCreationDate) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate) && this.LastUpdateDate) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		BaseDefinitionsActionClass.apply(this, arguments);
	};
	ObservationDefinitionsObservationClass.prototype = Object.create(BaseDefinitionsActionClass.prototype);
	ObservationDefinitionsObservationClass.prototype.constructor = ObservationDefinitionsObservationClass;
	ObservationDefinitionsObservationClass.description = "An Observation represents evidence, both subjective and objective. Observation includes any information about a subject that results from an act of observing, measuring, or evaluation. The focus of an observation can include the subject's behavior, physiological state, health state, functional status, environment, exposures to substances, etc. An Observation contains information about the act of observing or measuring, and the result of the observation. The method of observing can vary widely, from questioning, physical examination, formal assessment vehicles, laboratory tests, imaging procedures, etc. Patient-reported information is also considered an observation, where subject and observer are the same individual.\nConcepts: http://ncimeta.nci.nih.gov:C1554188";
	ObservationDefinitionsObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation";
	ObservationDefinitionsObservationClass.links = {};
	ObservationDefinitionsObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsAction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Value, {
		get: function() { return ObservationDefinitionsObservationClass.Value; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.SpecificType, {
		get: function() { return ObservationDefinitionsObservationClass.SpecificType; },
		set: function(newValue) { ObservationDefinitionsObservationClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Category, {
		get: function() { return ObservationDefinitionsObservationClass.Category; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.BodySite, {
		get: function() { return ObservationDefinitionsObservationClass.BodySite; },
		set: function(newValue) { ObservationDefinitionsObservationClass.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Reason, {
		get: function() { return ObservationDefinitionsObservationClass.Reason; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.AssociatedStudy, {
		get: function() { return ObservationDefinitionsObservationClass.AssociatedStudy; },
		set: function(newValue) { ObservationDefinitionsObservationClass.AssociatedStudy = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Status, {
		get: function() { return ObservationDefinitionsObservationClass.Status; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.NonOccurrenceModifier, {
		get: function() { return ObservationDefinitionsObservationClass.NonOccurrenceModifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Method, {
		get: function() { return ObservationDefinitionsObservationClass.Method; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.AssertionNegationModifier, {
		get: function() { return ObservationDefinitionsObservationClass.AssertionNegationModifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.AssertionNegationModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.ObservationQualifier, {
		get: function() { return ObservationDefinitionsObservationClass.ObservationQualifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.ObservationQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.DataAbsentReason, {
		get: function() { return ObservationDefinitionsObservationClass.DataAbsentReason; },
		set: function(newValue) { ObservationDefinitionsObservationClass.DataAbsentReason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime, {
		get: function() { return ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime; },
		set: function(newValue) { ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.ReferenceRange, {
		get: function() { return ObservationDefinitionsObservationClass.ReferenceRange; },
		set: function(newValue) { ObservationDefinitionsObservationClass.ReferenceRange = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Interpretation, {
		get: function() { return ObservationDefinitionsObservationClass.Interpretation; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Interpretation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Comment, {
		get: function() { return ObservationDefinitionsObservationClass.Comment; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Comment = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.PanelMembers, {
		get: function() { return ObservationDefinitionsObservationClass.PanelMembers; },
		set: function(newValue) { ObservationDefinitionsObservationClass.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Participant, {
		get: function() { return ObservationDefinitionsObservationClass.Participant; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Setting, {
		get: function() { return ObservationDefinitionsObservationClass.Setting; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Setting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Location, {
		get: function() { return ObservationDefinitionsObservationClass.Location; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Location = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.ShrId, {
		get: function() { return ObservationDefinitionsObservationClass.ShrId; },
		set: function(newValue) { ObservationDefinitionsObservationClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.EntryId, {
		get: function() { return ObservationDefinitionsObservationClass.EntryId; },
		set: function(newValue) { ObservationDefinitionsObservationClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Version, {
		get: function() { return ObservationDefinitionsObservationClass.Version; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.EntryType, {
		get: function() { return ObservationDefinitionsObservationClass.EntryType; },
		set: function(newValue) { ObservationDefinitionsObservationClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.FocalSubject, {
		get: function() { return ObservationDefinitionsObservationClass.FocalSubject; },
		set: function(newValue) { ObservationDefinitionsObservationClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.SubjectIsThirdPartyFlag, {
		get: function() { return ObservationDefinitionsObservationClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { ObservationDefinitionsObservationClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Narrative, {
		get: function() { return ObservationDefinitionsObservationClass.Narrative; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Informant, {
		get: function() { return ObservationDefinitionsObservationClass.Informant; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Author, {
		get: function() { return ObservationDefinitionsObservationClass.Author; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.AssociatedEncounter, {
		get: function() { return ObservationDefinitionsObservationClass.AssociatedEncounter; },
		set: function(newValue) { ObservationDefinitionsObservationClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.OriginalCreationDate, {
		get: function() { return ObservationDefinitionsObservationClass.OriginalCreationDate; },
		set: function(newValue) { ObservationDefinitionsObservationClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.LastUpdateDate, {
		get: function() { return ObservationDefinitionsObservationClass.LastUpdateDate; },
		set: function(newValue) { ObservationDefinitionsObservationClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Language, {
		get: function() { return ObservationDefinitionsObservationClass.Language; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage */
	var OncologyDefinitionsTNMStageClass = classes.OncologyDefinitionsTNMStage = function OncologyDefinitionsTNMStageClass(value) {
		if (!(this instanceof OncologyDefinitionsTNMStageClass)) return new OncologyDefinitionsTNMStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.StagingSystem !== "undefined") {
			this.StagingSystem = value.StagingSystem;
		}
		if (this.StagingSystem && !Array.isArray(this.StagingSystem) && this.StagingSystem) {
			this.StagingSystem = new classes.OncologyDefinitionsStagingSystem(this.StagingSystem);
		}
		if (typeof value.StagingTiming !== "undefined") {
			this.StagingTiming = value.StagingTiming;
		}
		if (this.StagingTiming && !Array.isArray(this.StagingTiming) && this.StagingTiming) {
			this.StagingTiming = new classes.OncologyDefinitionsStagingTiming(this.StagingTiming);
		}
		if (typeof value.T_Stage !== "undefined") {
			this.T_Stage = value.T_Stage;
		}
		if (this.T_Stage && !Array.isArray(this.T_Stage) && typeof this.T_Stage === "object") {
			this.T_Stage = new classes.OncologyDefinitionsTStage(this.T_Stage);
		}
		if (typeof value.N_Stage !== "undefined") {
			this.N_Stage = value.N_Stage;
		}
		if (this.N_Stage && !Array.isArray(this.N_Stage) && typeof this.N_Stage === "object") {
			this.N_Stage = new classes.OncologyDefinitionsNStage(this.N_Stage);
		}
		if (typeof value.M_Stage !== "undefined") {
			this.M_Stage = value.M_Stage;
		}
		if (this.M_Stage && !Array.isArray(this.M_Stage) && typeof this.M_Stage === "object") {
			this.M_Stage = new classes.OncologyDefinitionsMStage(this.M_Stage);
		}
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId) && this.ShrId) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId) && this.EntryId) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject) && this.FocalSubject) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate) && this.OriginalCreationDate) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate) && this.LastUpdateDate) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsTNMStageClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsTNMStageClass.prototype.constructor = OncologyDefinitionsTNMStageClass;
	OncologyDefinitionsTNMStageClass.description = "The stage of a cancer, assessed according to the standard established by American Joint Committee on Cancer (AJCC). TNM Stage Grouping categorizes the progression of cancer using the Roman Numeral system. See Table 140 in HL7 CDA® R2 Implementation Guide: Clinical Oncology Treatment Plan and Summary, Release 1 - US Realm\nConcepts: http://loinc.org:21908-9";
	OncologyDefinitionsTNMStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage";
	OncologyDefinitionsTNMStageClass.links = {};
	OncologyDefinitionsTNMStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTNMStageAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTNMStageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTNMStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Value, {
		get: function() { return OncologyDefinitionsTNMStageClass.Value; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.StagingSystem, {
		get: function() { return OncologyDefinitionsTNMStageClass.StagingSystem; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.StagingSystem = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.StagingTiming, {
		get: function() { return OncologyDefinitionsTNMStageClass.StagingTiming; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.StagingTiming = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.T_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.T_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.T_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.N_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.N_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.N_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.M_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.M_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.M_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.ShrId, {
		get: function() { return OncologyDefinitionsTNMStageClass.ShrId; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.EntryId, {
		get: function() { return OncologyDefinitionsTNMStageClass.EntryId; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Version, {
		get: function() { return OncologyDefinitionsTNMStageClass.Version; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.EntryType, {
		get: function() { return OncologyDefinitionsTNMStageClass.EntryType; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.FocalSubject, {
		get: function() { return OncologyDefinitionsTNMStageClass.FocalSubject; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.SubjectIsThirdPartyFlag, {
		get: function() { return OncologyDefinitionsTNMStageClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Narrative, {
		get: function() { return OncologyDefinitionsTNMStageClass.Narrative; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Informant, {
		get: function() { return OncologyDefinitionsTNMStageClass.Informant; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Author, {
		get: function() { return OncologyDefinitionsTNMStageClass.Author; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.AssociatedEncounter, {
		get: function() { return OncologyDefinitionsTNMStageClass.AssociatedEncounter; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.OriginalCreationDate, {
		get: function() { return OncologyDefinitionsTNMStageClass.OriginalCreationDate; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.LastUpdateDate, {
		get: function() { return OncologyDefinitionsTNMStageClass.LastUpdateDate; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Language, {
		get: function() { return OncologyDefinitionsTNMStageClass.Language; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	////end of Staging-specific types
	
	
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title */
	var CoreDefinitionsTitleClass = classes.CoreDefinitionsTitle = function CoreDefinitionsTitleClass(value) {
		if (!(this instanceof CoreDefinitionsTitleClass)) return new CoreDefinitionsTitleClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTitleClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTitleClass.prototype.constructor = CoreDefinitionsTitleClass;
	CoreDefinitionsTitleClass.description = "A distinguishing word or group of words naming an item.";
	CoreDefinitionsTitleClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title";
	CoreDefinitionsTitleClass.links = {};
	CoreDefinitionsTitleClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsTitlePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Title"});
		}
		return errors;
	}
	CoreDefinitionsTitleClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTitleClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsTitleClass, CoreDefinitionsTitleClass.Value, {
		get: function() { return CoreDefinitionsTitleClass.Value; },
		set: function(newValue) { CoreDefinitionsTitleClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier */
	var CoreDefinitionsIdentifierClass = classes.CoreDefinitionsIdentifier = function CoreDefinitionsIdentifierClass(value) {
		if (!(this instanceof CoreDefinitionsIdentifierClass)) return new CoreDefinitionsIdentifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsIdentifierClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsIdentifierClass.prototype.constructor = CoreDefinitionsIdentifierClass;
	CoreDefinitionsIdentifierClass.description = "A unique string that identifies a specific person or thing.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	CoreDefinitionsIdentifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier";
	CoreDefinitionsIdentifierClass.links = {};
	CoreDefinitionsIdentifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsIdentifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		}
		return errors;
	}
	CoreDefinitionsIdentifierClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsIdentifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsIdentifierClass, CoreDefinitionsIdentifierClass.Value, {
		get: function() { return CoreDefinitionsIdentifierClass.Value; },
		set: function(newValue) { CoreDefinitionsIdentifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Study */
	var BaseDefinitionsStudyClass = classes.BaseDefinitionsStudy = function BaseDefinitionsStudyClass(value) {
		if (!(this instanceof BaseDefinitionsStudyClass)) return new BaseDefinitionsStudyClass(value);
		if (typeof value.Title !== "undefined") {
			this.Title = value.Title;
		}
		if (this.Title && !Array.isArray(this.Title) && this.Title) {
			this.Title = new classes.CoreDefinitionsTitle(this.Title);
		}
		if (typeof value.Identifier !== "undefined") {
			this.Identifier = value.Identifier;
		}
		if (this.Identifier && !Array.isArray(this.Identifier) && this.Identifier) {
			this.Identifier = new classes.CoreDefinitionsIdentifier(this.Identifier);
		}
		
		BaseDefinitionsEntryClass.apply(this, arguments);
	};
	BaseDefinitionsStudyClass.prototype = Object.create(BaseDefinitionsEntryClass.prototype);
	BaseDefinitionsStudyClass.prototype.constructor = BaseDefinitionsStudyClass;
	BaseDefinitionsStudyClass.description = "A clinical trial or other formal study.";
	BaseDefinitionsStudyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Study";
	BaseDefinitionsStudyClass.links = {};
	BaseDefinitionsStudyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsStudyAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	BaseDefinitionsStudyClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStudyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsStudyClass, BaseDefinitionsStudyClass.Title, {
		get: function() { return BaseDefinitionsStudyClass.Title; },
		set: function(newValue) { BaseDefinitionsStudyClass.Title = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsStudyClass, BaseDefinitionsStudyClass.Identifier, {
		get: function() { return BaseDefinitionsStudyClass.Identifier; },
		set: function(newValue) { BaseDefinitionsStudyClass.Identifier = newValue; },
		enumerable: true,
		configurable: true
	});
	////end of Study
	return classes;
 }
module.exports = { makeHierarchy };
	
	