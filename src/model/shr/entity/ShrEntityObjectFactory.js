/* eslint-disable */
import { getNamespaceAndName, getNamespaceAndNameFromFHIR, uuid } from '../../json-helper';
import EntityOrRole from './EntityOrRole';
import Entity from './Entity';
import SpecimenStatus from './SpecimenStatus';
import Specimen from './Specimen';
import CollectionMethod from './CollectionMethod';
import SourceSpecimen from './SourceSpecimen';
import PartOf from './PartOf';
import Role from './Role';
import Patient from './Patient';
import ActiveFlag from './ActiveFlag';
import ExternalHealthRecord from './ExternalHealthRecord';
import AccessTime from './AccessTime';
import Person from './Person';
import Practitioner from './Practitioner';
import Affiliation from './Affiliation';
import NationalProviderIdentifier from './NationalProviderIdentifier';
import Qualification from './Qualification';
import RelatedPerson from './RelatedPerson';
import RelationshipToPersonOfRecord from './RelationshipToPersonOfRecord';
import Group from './Group';
import Actual from './Actual';
import GroupCharacteristic from './GroupCharacteristic';
import GroupCharacteristicCode from './GroupCharacteristicCode';
import GroupCharacteristicValue from './GroupCharacteristicValue';
import ExcludeFlag from './ExcludeFlag';
import MemberParticipation from './MemberParticipation';
import Member from './Member';
import InactiveFlag from './InactiveFlag';
import Facility from './Facility';
import FacilityName from './FacilityName';
import MobileFacility from './MobileFacility';
import ManagingOrganization from './ManagingOrganization';
import Substance from './Substance';
import Ingredient from './Ingredient';
import SubstanceOrCode from './SubstanceOrCode';
import IsActiveIngredient from './IsActiveIngredient';
import IngredientAmount from './IngredientAmount';
import Package from './Package';
import Medication from './Medication';
import DoseForm from './DoseForm';
import Brand from './Brand';
import IsBrand from './IsBrand';
import BrandName from './BrandName';
import OverTheCounter from './OverTheCounter';
import Manufacturer from './Manufacturer';
import LotNumber from './LotNumber';
import ExpirationDate from './ExpirationDate';
import PlaceOfBirth from './PlaceOfBirth';
import MultipleBirthInformation from './MultipleBirthInformation';
import IsMultipleBirth from './IsMultipleBirth';
import MultipleBirthOrder from './MultipleBirthOrder';
import BirthSex from './BirthSex';
import Race from './Race';
import RaceCode from './RaceCode';
import RaceDetail from './RaceDetail';
import Ethnicity from './Ethnicity';
import EthnicityCode from './EthnicityCode';
import EthnicityDetail from './EthnicityDetail';
import MothersMaidenName from './MothersMaidenName';
import FathersName from './FathersName';
import SocialSecurityNumber from './SocialSecurityNumber';
import DriversLicenseInformation from './DriversLicenseInformation';
import DriversLicenseNumber from './DriversLicenseNumber';
import StateOfIssue from './StateOfIssue';
import PassportInformation from './PassportInformation';
import PassportNumber from './PassportNumber';
import CountryOfIssue from './CountryOfIssue';
import MedicalInterpreter from './MedicalInterpreter';
import MedicalInterpreterNeeded from './MedicalInterpreterNeeded';
import MaritalStatus from './MaritalStatus';
import AnonymizedFlag from './AnonymizedFlag';
import FictionalPersonFlag from './FictionalPersonFlag';
import DateOfBirth from './DateOfBirth';
import AdministrativeGender from './AdministrativeGender';
import LanguageUsed from './LanguageUsed';
import SpokenLanguageProficiency from './SpokenLanguageProficiency';
import WrittenLanguageProficiency from './WrittenLanguageProficiency';
import LanguageQualifier from './LanguageQualifier';
import DeathInformation from './DeathInformation';
import IsDeceased from './IsDeceased';
import DateOfDeath from './DateOfDeath';
import AgeAtDeath from './AgeAtDeath';
import Organization from './Organization';
import OrganizationName from './OrganizationName';
import OrganizationIdentifier from './OrganizationIdentifier';
import Location from './Location';
import Device from './Device';
import DeviceUdi from './DeviceUdi';
import VendorModelNumber from './VendorModelNumber';
import ManufacturerName from './ManufacturerName';
import ManufactureDate from './ManufactureDate';
import Url from './Url';
import CollectionSource from './CollectionSource';
import CollectionTime from './CollectionTime';
import CollectionSite from './CollectionSite';
import AccessionIdentifier from './AccessionIdentifier';
import HandlingRisk from './HandlingRisk';
import SpecialHandling from './SpecialHandling';
import SpecimenTreatment from './SpecimenTreatment';
import SpecimenContainer from './SpecimenContainer';
import Capacity from './Capacity';
import SpecimenQuantity from './SpecimenQuantity';
import Additive from './Additive';
import SequenceNumber from './SequenceNumber';

/**
 * Generated object factory for the shr.entity namespace.
 */
export default class ShrEntityObjectFactory {
  /**
   * Create an instance of a class from its JSON representation.
   * @param {Object} json - The element data in JSON format (use `{}` and provide `type` for a blank instance)
   * @param {string} [type] - The (optional) type of the element (e.g., 'http://standardhealthrecord.org/spec/shr/demographics/PersonOfRecord').  This is only used if the type cannot be extracted from the JSON.
   * @returns {Object} An instance of the requested class populated with the provided data
   */
  static createInstance(json, type) {
    const { namespace, elementName } = getNamespaceAndName(json, type);
    if (namespace !== 'shr.entity') {
      throw new Error(`Unsupported type in ShrEntityObjectFactory: ${type}`);
    }
    switch (elementName) {
    case 'EntityOrRole': return EntityOrRole.fromJSON(json);
    case 'Entity': return Entity.fromJSON(json);
    case 'SpecimenStatus': return SpecimenStatus.fromJSON(json);
    case 'Specimen': return Specimen.fromJSON(json);
    case 'CollectionMethod': return CollectionMethod.fromJSON(json);
    case 'SourceSpecimen': return SourceSpecimen.fromJSON(json);
    case 'PartOf': return PartOf.fromJSON(json);
    case 'Role': return Role.fromJSON(json);
    case 'Patient': return Patient.fromJSON(json);
    case 'ActiveFlag': return ActiveFlag.fromJSON(json);
    case 'ExternalHealthRecord': return ExternalHealthRecord.fromJSON(json);
    case 'AccessTime': return AccessTime.fromJSON(json);
    case 'Person': return Person.fromJSON(json);
    case 'Practitioner': return Practitioner.fromJSON(json);
    case 'Affiliation': return Affiliation.fromJSON(json);
    case 'NationalProviderIdentifier': return NationalProviderIdentifier.fromJSON(json);
    case 'Qualification': return Qualification.fromJSON(json);
    case 'RelatedPerson': return RelatedPerson.fromJSON(json);
    case 'RelationshipToPersonOfRecord': return RelationshipToPersonOfRecord.fromJSON(json);
    case 'Group': return Group.fromJSON(json);
    case 'Actual': return Actual.fromJSON(json);
    case 'GroupCharacteristic': return GroupCharacteristic.fromJSON(json);
    case 'GroupCharacteristicCode': return GroupCharacteristicCode.fromJSON(json);
    case 'GroupCharacteristicValue': return GroupCharacteristicValue.fromJSON(json);
    case 'ExcludeFlag': return ExcludeFlag.fromJSON(json);
    case 'MemberParticipation': return MemberParticipation.fromJSON(json);
    case 'Member': return Member.fromJSON(json);
    case 'InactiveFlag': return InactiveFlag.fromJSON(json);
    case 'Facility': return Facility.fromJSON(json);
    case 'FacilityName': return FacilityName.fromJSON(json);
    case 'MobileFacility': return MobileFacility.fromJSON(json);
    case 'ManagingOrganization': return ManagingOrganization.fromJSON(json);
    case 'Substance': return Substance.fromJSON(json);
    case 'Ingredient': return Ingredient.fromJSON(json);
    case 'SubstanceOrCode': return SubstanceOrCode.fromJSON(json);
    case 'IsActiveIngredient': return IsActiveIngredient.fromJSON(json);
    case 'IngredientAmount': return IngredientAmount.fromJSON(json);
    case 'Package': return Package.fromJSON(json);
    case 'Medication': return Medication.fromJSON(json);
    case 'DoseForm': return DoseForm.fromJSON(json);
    case 'Brand': return Brand.fromJSON(json);
    case 'IsBrand': return IsBrand.fromJSON(json);
    case 'BrandName': return BrandName.fromJSON(json);
    case 'OverTheCounter': return OverTheCounter.fromJSON(json);
    case 'Manufacturer': return Manufacturer.fromJSON(json);
    case 'LotNumber': return LotNumber.fromJSON(json);
    case 'ExpirationDate': return ExpirationDate.fromJSON(json);
    case 'PlaceOfBirth': return PlaceOfBirth.fromJSON(json);
    case 'MultipleBirthInformation': return MultipleBirthInformation.fromJSON(json);
    case 'IsMultipleBirth': return IsMultipleBirth.fromJSON(json);
    case 'MultipleBirthOrder': return MultipleBirthOrder.fromJSON(json);
    case 'BirthSex': return BirthSex.fromJSON(json);
    case 'Race': return Race.fromJSON(json);
    case 'RaceCode': return RaceCode.fromJSON(json);
    case 'RaceDetail': return RaceDetail.fromJSON(json);
    case 'Ethnicity': return Ethnicity.fromJSON(json);
    case 'EthnicityCode': return EthnicityCode.fromJSON(json);
    case 'EthnicityDetail': return EthnicityDetail.fromJSON(json);
    case 'MothersMaidenName': return MothersMaidenName.fromJSON(json);
    case 'FathersName': return FathersName.fromJSON(json);
    case 'SocialSecurityNumber': return SocialSecurityNumber.fromJSON(json);
    case 'DriversLicenseInformation': return DriversLicenseInformation.fromJSON(json);
    case 'DriversLicenseNumber': return DriversLicenseNumber.fromJSON(json);
    case 'StateOfIssue': return StateOfIssue.fromJSON(json);
    case 'PassportInformation': return PassportInformation.fromJSON(json);
    case 'PassportNumber': return PassportNumber.fromJSON(json);
    case 'CountryOfIssue': return CountryOfIssue.fromJSON(json);
    case 'MedicalInterpreter': return MedicalInterpreter.fromJSON(json);
    case 'MedicalInterpreterNeeded': return MedicalInterpreterNeeded.fromJSON(json);
    case 'MaritalStatus': return MaritalStatus.fromJSON(json);
    case 'AnonymizedFlag': return AnonymizedFlag.fromJSON(json);
    case 'FictionalPersonFlag': return FictionalPersonFlag.fromJSON(json);
    case 'DateOfBirth': return DateOfBirth.fromJSON(json);
    case 'AdministrativeGender': return AdministrativeGender.fromJSON(json);
    case 'LanguageUsed': return LanguageUsed.fromJSON(json);
    case 'SpokenLanguageProficiency': return SpokenLanguageProficiency.fromJSON(json);
    case 'WrittenLanguageProficiency': return WrittenLanguageProficiency.fromJSON(json);
    case 'LanguageQualifier': return LanguageQualifier.fromJSON(json);
    case 'DeathInformation': return DeathInformation.fromJSON(json);
    case 'IsDeceased': return IsDeceased.fromJSON(json);
    case 'DateOfDeath': return DateOfDeath.fromJSON(json);
    case 'AgeAtDeath': return AgeAtDeath.fromJSON(json);
    case 'Organization': return Organization.fromJSON(json);
    case 'OrganizationName': return OrganizationName.fromJSON(json);
    case 'OrganizationIdentifier': return OrganizationIdentifier.fromJSON(json);
    case 'Location': return Location.fromJSON(json);
    case 'Device': return Device.fromJSON(json);
    case 'DeviceUdi': return DeviceUdi.fromJSON(json);
    case 'VendorModelNumber': return VendorModelNumber.fromJSON(json);
    case 'ManufacturerName': return ManufacturerName.fromJSON(json);
    case 'ManufactureDate': return ManufactureDate.fromJSON(json);
    case 'Url': return Url.fromJSON(json);
    case 'CollectionSource': return CollectionSource.fromJSON(json);
    case 'CollectionTime': return CollectionTime.fromJSON(json);
    case 'CollectionSite': return CollectionSite.fromJSON(json);
    case 'AccessionIdentifier': return AccessionIdentifier.fromJSON(json);
    case 'HandlingRisk': return HandlingRisk.fromJSON(json);
    case 'SpecialHandling': return SpecialHandling.fromJSON(json);
    case 'SpecimenTreatment': return SpecimenTreatment.fromJSON(json);
    case 'SpecimenContainer': return SpecimenContainer.fromJSON(json);
    case 'Capacity': return Capacity.fromJSON(json);
    case 'SpecimenQuantity': return SpecimenQuantity.fromJSON(json);
    case 'Additive': return Additive.fromJSON(json);
    case 'SequenceNumber': return SequenceNumber.fromJSON(json);
    default: throw new Error(`Unsupported type in ShrEntityObjectFactory: ${type}`);
    }
  }

  /**
   * Convert an instance of a class from its FHIR representation.
   * @param {Object} fhir - The element data in JSON format (use `{}` and provide `type` for a blank instance)
   * @param {string} [type] - The (optional) type of the element (e.g., 'http://standardhealthrecord.org/spec/shr/demographics/PersonOfRecord').  This is only used if the type cannot be extracted from the JSON.
   * @returns {Object} An instance of the requested class populated with the provided data
   */
  static createInstanceFromFHIR(fhir, type, shrId=uuid(), allEntries=[], mappedResources={}, referencesOut=[], asExtension=false) {
    const { namespace, elementName } = getNamespaceAndNameFromFHIR(fhir, type);
    if (namespace !== 'shr.entity') {
      throw new Error(`Unsupported type in ShrEntityObjectFactory: ${type}`);
    }
    switch (elementName) {
    case 'EntityOrRole': return EntityOrRole.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Entity': return Entity.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpecimenStatus': return SpecimenStatus.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Specimen': return Specimen.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'CollectionMethod': return CollectionMethod.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SourceSpecimen': return SourceSpecimen.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'PartOf': return PartOf.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Role': return Role.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Patient': return Patient.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ActiveFlag': return ActiveFlag.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ExternalHealthRecord': return ExternalHealthRecord.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'AccessTime': return AccessTime.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Person': return Person.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Practitioner': return Practitioner.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Affiliation': return Affiliation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'NationalProviderIdentifier': return NationalProviderIdentifier.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Qualification': return Qualification.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'RelatedPerson': return RelatedPerson.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'RelationshipToPersonOfRecord': return RelationshipToPersonOfRecord.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Group': return Group.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Actual': return Actual.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'GroupCharacteristic': return GroupCharacteristic.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'GroupCharacteristicCode': return GroupCharacteristicCode.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'GroupCharacteristicValue': return GroupCharacteristicValue.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ExcludeFlag': return ExcludeFlag.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MemberParticipation': return MemberParticipation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Member': return Member.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'InactiveFlag': return InactiveFlag.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Facility': return Facility.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'FacilityName': return FacilityName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MobileFacility': return MobileFacility.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ManagingOrganization': return ManagingOrganization.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Substance': return Substance.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Ingredient': return Ingredient.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SubstanceOrCode': return SubstanceOrCode.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'IsActiveIngredient': return IsActiveIngredient.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'IngredientAmount': return IngredientAmount.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Package': return Package.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Medication': return Medication.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DoseForm': return DoseForm.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Brand': return Brand.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'IsBrand': return IsBrand.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'BrandName': return BrandName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'OverTheCounter': return OverTheCounter.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Manufacturer': return Manufacturer.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'LotNumber': return LotNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ExpirationDate': return ExpirationDate.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'PlaceOfBirth': return PlaceOfBirth.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MultipleBirthInformation': return MultipleBirthInformation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'IsMultipleBirth': return IsMultipleBirth.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MultipleBirthOrder': return MultipleBirthOrder.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'BirthSex': return BirthSex.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Race': return Race.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'RaceCode': return RaceCode.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'RaceDetail': return RaceDetail.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Ethnicity': return Ethnicity.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'EthnicityCode': return EthnicityCode.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'EthnicityDetail': return EthnicityDetail.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MothersMaidenName': return MothersMaidenName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'FathersName': return FathersName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SocialSecurityNumber': return SocialSecurityNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DriversLicenseInformation': return DriversLicenseInformation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DriversLicenseNumber': return DriversLicenseNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'StateOfIssue': return StateOfIssue.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'PassportInformation': return PassportInformation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'PassportNumber': return PassportNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'CountryOfIssue': return CountryOfIssue.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MedicalInterpreter': return MedicalInterpreter.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MedicalInterpreterNeeded': return MedicalInterpreterNeeded.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'MaritalStatus': return MaritalStatus.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'AnonymizedFlag': return AnonymizedFlag.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'FictionalPersonFlag': return FictionalPersonFlag.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DateOfBirth': return DateOfBirth.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'AdministrativeGender': return AdministrativeGender.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'LanguageUsed': return LanguageUsed.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpokenLanguageProficiency': return SpokenLanguageProficiency.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'WrittenLanguageProficiency': return WrittenLanguageProficiency.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'LanguageQualifier': return LanguageQualifier.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DeathInformation': return DeathInformation.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'IsDeceased': return IsDeceased.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DateOfDeath': return DateOfDeath.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'AgeAtDeath': return AgeAtDeath.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Organization': return Organization.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'OrganizationName': return OrganizationName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'OrganizationIdentifier': return OrganizationIdentifier.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Location': return Location.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Device': return Device.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'DeviceUdi': return DeviceUdi.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'VendorModelNumber': return VendorModelNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ManufacturerName': return ManufacturerName.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'ManufactureDate': return ManufactureDate.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Url': return Url.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'CollectionSource': return CollectionSource.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'CollectionTime': return CollectionTime.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'CollectionSite': return CollectionSite.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'AccessionIdentifier': return AccessionIdentifier.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'HandlingRisk': return HandlingRisk.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpecialHandling': return SpecialHandling.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpecimenTreatment': return SpecimenTreatment.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpecimenContainer': return SpecimenContainer.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Capacity': return Capacity.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SpecimenQuantity': return SpecimenQuantity.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'Additive': return Additive.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    case 'SequenceNumber': return SequenceNumber.fromFHIR(fhir, shrId, allEntries, mappedResources, referencesOut, asExtension);
    default: throw new Error(`Unsupported type in ShrEntityObjectFactory: ${type}`);
    }
  }
}
