import { getNamespaceAndName, getNamespaceAndNameFromFHIR } from '../../json-helper';
import Version from './Version';
import Status from './Status';
import PriorityRank from './PriorityRank';
import Type from './Type';
import Category from './Category';
import Quantity from './Quantity';
import DecimalValue from './DecimalValue';
import Comparator from './Comparator';
import Units from './Units';
import SimpleQuantity from './SimpleQuantity';
import IntegerQuantity from './IntegerQuantity';
import Age from './Age';
import Distance from './Distance';
import Duration from './Duration';
import Money from './Money';
import Coding from './Coding';
import Code from './Code';
import CodeSystem from './CodeSystem';
import CodeSystemVersion from './CodeSystemVersion';
import CodeableConcept from './CodeableConcept';
import Range from './Range';
import LowerBound from './LowerBound';
import UpperBound from './UpperBound';
import Ratio from './Ratio';
import Numerator from './Numerator';
import Denominator from './Denominator';
import Purpose from './Purpose';
import ContactPoint from './ContactPoint';
import TelecomNumberOrAddress from './TelecomNumberOrAddress';
import ContactDetail from './ContactDetail';
import TimePeriod from './TimePeriod';
import TimePeriodStart from './TimePeriodStart';
import TimePeriodEnd from './TimePeriodEnd';
import Timing from './Timing';
import TimingCode from './TimingCode';
import EventDuration from './EventDuration';
import RecurrencePattern from './RecurrencePattern';
import RecurrenceInterval from './RecurrenceInterval';
import DayOfWeek from './DayOfWeek';
import TimeOfDay from './TimeOfDay';
import DailyLifeEvent from './DailyLifeEvent';
import LifeEventOffset from './LifeEventOffset';
import CountPerInterval from './CountPerInterval';
import MinCount from './MinCount';
import MaxCount from './MaxCount';
import RecurrenceRange from './RecurrenceRange';
import NumberOfRepeats from './NumberOfRepeats';
import SampledData from './SampledData';
import Text from './Text';
import Origin from './Origin';
import MillisecondsBetweenSamples from './MillisecondsBetweenSamples';
import CorrectionFactor from './CorrectionFactor';
import LowerLimit from './LowerLimit';
import UpperLimit from './UpperLimit';
import Dimensions from './Dimensions';
import Address from './Address';
import AddressLine from './AddressLine';
import GeopoliticalLocation from './GeopoliticalLocation';
import City from './City';
import District from './District';
import State from './State';
import PostalCode from './PostalCode';
import Country from './Country';
import Count from './Count';
import CommentOrDescription from './CommentOrDescription';
import DurationRange from './DurationRange';
import Statistic from './Statistic';
import StatisticType from './StatisticType';
import Percentage from './Percentage';
import QualitativeLikelihood from './QualitativeLikelihood';
import Depth from './Depth';
import Area from './Area';
import ClockDirection from './ClockDirection';
import QualitativeDateTime from './QualitativeDateTime';
import AgeGroup from './AgeGroup';
import GestationalAge from './GestationalAge';
import GestationalTimePeriod from './GestationalTimePeriod';
import GestationalTemporalContext from './GestationalTemporalContext';
import SemiquantDuration from './SemiquantDuration';
import Frequency from './Frequency';
import SemiquantFrequency from './SemiquantFrequency';
import QualitativeFrequency from './QualitativeFrequency';
import EffectiveTimePeriod from './EffectiveTimePeriod';
import ReceivedTime from './ReceivedTime';
import OccurrenceTimeOrPeriod from './OccurrenceTimeOrPeriod';
import NonOccurrenceTimeOrPeriod from './NonOccurrenceTimeOrPeriod';
import OccurrenceTime from './OccurrenceTime';
import OccurrencePeriod from './OccurrencePeriod';
import OccurrenceDuration from './OccurrenceDuration';
import Geoposition from './Geoposition';
import Latitude from './Latitude';
import Longitude from './Longitude';
import Altitude from './Altitude';
import Setting from './Setting';
import UnitedStatesAddress from './UnitedStatesAddress';
import UnitedStatesState from './UnitedStatesState';
import Name from './Name';
import PersonName from './PersonName';
import HumanName from './HumanName';
import BodyPosition from './BodyPosition';
import DisplayText from './DisplayText';
import Title from './Title';
import EmbeddedContent from './EmbeddedContent';
import ParsableContent from './ParsableContent';
import Formalism from './Formalism';
import Media from './Media';
import BinaryData from './BinaryData';
import ContentType from './ContentType';
import Language from './Language';
import ResourceLocation from './ResourceLocation';
import ResourceSize from './ResourceSize';
import Hash from './Hash';
import CreationTime from './CreationTime';
import PhotographicImage from './PhotographicImage';
import Annotation from './Annotation';
import Author from './Author';
import SignatureType from './SignatureType';
import Signature from './Signature';
import Signatory from './Signatory';
import OnBehalfOf from './OnBehalfOf';
import RouteIntoBody from './RouteIntoBody';
import AnatomicalLocation from './AnatomicalLocation';
import AnatomicalLocationOrLandmarkCode from './AnatomicalLocationOrLandmarkCode';
import Laterality from './Laterality';
import AnatomicalDirection from './AnatomicalDirection';
import DistanceFromLandmark from './DistanceFromLandmark';
import Identifier from './Identifier';
import Issuer from './Issuer';
import NameAsText from './NameAsText';
import PreferredFlag from './PreferredFlag';
import Prefix from './Prefix';
import GivenName from './GivenName';
import MiddleName from './MiddleName';
import FamilyName from './FamilyName';
import Suffix from './Suffix';

/**
 * Generated object factory for the shr.core namespace.
 */
export default class ShrCoreObjectFactory {
  /**
   * Create an instance of a class from its JSON representation.
   * @param {Object} json - The element data in JSON format (use `{}` and provide `type` for a blank instance)
   * @param {string} [type] - The (optional) type of the element (e.g., 'http://standardhealthrecord.org/spec/shr/demographics/PersonOfRecord').  This is only used if the type cannot be extracted from the JSON.
   * @returns {Object} An instance of the requested class populated with the provided data
   */
  static createInstance(json, type) {
    const { namespace, elementName } = getNamespaceAndName(json, type);
    if (namespace !== 'shr.core') {
      throw new Error(`Unsupported type in ShrCoreObjectFactory: ${type}`);
    }
    switch (elementName) {
      case 'Version': return Version.fromJSON(json);
      case 'Status': return Status.fromJSON(json);
      case 'PriorityRank': return PriorityRank.fromJSON(json);
      case 'Type': return Type.fromJSON(json);
      case 'Category': return Category.fromJSON(json);
      case 'Quantity': return Quantity.fromJSON(json);
      case 'DecimalValue': return DecimalValue.fromJSON(json);
      case 'Comparator': return Comparator.fromJSON(json);
      case 'Units': return Units.fromJSON(json);
      case 'SimpleQuantity': return SimpleQuantity.fromJSON(json);
      case 'IntegerQuantity': return IntegerQuantity.fromJSON(json);
      case 'Age': return Age.fromJSON(json);
      case 'Distance': return Distance.fromJSON(json);
      case 'Duration': return Duration.fromJSON(json);
      case 'Money': return Money.fromJSON(json);
      case 'Coding': return Coding.fromJSON(json);
      case 'Code': return Code.fromJSON(json);
      case 'CodeSystem': return CodeSystem.fromJSON(json);
      case 'CodeSystemVersion': return CodeSystemVersion.fromJSON(json);
      case 'CodeableConcept': return CodeableConcept.fromJSON(json);
      case 'Range': return Range.fromJSON(json);
      case 'LowerBound': return LowerBound.fromJSON(json);
      case 'UpperBound': return UpperBound.fromJSON(json);
      case 'Ratio': return Ratio.fromJSON(json);
      case 'Numerator': return Numerator.fromJSON(json);
      case 'Denominator': return Denominator.fromJSON(json);
      case 'Purpose': return Purpose.fromJSON(json);
      case 'ContactPoint': return ContactPoint.fromJSON(json);
      case 'TelecomNumberOrAddress': return TelecomNumberOrAddress.fromJSON(json);
      case 'ContactDetail': return ContactDetail.fromJSON(json);
      case 'TimePeriod': return TimePeriod.fromJSON(json);
      case 'TimePeriodStart': return TimePeriodStart.fromJSON(json);
      case 'TimePeriodEnd': return TimePeriodEnd.fromJSON(json);
      case 'Timing': return Timing.fromJSON(json);
      case 'TimingCode': return TimingCode.fromJSON(json);
      case 'EventDuration': return EventDuration.fromJSON(json);
      case 'RecurrencePattern': return RecurrencePattern.fromJSON(json);
      case 'RecurrenceInterval': return RecurrenceInterval.fromJSON(json);
      case 'DayOfWeek': return DayOfWeek.fromJSON(json);
      case 'TimeOfDay': return TimeOfDay.fromJSON(json);
      case 'DailyLifeEvent': return DailyLifeEvent.fromJSON(json);
      case 'LifeEventOffset': return LifeEventOffset.fromJSON(json);
      case 'CountPerInterval': return CountPerInterval.fromJSON(json);
      case 'MinCount': return MinCount.fromJSON(json);
      case 'MaxCount': return MaxCount.fromJSON(json);
      case 'RecurrenceRange': return RecurrenceRange.fromJSON(json);
      case 'NumberOfRepeats': return NumberOfRepeats.fromJSON(json);
      case 'SampledData': return SampledData.fromJSON(json);
      case 'Text': return Text.fromJSON(json);
      case 'Origin': return Origin.fromJSON(json);
      case 'MillisecondsBetweenSamples': return MillisecondsBetweenSamples.fromJSON(json);
      case 'CorrectionFactor': return CorrectionFactor.fromJSON(json);
      case 'LowerLimit': return LowerLimit.fromJSON(json);
      case 'UpperLimit': return UpperLimit.fromJSON(json);
      case 'Dimensions': return Dimensions.fromJSON(json);
      case 'Address': return Address.fromJSON(json);
      case 'AddressLine': return AddressLine.fromJSON(json);
      case 'GeopoliticalLocation': return GeopoliticalLocation.fromJSON(json);
      case 'City': return City.fromJSON(json);
      case 'District': return District.fromJSON(json);
      case 'State': return State.fromJSON(json);
      case 'PostalCode': return PostalCode.fromJSON(json);
      case 'Country': return Country.fromJSON(json);
      case 'Count': return Count.fromJSON(json);
      case 'CommentOrDescription': return CommentOrDescription.fromJSON(json);
      case 'DurationRange': return DurationRange.fromJSON(json);
      case 'Statistic': return Statistic.fromJSON(json);
      case 'StatisticType': return StatisticType.fromJSON(json);
      case 'Percentage': return Percentage.fromJSON(json);
      case 'QualitativeLikelihood': return QualitativeLikelihood.fromJSON(json);
      case 'Depth': return Depth.fromJSON(json);
      case 'Area': return Area.fromJSON(json);
      case 'ClockDirection': return ClockDirection.fromJSON(json);
      case 'QualitativeDateTime': return QualitativeDateTime.fromJSON(json);
      case 'AgeGroup': return AgeGroup.fromJSON(json);
      case 'GestationalAge': return GestationalAge.fromJSON(json);
      case 'GestationalTimePeriod': return GestationalTimePeriod.fromJSON(json);
      case 'GestationalTemporalContext': return GestationalTemporalContext.fromJSON(json);
      case 'SemiquantDuration': return SemiquantDuration.fromJSON(json);
      case 'Frequency': return Frequency.fromJSON(json);
      case 'SemiquantFrequency': return SemiquantFrequency.fromJSON(json);
      case 'QualitativeFrequency': return QualitativeFrequency.fromJSON(json);
      case 'EffectiveTimePeriod': return EffectiveTimePeriod.fromJSON(json);
      case 'ReceivedTime': return ReceivedTime.fromJSON(json);
      case 'OccurrenceTimeOrPeriod': return OccurrenceTimeOrPeriod.fromJSON(json);
      case 'NonOccurrenceTimeOrPeriod': return NonOccurrenceTimeOrPeriod.fromJSON(json);
      case 'OccurrenceTime': return OccurrenceTime.fromJSON(json);
      case 'OccurrencePeriod': return OccurrencePeriod.fromJSON(json);
      case 'OccurrenceDuration': return OccurrenceDuration.fromJSON(json);
      case 'Geoposition': return Geoposition.fromJSON(json);
      case 'Latitude': return Latitude.fromJSON(json);
      case 'Longitude': return Longitude.fromJSON(json);
      case 'Altitude': return Altitude.fromJSON(json);
      case 'Setting': return Setting.fromJSON(json);
      case 'UnitedStatesAddress': return UnitedStatesAddress.fromJSON(json);
      case 'UnitedStatesState': return UnitedStatesState.fromJSON(json);
      case 'Name': return Name.fromJSON(json);
      case 'PersonName': return PersonName.fromJSON(json);
      case 'HumanName': return HumanName.fromJSON(json);
      case 'BodyPosition': return BodyPosition.fromJSON(json);
      case 'DisplayText': return DisplayText.fromJSON(json);
      case 'Title': return Title.fromJSON(json);
      case 'EmbeddedContent': return EmbeddedContent.fromJSON(json);
      case 'ParsableContent': return ParsableContent.fromJSON(json);
      case 'Formalism': return Formalism.fromJSON(json);
      case 'Media': return Media.fromJSON(json);
      case 'BinaryData': return BinaryData.fromJSON(json);
      case 'ContentType': return ContentType.fromJSON(json);
      case 'Language': return Language.fromJSON(json);
      case 'ResourceLocation': return ResourceLocation.fromJSON(json);
      case 'ResourceSize': return ResourceSize.fromJSON(json);
      case 'Hash': return Hash.fromJSON(json);
      case 'CreationTime': return CreationTime.fromJSON(json);
      case 'PhotographicImage': return PhotographicImage.fromJSON(json);
      case 'Annotation': return Annotation.fromJSON(json);
      case 'Author': return Author.fromJSON(json);
      case 'SignatureType': return SignatureType.fromJSON(json);
      case 'Signature': return Signature.fromJSON(json);
      case 'Signatory': return Signatory.fromJSON(json);
      case 'OnBehalfOf': return OnBehalfOf.fromJSON(json);
      case 'RouteIntoBody': return RouteIntoBody.fromJSON(json);
      case 'AnatomicalLocation': return AnatomicalLocation.fromJSON(json);
      case 'AnatomicalLocationOrLandmarkCode': return AnatomicalLocationOrLandmarkCode.fromJSON(json);
      case 'Laterality': return Laterality.fromJSON(json);
      case 'AnatomicalDirection': return AnatomicalDirection.fromJSON(json);
      case 'DistanceFromLandmark': return DistanceFromLandmark.fromJSON(json);
      case 'Identifier': return Identifier.fromJSON(json);
      case 'Issuer': return Issuer.fromJSON(json);
      case 'NameAsText': return NameAsText.fromJSON(json);
      case 'PreferredFlag': return PreferredFlag.fromJSON(json);
      case 'Prefix': return Prefix.fromJSON(json);
      case 'GivenName': return GivenName.fromJSON(json);
      case 'MiddleName': return MiddleName.fromJSON(json);
      case 'FamilyName': return FamilyName.fromJSON(json);
      case 'Suffix': return Suffix.fromJSON(json);
      default: throw new Error(`Unsupported type in ShrCoreObjectFactory: ${type}`);
    }
  }

  /**
   * Convert an instance of a class from its FHIR representation.
   * @param {Object} fhir - The element data in JSON format (use `{}` and provide `type` for a blank instance)
   * @param {string} [type] - The (optional) type of the element (e.g., 'http://standardhealthrecord.org/spec/shr/demographics/PersonOfRecord').  This is only used if the type cannot be extracted from the JSON.
   * @returns {Object} An instance of the requested class populated with the provided data
   */
  static createInstanceFromFHIR(fhir, type, asExtension = false) {
    const { namespace, elementName } = getNamespaceAndNameFromFHIR(fhir, type);
    if (namespace !== 'shr.core') {
      throw new Error(`Unsupported type in ShrCoreObjectFactory: ${type}`);
    }
    switch (elementName) {
      case 'Version': return Version.fromFHIR(fhir, asExtension);
      case 'Status': return Status.fromFHIR(fhir, asExtension);
      case 'PriorityRank': return PriorityRank.fromFHIR(fhir, asExtension);
      case 'Type': return Type.fromFHIR(fhir, asExtension);
      case 'Category': return Category.fromFHIR(fhir, asExtension);
      case 'Quantity': return Quantity.fromFHIR(fhir, asExtension);
      case 'DecimalValue': return DecimalValue.fromFHIR(fhir, asExtension);
      case 'Comparator': return Comparator.fromFHIR(fhir, asExtension);
      case 'Units': return Units.fromFHIR(fhir, asExtension);
      case 'SimpleQuantity': return SimpleQuantity.fromFHIR(fhir, asExtension);
      case 'IntegerQuantity': return IntegerQuantity.fromFHIR(fhir, asExtension);
      case 'Age': return Age.fromFHIR(fhir, asExtension);
      case 'Distance': return Distance.fromFHIR(fhir, asExtension);
      case 'Duration': return Duration.fromFHIR(fhir, asExtension);
      case 'Money': return Money.fromFHIR(fhir, asExtension);
      case 'Coding': return Coding.fromFHIR(fhir, asExtension);
      case 'Code': return Code.fromFHIR(fhir, asExtension);
      case 'CodeSystem': return CodeSystem.fromFHIR(fhir, asExtension);
      case 'CodeSystemVersion': return CodeSystemVersion.fromFHIR(fhir, asExtension);
      case 'CodeableConcept': return CodeableConcept.fromFHIR(fhir, asExtension);
      case 'Range': return Range.fromFHIR(fhir, asExtension);
      case 'LowerBound': return LowerBound.fromFHIR(fhir, asExtension);
      case 'UpperBound': return UpperBound.fromFHIR(fhir, asExtension);
      case 'Ratio': return Ratio.fromFHIR(fhir, asExtension);
      case 'Numerator': return Numerator.fromFHIR(fhir, asExtension);
      case 'Denominator': return Denominator.fromFHIR(fhir, asExtension);
      case 'Purpose': return Purpose.fromFHIR(fhir, asExtension);
      case 'ContactPoint': return ContactPoint.fromFHIR(fhir, asExtension);
      case 'TelecomNumberOrAddress': return TelecomNumberOrAddress.fromFHIR(fhir, asExtension);
      case 'ContactDetail': return ContactDetail.fromFHIR(fhir, asExtension);
      case 'TimePeriod': return TimePeriod.fromFHIR(fhir, asExtension);
      case 'TimePeriodStart': return TimePeriodStart.fromFHIR(fhir, asExtension);
      case 'TimePeriodEnd': return TimePeriodEnd.fromFHIR(fhir, asExtension);
      case 'Timing': return Timing.fromFHIR(fhir, asExtension);
      case 'TimingCode': return TimingCode.fromFHIR(fhir, asExtension);
      case 'EventDuration': return EventDuration.fromFHIR(fhir, asExtension);
      case 'RecurrencePattern': return RecurrencePattern.fromFHIR(fhir, asExtension);
      case 'RecurrenceInterval': return RecurrenceInterval.fromFHIR(fhir, asExtension);
      case 'DayOfWeek': return DayOfWeek.fromFHIR(fhir, asExtension);
      case 'TimeOfDay': return TimeOfDay.fromFHIR(fhir, asExtension);
      case 'DailyLifeEvent': return DailyLifeEvent.fromFHIR(fhir, asExtension);
      case 'LifeEventOffset': return LifeEventOffset.fromFHIR(fhir, asExtension);
      case 'CountPerInterval': return CountPerInterval.fromFHIR(fhir, asExtension);
      case 'MinCount': return MinCount.fromFHIR(fhir, asExtension);
      case 'MaxCount': return MaxCount.fromFHIR(fhir, asExtension);
      case 'RecurrenceRange': return RecurrenceRange.fromFHIR(fhir, asExtension);
      case 'NumberOfRepeats': return NumberOfRepeats.fromFHIR(fhir, asExtension);
      case 'SampledData': return SampledData.fromFHIR(fhir, asExtension);
      case 'Text': return Text.fromFHIR(fhir, asExtension);
      case 'Origin': return Origin.fromFHIR(fhir, asExtension);
      case 'MillisecondsBetweenSamples': return MillisecondsBetweenSamples.fromFHIR(fhir, asExtension);
      case 'CorrectionFactor': return CorrectionFactor.fromFHIR(fhir, asExtension);
      case 'LowerLimit': return LowerLimit.fromFHIR(fhir, asExtension);
      case 'UpperLimit': return UpperLimit.fromFHIR(fhir, asExtension);
      case 'Dimensions': return Dimensions.fromFHIR(fhir, asExtension);
      case 'Address': return Address.fromFHIR(fhir, asExtension);
      case 'AddressLine': return AddressLine.fromFHIR(fhir, asExtension);
      case 'GeopoliticalLocation': return GeopoliticalLocation.fromFHIR(fhir, asExtension);
      case 'City': return City.fromFHIR(fhir, asExtension);
      case 'District': return District.fromFHIR(fhir, asExtension);
      case 'State': return State.fromFHIR(fhir, asExtension);
      case 'PostalCode': return PostalCode.fromFHIR(fhir, asExtension);
      case 'Country': return Country.fromFHIR(fhir, asExtension);
      case 'Count': return Count.fromFHIR(fhir, asExtension);
      case 'CommentOrDescription': return CommentOrDescription.fromFHIR(fhir, asExtension);
      case 'DurationRange': return DurationRange.fromFHIR(fhir, asExtension);
      case 'Statistic': return Statistic.fromFHIR(fhir, asExtension);
      case 'StatisticType': return StatisticType.fromFHIR(fhir, asExtension);
      case 'Percentage': return Percentage.fromFHIR(fhir, asExtension);
      case 'QualitativeLikelihood': return QualitativeLikelihood.fromFHIR(fhir, asExtension);
      case 'Depth': return Depth.fromFHIR(fhir, asExtension);
      case 'Area': return Area.fromFHIR(fhir, asExtension);
      case 'ClockDirection': return ClockDirection.fromFHIR(fhir, asExtension);
      case 'QualitativeDateTime': return QualitativeDateTime.fromFHIR(fhir, asExtension);
      case 'AgeGroup': return AgeGroup.fromFHIR(fhir, asExtension);
      case 'GestationalAge': return GestationalAge.fromFHIR(fhir, asExtension);
      case 'GestationalTimePeriod': return GestationalTimePeriod.fromFHIR(fhir, asExtension);
      case 'GestationalTemporalContext': return GestationalTemporalContext.fromFHIR(fhir, asExtension);
      case 'SemiquantDuration': return SemiquantDuration.fromFHIR(fhir, asExtension);
      case 'Frequency': return Frequency.fromFHIR(fhir, asExtension);
      case 'SemiquantFrequency': return SemiquantFrequency.fromFHIR(fhir, asExtension);
      case 'QualitativeFrequency': return QualitativeFrequency.fromFHIR(fhir, asExtension);
      case 'EffectiveTimePeriod': return EffectiveTimePeriod.fromFHIR(fhir, asExtension);
      case 'ReceivedTime': return ReceivedTime.fromFHIR(fhir, asExtension);
      case 'OccurrenceTimeOrPeriod': return OccurrenceTimeOrPeriod.fromFHIR(fhir, asExtension);
      case 'NonOccurrenceTimeOrPeriod': return NonOccurrenceTimeOrPeriod.fromFHIR(fhir, asExtension);
      case 'OccurrenceTime': return OccurrenceTime.fromFHIR(fhir, asExtension);
      case 'OccurrencePeriod': return OccurrencePeriod.fromFHIR(fhir, asExtension);
      case 'OccurrenceDuration': return OccurrenceDuration.fromFHIR(fhir, asExtension);
      case 'Geoposition': return Geoposition.fromFHIR(fhir, asExtension);
      case 'Latitude': return Latitude.fromFHIR(fhir, asExtension);
      case 'Longitude': return Longitude.fromFHIR(fhir, asExtension);
      case 'Altitude': return Altitude.fromFHIR(fhir, asExtension);
      case 'Setting': return Setting.fromFHIR(fhir, asExtension);
      case 'UnitedStatesAddress': return UnitedStatesAddress.fromFHIR(fhir, asExtension);
      case 'UnitedStatesState': return UnitedStatesState.fromFHIR(fhir, asExtension);
      case 'Name': return Name.fromFHIR(fhir, asExtension);
      case 'PersonName': return PersonName.fromFHIR(fhir, asExtension);
      case 'HumanName': return HumanName.fromFHIR(fhir, asExtension);
      case 'BodyPosition': return BodyPosition.fromFHIR(fhir, asExtension);
      case 'DisplayText': return DisplayText.fromFHIR(fhir, asExtension);
      case 'Title': return Title.fromFHIR(fhir, asExtension);
      case 'EmbeddedContent': return EmbeddedContent.fromFHIR(fhir, asExtension);
      case 'ParsableContent': return ParsableContent.fromFHIR(fhir, asExtension);
      case 'Formalism': return Formalism.fromFHIR(fhir, asExtension);
      case 'Media': return Media.fromFHIR(fhir, asExtension);
      case 'BinaryData': return BinaryData.fromFHIR(fhir, asExtension);
      case 'ContentType': return ContentType.fromFHIR(fhir, asExtension);
      case 'Language': return Language.fromFHIR(fhir, asExtension);
      case 'ResourceLocation': return ResourceLocation.fromFHIR(fhir, asExtension);
      case 'ResourceSize': return ResourceSize.fromFHIR(fhir, asExtension);
      case 'Hash': return Hash.fromFHIR(fhir, asExtension);
      case 'CreationTime': return CreationTime.fromFHIR(fhir, asExtension);
      case 'PhotographicImage': return PhotographicImage.fromFHIR(fhir, asExtension);
      case 'Annotation': return Annotation.fromFHIR(fhir, asExtension);
      case 'Author': return Author.fromFHIR(fhir, asExtension);
      case 'SignatureType': return SignatureType.fromFHIR(fhir, asExtension);
      case 'Signature': return Signature.fromFHIR(fhir, asExtension);
      case 'Signatory': return Signatory.fromFHIR(fhir, asExtension);
      case 'OnBehalfOf': return OnBehalfOf.fromFHIR(fhir, asExtension);
      case 'RouteIntoBody': return RouteIntoBody.fromFHIR(fhir, asExtension);
      case 'AnatomicalLocation': return AnatomicalLocation.fromFHIR(fhir, asExtension);
      case 'AnatomicalLocationOrLandmarkCode': return AnatomicalLocationOrLandmarkCode.fromFHIR(fhir, asExtension);
      case 'Laterality': return Laterality.fromFHIR(fhir, asExtension);
      case 'AnatomicalDirection': return AnatomicalDirection.fromFHIR(fhir, asExtension);
      case 'DistanceFromLandmark': return DistanceFromLandmark.fromFHIR(fhir, asExtension);
      case 'Identifier': return Identifier.fromFHIR(fhir, asExtension);
      case 'Issuer': return Issuer.fromFHIR(fhir, asExtension);
      case 'NameAsText': return NameAsText.fromFHIR(fhir, asExtension);
      case 'PreferredFlag': return PreferredFlag.fromFHIR(fhir, asExtension);
      case 'Prefix': return Prefix.fromFHIR(fhir, asExtension);
      case 'GivenName': return GivenName.fromFHIR(fhir, asExtension);
      case 'MiddleName': return MiddleName.fromFHIR(fhir, asExtension);
      case 'FamilyName': return FamilyName.fromFHIR(fhir, asExtension);
      case 'Suffix': return Suffix.fromFHIR(fhir, asExtension);
      default: throw new Error(`Unsupported type in ShrCoreObjectFactory: ${type}`);
    }
  }
}
