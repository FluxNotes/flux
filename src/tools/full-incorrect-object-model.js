// WARNING: This is autogenerated code, any changes to this file will be lost.
 var makeHierarchy = function (superclass, classes, request) {
	function pointerEscape(key) {
		return key.replace(/~/g, "~0").replace(/\//g, "~1");
	}
	function unicodeLength(string) {
		return string.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "_").length;
	}
	if (superclass && typeof superclass === "object") {
		request = classes;
		classes = superclass;
		superclass = null;
	}
	superclass = superclass || function GeneratedClass() {};
	if (typeof classes === "function") {
		request = classes;
		classes = null;
	}
	request = request || function ErrorFunc() {throw new Error("No web-request function provided");};
	classes = classes || {};
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology */
	var OncologyClass = classes.Oncology = function OncologyClass(value) {
		if (!(this instanceof OncologyClass)) return new OncologyClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyClass.prototype = Object.create(superclass.prototype);
	OncologyClass.prototype.constructor = OncologyClass;
	OncologyClass.title = "TODO: Figure out what the title should be.";
	OncologyClass.description = "SHR implementation of ASCO requirements.";
	OncologyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology";
	OncologyClass.links = {};
	OncologyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsBreastCancer.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsBreastCancerGeneticAnalysis.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsBreastCancerReceptorStatus.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsCancerGrowthPotential.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[3] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsCancerLymphaticInvolvement.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[4] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsEstrogenReceptorStatus.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[5] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsHistologicGrade.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[6] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2Status.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[7] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsNeoplasmObservation.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[8] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsProgesteroneReceptorStatus.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[9] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsProgression.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[10] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsReceptorStatusObservation.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[11] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsTNMStage.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[12] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsToxicReactionToTreatment.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[13] = errors;
		errors = [];
		errors = errors.concat(classes.OncologyDefinitionsTumorSize.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[14] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology"});
		}
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology"});
		}
		return errors;
	}
	OncologyClass.validate = function (value) {
		var missing = {};
		var errors = OncologyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer */
	var OncologyDefinitionsBreastCancerClass = classes.OncologyDefinitionsBreastCancer = function OncologyDefinitionsBreastCancerClass(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerClass)) return new OncologyDefinitionsBreastCancerClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.Stage !== "undefined") {
			this.Stage = value.Stage;
		}
		if (this.Stage && !Array.isArray(this.Stage) && this.Stage) {
			this.Stage = new classes.ConditionDefinitionsStage(this.Stage);
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (this.BodySite && !Array.isArray(this.BodySite) && this.BodySite) {
			this.BodySite = new classes.CoreDefinitionsBodySite(this.BodySite);
		}
		
		ConditionDefinitionsConditionClass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerClass.prototype = Object.create(ConditionDefinitionsConditionClass.prototype);
	OncologyDefinitionsBreastCancerClass.prototype.constructor = OncologyDefinitionsBreastCancerClass;
	OncologyDefinitionsBreastCancerClass.description = "A cancer originating in the tissues of the breast, and potentially spread to other organs of the body.\nConcepts: http://ncimeta.nci.nih.gov:C1446377";
	OncologyDefinitionsBreastCancerClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer";
	OncologyDefinitionsBreastCancerClass.links = {};
	OncologyDefinitionsBreastCancerClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ConditionDefinitionsCondition.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsBreastCancerAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerClass, OncologyDefinitionsBreastCancerClass.SpecificType, {
		get: function() { return OncologyDefinitionsBreastCancerClass.SpecificType; },
		set: function(newValue) { OncologyDefinitionsBreastCancerClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerClass, OncologyDefinitionsBreastCancerClass.Category, {
		get: function() { return OncologyDefinitionsBreastCancerClass.Category; },
		set: function(newValue) { OncologyDefinitionsBreastCancerClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerClass, OncologyDefinitionsBreastCancerClass.Stage, {
		get: function() { return OncologyDefinitionsBreastCancerClass.Stage; },
		set: function(newValue) { OncologyDefinitionsBreastCancerClass.Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerClass, OncologyDefinitionsBreastCancerClass.BodySite, {
		get: function() { return OncologyDefinitionsBreastCancerClass.BodySite; },
		set: function(newValue) { OncologyDefinitionsBreastCancerClass.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis */
	var OncologyDefinitionsBreastCancerGeneticAnalysisClass = classes.OncologyDefinitionsBreastCancerGeneticAnalysis = function OncologyDefinitionsBreastCancerGeneticAnalysisClass(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerGeneticAnalysisClass)) return new OncologyDefinitionsBreastCancerGeneticAnalysisClass(value);
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && typeof this.PanelMembers === "object") {
			this.PanelMembers = new classes.OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembers(this.PanelMembers);
		}
		
		ObservationDefinitionsPanelClass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.prototype = Object.create(ObservationDefinitionsPanelClass.prototype);
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.prototype.constructor = OncologyDefinitionsBreastCancerGeneticAnalysisClass;
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.description = "The status of genes known or suspected to play a role in breast cancer risk, for example, the tumor suppressor genes, BRCA1 and BRCA2.";
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis";
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.links = {};
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsPanel.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerGeneticAnalysisClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerGeneticAnalysisClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerGeneticAnalysisClass, OncologyDefinitionsBreastCancerGeneticAnalysisClass.PanelMembers, {
		get: function() { return OncologyDefinitionsBreastCancerGeneticAnalysisClass.PanelMembers; },
		set: function(newValue) { OncologyDefinitionsBreastCancerGeneticAnalysisClass.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus */
	var OncologyDefinitionsBreastCancerReceptorStatusClass = classes.OncologyDefinitionsBreastCancerReceptorStatus = function OncologyDefinitionsBreastCancerReceptorStatusClass(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerReceptorStatusClass)) return new OncologyDefinitionsBreastCancerReceptorStatusClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.EstrogenReceptorStatus !== "undefined") {
			this.EstrogenReceptorStatus = value.EstrogenReceptorStatus;
		}
		if (this.EstrogenReceptorStatus && !Array.isArray(this.EstrogenReceptorStatus) && typeof this.EstrogenReceptorStatus === "object") {
			this.EstrogenReceptorStatus = new classes.OncologyDefinitionsEstrogenReceptorStatus(this.EstrogenReceptorStatus);
		}
		if (typeof value.ProgesteroneReceptorStatus !== "undefined") {
			this.ProgesteroneReceptorStatus = value.ProgesteroneReceptorStatus;
		}
		if (this.ProgesteroneReceptorStatus && !Array.isArray(this.ProgesteroneReceptorStatus) && typeof this.ProgesteroneReceptorStatus === "object") {
			this.ProgesteroneReceptorStatus = new classes.OncologyDefinitionsProgesteroneReceptorStatus(this.ProgesteroneReceptorStatus);
		}
		if (typeof value.HumanEpiduralGrowthFactorReceptor2Status !== "undefined") {
			this.HumanEpiduralGrowthFactorReceptor2Status = value.HumanEpiduralGrowthFactorReceptor2Status;
		}
		if (this.HumanEpiduralGrowthFactorReceptor2Status && !Array.isArray(this.HumanEpiduralGrowthFactorReceptor2Status) && typeof this.HumanEpiduralGrowthFactorReceptor2Status === "object") {
			this.HumanEpiduralGrowthFactorReceptor2Status = new classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2Status(this.HumanEpiduralGrowthFactorReceptor2Status);
		}
		
		ObservationDefinitionsPanelClass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerReceptorStatusClass.prototype = Object.create(ObservationDefinitionsPanelClass.prototype);
	OncologyDefinitionsBreastCancerReceptorStatusClass.prototype.constructor = OncologyDefinitionsBreastCancerReceptorStatusClass;
	OncologyDefinitionsBreastCancerReceptorStatusClass.description = "Immunohistochemistry (IHC) assessment for estrogen receptor (ER) and progesterone receptor (PR) as well as IHC or in situ hybridization (ISH) determination of human epidermal growth factor receptor 2 (HER2) status\nTBD Fields: Specimen";
	OncologyDefinitionsBreastCancerReceptorStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus";
	OncologyDefinitionsBreastCancerReceptorStatusClass.links = {};
	OncologyDefinitionsBreastCancerReceptorStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsPanel.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsBreastCancerReceptorStatusAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerReceptorStatusClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerReceptorStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusClass, OncologyDefinitionsBreastCancerReceptorStatusClass.SpecificType, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusClass.SpecificType; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusClass, OncologyDefinitionsBreastCancerReceptorStatusClass.EstrogenReceptorStatus, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusClass.EstrogenReceptorStatus; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusClass.EstrogenReceptorStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusClass, OncologyDefinitionsBreastCancerReceptorStatusClass.ProgesteroneReceptorStatus, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusClass.ProgesteroneReceptorStatus; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusClass.ProgesteroneReceptorStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusClass, OncologyDefinitionsBreastCancerReceptorStatusClass.HumanEpiduralGrowthFactorReceptor2Status, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusClass.HumanEpiduralGrowthFactorReceptor2Status; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusClass.HumanEpiduralGrowthFactorReceptor2Status = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential */
	var OncologyDefinitionsCancerGrowthPotentialClass = classes.OncologyDefinitionsCancerGrowthPotential = function OncologyDefinitionsCancerGrowthPotentialClass(value) {
		if (!(this instanceof OncologyDefinitionsCancerGrowthPotentialClass)) return new OncologyDefinitionsCancerGrowthPotentialClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Ki_67LabelingIndex !== "undefined") {
			this.Ki_67LabelingIndex = value.Ki_67LabelingIndex;
		}
		if (this.Ki_67LabelingIndex && !Array.isArray(this.Ki_67LabelingIndex) && typeof this.Ki_67LabelingIndex === "object") {
			this.Ki_67LabelingIndex = new classes.OncologyDefinitionsKi67LabelingIndex(this.Ki_67LabelingIndex);
		}
		if (typeof value.S_PhaseFraction !== "undefined") {
			this.S_PhaseFraction = value.S_PhaseFraction;
		}
		if (this.S_PhaseFraction && !Array.isArray(this.S_PhaseFraction) && typeof this.S_PhaseFraction === "object") {
			this.S_PhaseFraction = new classes.OncologyDefinitionsSPhaseFraction(this.S_PhaseFraction);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsCancerGrowthPotentialClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsCancerGrowthPotentialClass.prototype.constructor = OncologyDefinitionsCancerGrowthPotentialClass;
	OncologyDefinitionsCancerGrowthPotentialClass.description = "Information relating to rate of cell growth or proportion of cancer cells within the tumor that are growing and dividing to form new cancer cells.\nConcepts: Cancer Cell Growth (http://ncimeta.nci.nih.gov:C1516170)";
	OncologyDefinitionsCancerGrowthPotentialClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential";
	OncologyDefinitionsCancerGrowthPotentialClass.links = {};
	OncologyDefinitionsCancerGrowthPotentialClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsCancerGrowthPotentialAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsCancerGrowthPotentialClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCancerGrowthPotentialClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialClass, OncologyDefinitionsCancerGrowthPotentialClass.Value, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialClass.Value; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialClass, OncologyDefinitionsCancerGrowthPotentialClass.Ki_67LabelingIndex, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialClass.Ki_67LabelingIndex; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialClass.Ki_67LabelingIndex = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialClass, OncologyDefinitionsCancerGrowthPotentialClass.S_PhaseFraction, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialClass.S_PhaseFraction; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialClass.S_PhaseFraction = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement */
	var OncologyDefinitionsCancerLymphaticInvolvementClass = classes.OncologyDefinitionsCancerLymphaticInvolvement = function OncologyDefinitionsCancerLymphaticInvolvementClass(value) {
		if (!(this instanceof OncologyDefinitionsCancerLymphaticInvolvementClass)) return new OncologyDefinitionsCancerLymphaticInvolvementClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.LymphaticSystemSubdivision !== "undefined") {
			this.LymphaticSystemSubdivision = value.LymphaticSystemSubdivision;
		}
		if (this.LymphaticSystemSubdivision && !Array.isArray(this.LymphaticSystemSubdivision) && typeof this.LymphaticSystemSubdivision === "object") {
			this.LymphaticSystemSubdivision = new classes.OncologyDefinitionsLymphaticSystemSubdivision(this.LymphaticSystemSubdivision);
		}
		if (typeof value.LargestLymphNodeSize !== "undefined") {
			this.LargestLymphNodeSize = value.LargestLymphNodeSize;
		}
		if (this.LargestLymphNodeSize && !Array.isArray(this.LargestLymphNodeSize) && typeof this.LargestLymphNodeSize === "object") {
			this.LargestLymphNodeSize = new classes.OncologyDefinitionsLargestLymphNodeSize(this.LargestLymphNodeSize);
		}
		if (typeof value.NumberOfLymphNodesInvolved !== "undefined") {
			this.NumberOfLymphNodesInvolved = value.NumberOfLymphNodesInvolved;
		}
		if (this.NumberOfLymphNodesInvolved && !Array.isArray(this.NumberOfLymphNodesInvolved) && typeof this.NumberOfLymphNodesInvolved === "object") {
			this.NumberOfLymphNodesInvolved = new classes.OncologyDefinitionsNumberOfLymphNodesInvolved(this.NumberOfLymphNodesInvolved);
		}
		if (typeof value.DegreeOfLymphaticInvolvement !== "undefined") {
			this.DegreeOfLymphaticInvolvement = value.DegreeOfLymphaticInvolvement;
		}
		if (this.DegreeOfLymphaticInvolvement && !Array.isArray(this.DegreeOfLymphaticInvolvement) && typeof this.DegreeOfLymphaticInvolvement === "object") {
			this.DegreeOfLymphaticInvolvement = new classes.OncologyDefinitionsDegreeOfLymphaticInvolvement(this.DegreeOfLymphaticInvolvement);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsCancerLymphaticInvolvementClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsCancerLymphaticInvolvementClass.prototype.constructor = OncologyDefinitionsCancerLymphaticInvolvementClass;
	OncologyDefinitionsCancerLymphaticInvolvementClass.description = "Whether or not lymph nodes contain cancer cells.\nConcepts: http://ncimeta.nci.nih.gov:C0746333";
	OncologyDefinitionsCancerLymphaticInvolvementClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement";
	OncologyDefinitionsCancerLymphaticInvolvementClass.links = {};
	OncologyDefinitionsCancerLymphaticInvolvementClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsCancerLymphaticInvolvementAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsCancerLymphaticInvolvementClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCancerLymphaticInvolvementClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementClass, OncologyDefinitionsCancerLymphaticInvolvementClass.Value, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementClass.Value; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementClass, OncologyDefinitionsCancerLymphaticInvolvementClass.LymphaticSystemSubdivision, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementClass.LymphaticSystemSubdivision; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementClass.LymphaticSystemSubdivision = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementClass, OncologyDefinitionsCancerLymphaticInvolvementClass.LargestLymphNodeSize, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementClass.LargestLymphNodeSize; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementClass.LargestLymphNodeSize = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementClass, OncologyDefinitionsCancerLymphaticInvolvementClass.NumberOfLymphNodesInvolved, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementClass.NumberOfLymphNodesInvolved; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementClass.NumberOfLymphNodesInvolved = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementClass, OncologyDefinitionsCancerLymphaticInvolvementClass.DegreeOfLymphaticInvolvement, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementClass.DegreeOfLymphaticInvolvement; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementClass.DegreeOfLymphaticInvolvement = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus */
	var OncologyDefinitionsEstrogenReceptorStatusClass = classes.OncologyDefinitionsEstrogenReceptorStatus = function OncologyDefinitionsEstrogenReceptorStatusClass(value) {
		if (!(this instanceof OncologyDefinitionsEstrogenReceptorStatusClass)) return new OncologyDefinitionsEstrogenReceptorStatusClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		
		OncologyDefinitionsReceptorStatusObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsEstrogenReceptorStatusClass.prototype = Object.create(OncologyDefinitionsReceptorStatusObservationClass.prototype);
	OncologyDefinitionsEstrogenReceptorStatusClass.prototype.constructor = OncologyDefinitionsEstrogenReceptorStatusClass;
	OncologyDefinitionsEstrogenReceptorStatusClass.description = "Estrogen receptor alpha is the predominant estrogen receptor expressed in breast tissue and is overexpressed in around 50% of breast carcinomas. ER status (positive=present or overexpressed; negative=absent) is a factor in determining prognosis and treatment options.";
	OncologyDefinitionsEstrogenReceptorStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus";
	OncologyDefinitionsEstrogenReceptorStatusClass.links = {};
	OncologyDefinitionsEstrogenReceptorStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorStatusObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsEstrogenReceptorStatusAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsEstrogenReceptorStatusClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsEstrogenReceptorStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsEstrogenReceptorStatusClass, OncologyDefinitionsEstrogenReceptorStatusClass.SpecificType, {
		get: function() { return OncologyDefinitionsEstrogenReceptorStatusClass.SpecificType; },
		set: function(newValue) { OncologyDefinitionsEstrogenReceptorStatusClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsEstrogenReceptorStatusClass, OncologyDefinitionsEstrogenReceptorStatusClass.ReceptorType, {
		get: function() { return OncologyDefinitionsEstrogenReceptorStatusClass.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsEstrogenReceptorStatusClass.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade */
	var OncologyDefinitionsHistologicGradeClass = classes.OncologyDefinitionsHistologicGrade = function OncologyDefinitionsHistologicGradeClass(value) {
		if (!(this instanceof OncologyDefinitionsHistologicGradeClass)) return new OncologyDefinitionsHistologicGradeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.TubuleFormationScore !== "undefined") {
			this.TubuleFormationScore = value.TubuleFormationScore;
		}
		if (this.TubuleFormationScore && !Array.isArray(this.TubuleFormationScore) && typeof this.TubuleFormationScore === "object") {
			this.TubuleFormationScore = new classes.OncologyDefinitionsTubuleFormationScore(this.TubuleFormationScore);
		}
		if (typeof value.NuclearPleomorphismScore !== "undefined") {
			this.NuclearPleomorphismScore = value.NuclearPleomorphismScore;
		}
		if (this.NuclearPleomorphismScore && !Array.isArray(this.NuclearPleomorphismScore) && typeof this.NuclearPleomorphismScore === "object") {
			this.NuclearPleomorphismScore = new classes.OncologyDefinitionsNuclearPleomorphismScore(this.NuclearPleomorphismScore);
		}
		if (typeof value.MitoticCountScore !== "undefined") {
			this.MitoticCountScore = value.MitoticCountScore;
		}
		if (this.MitoticCountScore && !Array.isArray(this.MitoticCountScore) && typeof this.MitoticCountScore === "object") {
			this.MitoticCountScore = new classes.OncologyDefinitionsMitoticCountScore(this.MitoticCountScore);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsHistologicGradeClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsHistologicGradeClass.prototype.constructor = OncologyDefinitionsHistologicGradeClass;
	OncologyDefinitionsHistologicGradeClass.description = "The Elston Grade/Nottingham Score, representative of the aggressive potential of the tumor. Well differentiated (Grade 1) look similar to normal cells and are usually slow growing, while poorly differentiated cells (Grade 3) look very different than normal and are fast-growing.\nConcepts: http://ncimeta.nci.nih.gov:C1511980";
	OncologyDefinitionsHistologicGradeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade";
	OncologyDefinitionsHistologicGradeClass.links = {};
	OncologyDefinitionsHistologicGradeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsHistologicGradeAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsHistologicGradeClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsHistologicGradeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsHistologicGradeClass, OncologyDefinitionsHistologicGradeClass.Value, {
		get: function() { return OncologyDefinitionsHistologicGradeClass.Value; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeClass, OncologyDefinitionsHistologicGradeClass.TubuleFormationScore, {
		get: function() { return OncologyDefinitionsHistologicGradeClass.TubuleFormationScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeClass.TubuleFormationScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeClass, OncologyDefinitionsHistologicGradeClass.NuclearPleomorphismScore, {
		get: function() { return OncologyDefinitionsHistologicGradeClass.NuclearPleomorphismScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeClass.NuclearPleomorphismScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeClass, OncologyDefinitionsHistologicGradeClass.MitoticCountScore, {
		get: function() { return OncologyDefinitionsHistologicGradeClass.MitoticCountScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeClass.MitoticCountScore = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status */
	var OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass = classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2Status = function OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass(value) {
		if (!(this instanceof OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass)) return new OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		
		OncologyDefinitionsReceptorStatusObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.prototype = Object.create(OncologyDefinitionsReceptorStatusObservationClass.prototype);
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.prototype.constructor = OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass;
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.description = "HER2 is a member of the human epidermal growth factor receptor family of proteins and is encoded by the ERBB2 oncogene. HER2 is overexpressed in 20-30% of breast tumors,10 and is associated with an aggressive clinical course and poor prognosis. HER2 status (positive=present or overexpressed; negative=absent) is a factor in determining prognosis and treatment options.\nConcepts: http://ncimeta.nci.nih.gov:C3810543";
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status";
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.links = {};
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorStatusObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.SpecificType, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.SpecificType; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.ReceptorType, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.Method, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.Method; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation */
	var OncologyDefinitionsNeoplasmObservationClass = classes.OncologyDefinitionsNeoplasmObservation = function OncologyDefinitionsNeoplasmObservationClass(value) {
		if (!(this instanceof OncologyDefinitionsNeoplasmObservationClass)) return new OncologyDefinitionsNeoplasmObservationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Identifier !== "undefined") {
			this.Identifier = value.Identifier;
		}
		if (this.Identifier && !Array.isArray(this.Identifier) && this.Identifier) {
			this.Identifier = new classes.CoreDefinitionsIdentifier(this.Identifier);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		
		ObservationDefinitionsBodyStructureObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsNeoplasmObservationClass.prototype = Object.create(ObservationDefinitionsBodyStructureObservationClass.prototype);
	OncologyDefinitionsNeoplasmObservationClass.prototype.constructor = OncologyDefinitionsNeoplasmObservationClass;
	OncologyDefinitionsNeoplasmObservationClass.description = "Observation of a unusual growth, for example, a tumor. The body site allows the abnormality to be located and identified. The abnormality identifier allows the tumor to be tracked over time.";
	OncologyDefinitionsNeoplasmObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation";
	OncologyDefinitionsNeoplasmObservationClass.links = {};
	OncologyDefinitionsNeoplasmObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsBodyStructureObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsNeoplasmObservationAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsNeoplasmObservationClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNeoplasmObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationClass, OncologyDefinitionsNeoplasmObservationClass.Value, {
		get: function() { return OncologyDefinitionsNeoplasmObservationClass.Value; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationClass, OncologyDefinitionsNeoplasmObservationClass.Identifier, {
		get: function() { return OncologyDefinitionsNeoplasmObservationClass.Identifier; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationClass.Identifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationClass, OncologyDefinitionsNeoplasmObservationClass.Method, {
		get: function() { return OncologyDefinitionsNeoplasmObservationClass.Method; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus */
	var OncologyDefinitionsProgesteroneReceptorStatusClass = classes.OncologyDefinitionsProgesteroneReceptorStatus = function OncologyDefinitionsProgesteroneReceptorStatusClass(value) {
		if (!(this instanceof OncologyDefinitionsProgesteroneReceptorStatusClass)) return new OncologyDefinitionsProgesteroneReceptorStatusClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		
		OncologyDefinitionsReceptorStatusObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsProgesteroneReceptorStatusClass.prototype = Object.create(OncologyDefinitionsReceptorStatusObservationClass.prototype);
	OncologyDefinitionsProgesteroneReceptorStatusClass.prototype.constructor = OncologyDefinitionsProgesteroneReceptorStatusClass;
	OncologyDefinitionsProgesteroneReceptorStatusClass.description = "Progesterone receptor is expressed in 65% of breast carcinomas. PR status (positive=present or overexpressed; negative=absent) is a factor in determining prognosis and treatment options.\nConcepts: http://ncimeta.nci.nih.gov:C1514471";
	OncologyDefinitionsProgesteroneReceptorStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus";
	OncologyDefinitionsProgesteroneReceptorStatusClass.links = {};
	OncologyDefinitionsProgesteroneReceptorStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorStatusObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsProgesteroneReceptorStatusAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsProgesteroneReceptorStatusClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgesteroneReceptorStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgesteroneReceptorStatusClass, OncologyDefinitionsProgesteroneReceptorStatusClass.SpecificType, {
		get: function() { return OncologyDefinitionsProgesteroneReceptorStatusClass.SpecificType; },
		set: function(newValue) { OncologyDefinitionsProgesteroneReceptorStatusClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgesteroneReceptorStatusClass, OncologyDefinitionsProgesteroneReceptorStatusClass.ReceptorType, {
		get: function() { return OncologyDefinitionsProgesteroneReceptorStatusClass.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsProgesteroneReceptorStatusClass.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression */
	var OncologyDefinitionsProgressionClass = classes.OncologyDefinitionsProgression = function OncologyDefinitionsProgressionClass(value) {
		if (!(this instanceof OncologyDefinitionsProgressionClass)) return new OncologyDefinitionsProgressionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (this.AssessmentFocus && !Array.isArray(this.AssessmentFocus) && this.AssessmentFocus) {
			this.AssessmentFocus = new classes.AssessmentDefinitionsAssessmentFocus(this.AssessmentFocus);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		
		AssessmentDefinitionsAssessmentClass.apply(this, arguments);
	};
	OncologyDefinitionsProgressionClass.prototype = Object.create(AssessmentDefinitionsAssessmentClass.prototype);
	OncologyDefinitionsProgressionClass.prototype.constructor = OncologyDefinitionsProgressionClass;
	OncologyDefinitionsProgressionClass.description = "A finding related to the current trend of a disease. This concept is most often used for chronic and incurable diseases where the status and trendline of the disease is an important determinant of therapy and prognosis. The specific disorder being evaluated must be cited in the AssessmentFocus as a reference to a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0449258";
	OncologyDefinitionsProgressionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression";
	OncologyDefinitionsProgressionClass.links = {};
	OncologyDefinitionsProgressionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessment.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsProgressionAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsProgressionClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgressionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Value, {
		get: function() { return OncologyDefinitionsProgressionClass.Value; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Category, {
		get: function() { return OncologyDefinitionsProgressionClass.Category; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.AssessmentFocus, {
		get: function() { return OncologyDefinitionsProgressionClass.AssessmentFocus; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionClass, OncologyDefinitionsProgressionClass.Evidence, {
		get: function() { return OncologyDefinitionsProgressionClass.Evidence; },
		set: function(newValue) { OncologyDefinitionsProgressionClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation */
	var OncologyDefinitionsReceptorStatusObservationClass = classes.OncologyDefinitionsReceptorStatusObservation = function OncologyDefinitionsReceptorStatusObservationClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorStatusObservationClass)) return new OncologyDefinitionsReceptorStatusObservationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		if (typeof value.ReceptorPositivityPercentage !== "undefined") {
			this.ReceptorPositivityPercentage = value.ReceptorPositivityPercentage;
		}
		if (this.ReceptorPositivityPercentage && !Array.isArray(this.ReceptorPositivityPercentage) && typeof this.ReceptorPositivityPercentage === "object") {
			this.ReceptorPositivityPercentage = new classes.OncologyDefinitionsReceptorPositivityPercentage(this.ReceptorPositivityPercentage);
		}
		if (typeof value.ReceptorAllredTotalScore !== "undefined") {
			this.ReceptorAllredTotalScore = value.ReceptorAllredTotalScore;
		}
		if (this.ReceptorAllredTotalScore && !Array.isArray(this.ReceptorAllredTotalScore) && typeof this.ReceptorAllredTotalScore === "object") {
			this.ReceptorAllredTotalScore = new classes.OncologyDefinitionsReceptorAllredTotalScore(this.ReceptorAllredTotalScore);
		}
		if (typeof value.ReceptorProportionScore !== "undefined") {
			this.ReceptorProportionScore = value.ReceptorProportionScore;
		}
		if (this.ReceptorProportionScore && !Array.isArray(this.ReceptorProportionScore) && typeof this.ReceptorProportionScore === "object") {
			this.ReceptorProportionScore = new classes.OncologyDefinitionsReceptorProportionScore(this.ReceptorProportionScore);
		}
		if (typeof value.ReceptorIntensityScore !== "undefined") {
			this.ReceptorIntensityScore = value.ReceptorIntensityScore;
		}
		if (this.ReceptorIntensityScore && !Array.isArray(this.ReceptorIntensityScore) && typeof this.ReceptorIntensityScore === "object") {
			this.ReceptorIntensityScore = new classes.OncologyDefinitionsReceptorIntensityScore(this.ReceptorIntensityScore);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorStatusObservationClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsReceptorStatusObservationClass.prototype.constructor = OncologyDefinitionsReceptorStatusObservationClass;
	OncologyDefinitionsReceptorStatusObservationClass.description = "Refers to the presence or absence of specific receptor molecules on the surface of a cells in a specimen.\nConcepts: http://ncimeta.nci.nih.gov:C0449443";
	OncologyDefinitionsReceptorStatusObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation";
	OncologyDefinitionsReceptorStatusObservationClass.links = {};
	OncologyDefinitionsReceptorStatusObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorStatusObservationAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsReceptorStatusObservationClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorStatusObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.Value, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.ReceptorType, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.ReceptorPositivityPercentage, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.ReceptorPositivityPercentage; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.ReceptorPositivityPercentage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.ReceptorAllredTotalScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.ReceptorAllredTotalScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.ReceptorAllredTotalScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.ReceptorProportionScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.ReceptorProportionScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.ReceptorProportionScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationClass, OncologyDefinitionsReceptorStatusObservationClass.ReceptorIntensityScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationClass.ReceptorIntensityScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationClass.ReceptorIntensityScore = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage */
	var OncologyDefinitionsTNMStageClass = classes.OncologyDefinitionsTNMStage = function OncologyDefinitionsTNMStageClass(value) {
		if (!(this instanceof OncologyDefinitionsTNMStageClass)) return new OncologyDefinitionsTNMStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.StagingSystem !== "undefined") {
			this.StagingSystem = value.StagingSystem;
		}
		if (this.StagingSystem && !Array.isArray(this.StagingSystem) && this.StagingSystem) {
			this.StagingSystem = new classes.OncologyDefinitionsStagingSystem(this.StagingSystem);
		}
		if (typeof value.StagingTiming !== "undefined") {
			this.StagingTiming = value.StagingTiming;
		}
		if (this.StagingTiming && !Array.isArray(this.StagingTiming) && this.StagingTiming) {
			this.StagingTiming = new classes.OncologyDefinitionsStagingTiming(this.StagingTiming);
		}
		if (typeof value.T_Stage !== "undefined") {
			this.T_Stage = value.T_Stage;
		}
		if (this.T_Stage && !Array.isArray(this.T_Stage) && typeof this.T_Stage === "object") {
			this.T_Stage = new classes.OncologyDefinitionsTStage(this.T_Stage);
		}
		if (typeof value.N_Stage !== "undefined") {
			this.N_Stage = value.N_Stage;
		}
		if (this.N_Stage && !Array.isArray(this.N_Stage) && typeof this.N_Stage === "object") {
			this.N_Stage = new classes.OncologyDefinitionsNStage(this.N_Stage);
		}
		if (typeof value.M_Stage !== "undefined") {
			this.M_Stage = value.M_Stage;
		}
		if (this.M_Stage && !Array.isArray(this.M_Stage) && typeof this.M_Stage === "object") {
			this.M_Stage = new classes.OncologyDefinitionsMStage(this.M_Stage);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsTNMStageClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsTNMStageClass.prototype.constructor = OncologyDefinitionsTNMStageClass;
	OncologyDefinitionsTNMStageClass.description = "The stage of a cancer, assessed according to the standard established by American Joint Committee on Cancer (AJCC). TNM Stage Grouping categorizes the progression of cancer using the Roman Numeral system. See Table 140 in HL7 CDA® R2 Implementation Guide: Clinical Oncology Treatment Plan and Summary, Release 1 - US Realm\nConcepts: http://loinc.org:21908-9";
	OncologyDefinitionsTNMStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage";
	OncologyDefinitionsTNMStageClass.links = {};
	OncologyDefinitionsTNMStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTNMStageAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTNMStageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTNMStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.Value, {
		get: function() { return OncologyDefinitionsTNMStageClass.Value; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.StagingSystem, {
		get: function() { return OncologyDefinitionsTNMStageClass.StagingSystem; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.StagingSystem = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.StagingTiming, {
		get: function() { return OncologyDefinitionsTNMStageClass.StagingTiming; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.StagingTiming = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.T_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.T_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.T_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.N_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.N_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.N_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageClass, OncologyDefinitionsTNMStageClass.M_Stage, {
		get: function() { return OncologyDefinitionsTNMStageClass.M_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageClass.M_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment */
	var OncologyDefinitionsToxicReactionToTreatmentClass = classes.OncologyDefinitionsToxicReactionToTreatment = function OncologyDefinitionsToxicReactionToTreatmentClass(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentClass)) return new OncologyDefinitionsToxicReactionToTreatmentClass(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent) && typeof this.AdverseEvent === "object") {
			this.AdverseEvent = new classes.OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEvent(this.AdverseEvent);
		}
		
		AdverseDefinitionsAdverseReactionClass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentClass.prototype = Object.create(AdverseDefinitionsAdverseReactionClass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentClass.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentClass;
	OncologyDefinitionsToxicReactionToTreatmentClass.description = "A grade 3 or 4 adverse reaction to medication, radiation treatment, or other therapy.";
	OncologyDefinitionsToxicReactionToTreatmentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment";
	OncologyDefinitionsToxicReactionToTreatmentClass.links = {};
	OncologyDefinitionsToxicReactionToTreatmentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AdverseDefinitionsAdverseReaction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentClass, OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentClass.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize */
	var OncologyDefinitionsTumorSizeClass = classes.OncologyDefinitionsTumorSize = function OncologyDefinitionsTumorSizeClass(value) {
		if (!(this instanceof OncologyDefinitionsTumorSizeClass)) return new OncologyDefinitionsTumorSizeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		if (typeof value.TumorSecondaryDimensionSize !== "undefined") {
			this.TumorSecondaryDimensionSize = value.TumorSecondaryDimensionSize;
		}
		if (this.TumorSecondaryDimensionSize && !Array.isArray(this.TumorSecondaryDimensionSize) && typeof this.TumorSecondaryDimensionSize === "object") {
			this.TumorSecondaryDimensionSize = new classes.OncologyDefinitionsTumorSecondaryDimensionSize(this.TumorSecondaryDimensionSize);
		}
		if (typeof value.SizeOfGrossTumorBed !== "undefined") {
			this.SizeOfGrossTumorBed = value.SizeOfGrossTumorBed;
		}
		if (this.SizeOfGrossTumorBed && !Array.isArray(this.SizeOfGrossTumorBed) && typeof this.SizeOfGrossTumorBed === "object") {
			this.SizeOfGrossTumorBed = new classes.OncologyDefinitionsSizeOfGrossTumorBed(this.SizeOfGrossTumorBed);
		}
		if (typeof value.TumorMargins !== "undefined") {
			this.TumorMargins = value.TumorMargins;
		}
		if (this.TumorMargins && !Array.isArray(this.TumorMargins) && typeof this.TumorMargins === "object") {
			this.TumorMargins = new classes.OncologyDefinitionsTumorMargins(this.TumorMargins);
		}
		if (typeof value.Cellularity !== "undefined") {
			this.Cellularity = value.Cellularity;
		}
		if (this.Cellularity && !Array.isArray(this.Cellularity) && typeof this.Cellularity === "object") {
			this.Cellularity = new classes.OncologyDefinitionsCellularity(this.Cellularity);
		}
		if (typeof value.PercentageInSituCarcinoma !== "undefined") {
			this.PercentageInSituCarcinoma = value.PercentageInSituCarcinoma;
		}
		if (this.PercentageInSituCarcinoma && !Array.isArray(this.PercentageInSituCarcinoma) && typeof this.PercentageInSituCarcinoma === "object") {
			this.PercentageInSituCarcinoma = new classes.OncologyDefinitionsPercentageInSituCarcinoma(this.PercentageInSituCarcinoma);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	OncologyDefinitionsTumorSizeClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	OncologyDefinitionsTumorSizeClass.prototype.constructor = OncologyDefinitionsTumorSizeClass;
	OncologyDefinitionsTumorSizeClass.description = "Measurement of the longest diameter of a tumor, in situ or on a excised tumor. See CDISC Table 3.3.2\nConcepts: http://ncimeta.nci.nih.gov:C4086369\nTBD Fields: Specimen";
	OncologyDefinitionsTumorSizeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize";
	OncologyDefinitionsTumorSizeClass.links = {};
	OncologyDefinitionsTumorSizeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTumorSizeAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTumorSizeClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorSizeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.Value, {
		get: function() { return OncologyDefinitionsTumorSizeClass.Value; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.TumorSecondaryDimensionSize, {
		get: function() { return OncologyDefinitionsTumorSizeClass.TumorSecondaryDimensionSize; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.TumorSecondaryDimensionSize = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.SizeOfGrossTumorBed, {
		get: function() { return OncologyDefinitionsTumorSizeClass.SizeOfGrossTumorBed; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.SizeOfGrossTumorBed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.TumorMargins, {
		get: function() { return OncologyDefinitionsTumorSizeClass.TumorMargins; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.TumorMargins = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.Cellularity, {
		get: function() { return OncologyDefinitionsTumorSizeClass.Cellularity; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.Cellularity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeClass, OncologyDefinitionsTumorSizeClass.PercentageInSituCarcinoma, {
		get: function() { return OncologyDefinitionsTumorSizeClass.PercentageInSituCarcinoma; },
		set: function(newValue) { OncologyDefinitionsTumorSizeClass.PercentageInSituCarcinoma = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType */
	var CoreDefinitionsSpecificTypeClass = classes.CoreDefinitionsSpecificType = function CoreDefinitionsSpecificTypeClass(value) {
		if (!(this instanceof CoreDefinitionsSpecificTypeClass)) return new CoreDefinitionsSpecificTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsSpecificTypeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsSpecificTypeClass.prototype.constructor = CoreDefinitionsSpecificTypeClass;
	CoreDefinitionsSpecificTypeClass.description = "A code or description representing the concept represented by the instance at a specific level. For example, for a Condition, the concept is MTH#C0348080 (Condition) but the Value is the SpecificType, i.e. MTH#C0011849 (Diabetes Mellitus). For an observation, the SpecificType defines what is being observed, measured, or asked, as specifically as possible. The SpecificType should always align with the concept of the element, for example, a blood pressure observation can be coded as a sitting blood pressure or standing blood pressure, and may be from a different code system (e.g. LOINC versus MTH). In other cases, the SpecificType is the specific question being asked, or the specific goal being pursued.";
	CoreDefinitionsSpecificTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType";
	CoreDefinitionsSpecificTypeClass.links = {};
	CoreDefinitionsSpecificTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/SpecificType"});
		}
		return errors;
	}
	CoreDefinitionsSpecificTypeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsSpecificTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsSpecificTypeClass, CoreDefinitionsSpecificTypeClass.Value, {
		get: function() { return CoreDefinitionsSpecificTypeClass.Value; },
		set: function(newValue) { CoreDefinitionsSpecificTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category */
	var BaseDefinitionsCategoryClass = classes.BaseDefinitionsCategory = function BaseDefinitionsCategoryClass(value) {
		if (!(this instanceof BaseDefinitionsCategoryClass)) return new BaseDefinitionsCategoryClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsCategoryClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsCategoryClass.prototype.constructor = BaseDefinitionsCategoryClass;
	BaseDefinitionsCategoryClass.description = "A categorization of the action according its type, often a code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This can be used for searching, sorting and display purposes.";
	BaseDefinitionsCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category";
	BaseDefinitionsCategoryClass.links = {};
	BaseDefinitionsCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Category"});
		}
		return errors;
	}
	BaseDefinitionsCategoryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsCategoryClass, BaseDefinitionsCategoryClass.Value, {
		get: function() { return BaseDefinitionsCategoryClass.Value; },
		set: function(newValue) { BaseDefinitionsCategoryClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage */
	var ConditionDefinitionsStageClass = classes.ConditionDefinitionsStage = function ConditionDefinitionsStageClass(value) {
		if (!(this instanceof ConditionDefinitionsStageClass)) return new ConditionDefinitionsStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (this.Evidence && !Array.isArray(this.Evidence) && this.Evidence) {
			this.Evidence = new classes.ObservationDefinitionsEvidence(this.Evidence);
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsStageClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsStageClass.prototype.constructor = ConditionDefinitionsStageClass;
	ConditionDefinitionsStageClass.description = "The relative advancement in the course of a disease.\nConcepts: http://ncimeta.nci.nih.gov:C0699749";
	ConditionDefinitionsStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage";
	ConditionDefinitionsStageClass.links = {};
	ConditionDefinitionsStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage"});
			}
			if ("Evidence" in value) {
				errors = errors.concat(classes.ObservationDefinitionsEvidence.validationErrors(value.Evidence, dataPath + "/Evidence", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Stage"});
		}
		return errors;
	}
	ConditionDefinitionsStageClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsStageClass, ConditionDefinitionsStageClass.Value, {
		get: function() { return ConditionDefinitionsStageClass.Value; },
		set: function(newValue) { ConditionDefinitionsStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsStageClass, ConditionDefinitionsStageClass.Evidence, {
		get: function() { return ConditionDefinitionsStageClass.Evidence; },
		set: function(newValue) { ConditionDefinitionsStageClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite */
	var CoreDefinitionsBodySiteClass = classes.CoreDefinitionsBodySite = function CoreDefinitionsBodySiteClass(value) {
		if (!(this instanceof CoreDefinitionsBodySiteClass)) return new CoreDefinitionsBodySiteClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Laterality !== "undefined") {
			this.Laterality = value.Laterality;
		}
		if (this.Laterality && !Array.isArray(this.Laterality) && this.Laterality) {
			this.Laterality = new classes.CoreDefinitionsLaterality(this.Laterality);
		}
		if (typeof value.Directionality !== "undefined") {
			this.Directionality = value.Directionality;
		}
		if (this.Directionality && !Array.isArray(this.Directionality) && this.Directionality) {
			this.Directionality = new classes.CoreDefinitionsDirectionality(this.Directionality);
		}
		if (typeof value.PortionTotality !== "undefined") {
			this.PortionTotality = value.PortionTotality;
		}
		if (this.PortionTotality && !Array.isArray(this.PortionTotality) && this.PortionTotality) {
			this.PortionTotality = new classes.CoreDefinitionsPortionTotality(this.PortionTotality);
		}
		if (typeof value.ClockDirection !== "undefined") {
			this.ClockDirection = value.ClockDirection;
		}
		if (this.ClockDirection && !Array.isArray(this.ClockDirection) && this.ClockDirection) {
			this.ClockDirection = new classes.CoreDefinitionsClockDirection(this.ClockDirection);
		}
		if (typeof value.Distance !== "undefined") {
			this.Distance = value.Distance;
		}
		if (this.Distance && !Array.isArray(this.Distance) && this.Distance) {
			this.Distance = new classes.CoreDefinitionsDistance(this.Distance);
		}
		if (typeof value.Description !== "undefined") {
			this.Description = value.Description;
		}
		if (this.Description && !Array.isArray(this.Description) && this.Description) {
			this.Description = new classes.CoreDefinitionsDescription(this.Description);
		}
		if (typeof value.BodySiteMarker !== "undefined") {
			this.BodySiteMarker = value.BodySiteMarker;
		}
		if (this.BodySiteMarker && !Array.isArray(this.BodySiteMarker) && this.BodySiteMarker) {
			this.BodySiteMarker = new classes.CoreDefinitionsBodySiteMarker(this.BodySiteMarker);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsBodySiteClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsBodySiteClass.prototype.constructor = CoreDefinitionsBodySiteClass;
	CoreDefinitionsBodySiteClass.description = "A location in the body, including tissues, regions, cavities, and spaces, for example, right elbow, or left ventricle of the heart.\nConcepts: http://ncimeta.nci.nih.gov:C1545955";
	CoreDefinitionsBodySiteClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite";
	CoreDefinitionsBodySiteClass.links = {};
	CoreDefinitionsBodySiteClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite"});
			}
			if ("Laterality" in value) {
				errors = errors.concat(classes.CoreDefinitionsLaterality.validationErrors(value.Laterality, dataPath + "/Laterality", missing));
			}
			if ("Directionality" in value) {
				errors = errors.concat(classes.CoreDefinitionsDirectionality.validationErrors(value.Directionality, dataPath + "/Directionality", missing));
			}
			if ("PortionTotality" in value) {
				errors = errors.concat(classes.CoreDefinitionsPortionTotality.validationErrors(value.PortionTotality, dataPath + "/PortionTotality", missing));
			}
			if ("ClockDirection" in value) {
				errors = errors.concat(classes.CoreDefinitionsClockDirection.validationErrors(value.ClockDirection, dataPath + "/ClockDirection", missing));
			}
			if ("Distance" in value) {
				errors = errors.concat(classes.CoreDefinitionsDistance.validationErrors(value.Distance, dataPath + "/Distance", missing));
			}
			if ("Description" in value) {
				errors = errors.concat(classes.CoreDefinitionsDescription.validationErrors(value.Description, dataPath + "/Description", missing));
			}
			if ("BodySiteMarker" in value) {
				errors = errors.concat(classes.CoreDefinitionsBodySiteMarker.validationErrors(value.BodySiteMarker, dataPath + "/BodySiteMarker", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySite"});
		}
		return errors;
	}
	CoreDefinitionsBodySiteClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsBodySiteClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.Value, {
		get: function() { return CoreDefinitionsBodySiteClass.Value; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.Laterality, {
		get: function() { return CoreDefinitionsBodySiteClass.Laterality; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.Laterality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.Directionality, {
		get: function() { return CoreDefinitionsBodySiteClass.Directionality; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.Directionality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.PortionTotality, {
		get: function() { return CoreDefinitionsBodySiteClass.PortionTotality; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.PortionTotality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.ClockDirection, {
		get: function() { return CoreDefinitionsBodySiteClass.ClockDirection; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.ClockDirection = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.Distance, {
		get: function() { return CoreDefinitionsBodySiteClass.Distance; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.Distance = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.Description, {
		get: function() { return CoreDefinitionsBodySiteClass.Description; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.Description = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsBodySiteClass, CoreDefinitionsBodySiteClass.BodySiteMarker, {
		get: function() { return CoreDefinitionsBodySiteClass.BodySiteMarker; },
		set: function(newValue) { CoreDefinitionsBodySiteClass.BodySiteMarker = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry */
	var BaseDefinitionsEntryClass = classes.BaseDefinitionsEntry = function BaseDefinitionsEntryClass(value) {
		if (!(this instanceof BaseDefinitionsEntryClass)) return new BaseDefinitionsEntryClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (this.ShrId && !Array.isArray(this.ShrId)) {
			this.ShrId = new classes.BaseDefinitionsShrId(this.ShrId);
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		if (this.EntryId && !Array.isArray(this.EntryId)) {
			this.EntryId = new classes.BaseDefinitionsEntryId(this.EntryId);
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.FocalSubject !== "undefined") {
			this.FocalSubject = value.FocalSubject;
		}
		if (this.FocalSubject && !Array.isArray(this.FocalSubject)) {
			this.FocalSubject = new classes.BaseDefinitionsFocalSubject(this.FocalSubject);
		}
		if (typeof value.SubjectIsThirdPartyFlag !== "undefined") {
			this.SubjectIsThirdPartyFlag = value.SubjectIsThirdPartyFlag;
		}
		if (this.SubjectIsThirdPartyFlag && !Array.isArray(this.SubjectIsThirdPartyFlag) && this.SubjectIsThirdPartyFlag) {
			this.SubjectIsThirdPartyFlag = new classes.BaseDefinitionsSubjectIsThirdPartyFlag(this.SubjectIsThirdPartyFlag);
		}
		if (typeof value.Narrative !== "undefined") {
			this.Narrative = value.Narrative;
		}
		if (this.Narrative && !Array.isArray(this.Narrative) && this.Narrative) {
			this.Narrative = new classes.BaseDefinitionsNarrative(this.Narrative);
		}
		if (typeof value.Informant !== "undefined") {
			this.Informant = value.Informant;
		}
		if (this.Informant && !Array.isArray(this.Informant) && this.Informant) {
			this.Informant = new classes.BaseDefinitionsInformant(this.Informant);
		}
		if (typeof value.Author !== "undefined") {
			this.Author = value.Author;
		}
		if (this.Author && !Array.isArray(this.Author) && this.Author) {
			this.Author = new classes.BaseDefinitionsAuthor(this.Author);
		}
		if (typeof value.AssociatedEncounter !== "undefined") {
			this.AssociatedEncounter = value.AssociatedEncounter;
		}
		if (this.AssociatedEncounter && !Array.isArray(this.AssociatedEncounter) && this.AssociatedEncounter) {
			this.AssociatedEncounter = new classes.BaseDefinitionsAssociatedEncounter(this.AssociatedEncounter);
		}
		if (typeof value.OriginalCreationDate !== "undefined") {
			this.OriginalCreationDate = value.OriginalCreationDate;
		}
		if (this.OriginalCreationDate && !Array.isArray(this.OriginalCreationDate)) {
			this.OriginalCreationDate = new classes.BaseDefinitionsOriginalCreationDate(this.OriginalCreationDate);
		}
		if (typeof value.LastUpdateDate !== "undefined") {
			this.LastUpdateDate = value.LastUpdateDate;
		}
		if (this.LastUpdateDate && !Array.isArray(this.LastUpdateDate)) {
			this.LastUpdateDate = new classes.BaseDefinitionsLastUpdateDate(this.LastUpdateDate);
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language) && this.Language) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsEntryClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsEntryClass.prototype.constructor = BaseDefinitionsEntryClass;
	BaseDefinitionsEntryClass.description = "An item inserted in an electronic record.\nConcepts: http://ncimeta.nci.nih.gov:C1705654\nTBD Fields: SecurityLabel\nTag";
	BaseDefinitionsEntryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry";
	BaseDefinitionsEntryClass.links = {};
	BaseDefinitionsEntryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.BaseDefinitionsShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("Version" in value) {
				errors = errors.concat(classes.CoreDefinitionsVersion.validationErrors(value.Version, dataPath + "/Version", missing));
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryPropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("FocalSubject" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubject.validationErrors(value.FocalSubject, dataPath + "/FocalSubject", missing));
			} else {
				errors.push({code: 302, params: {key: "FocalSubject"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("SubjectIsThirdPartyFlag" in value) {
				errors = errors.concat(classes.BaseDefinitionsSubjectIsThirdPartyFlag.validationErrors(value.SubjectIsThirdPartyFlag, dataPath + "/SubjectIsThirdPartyFlag", missing));
			}
			if ("Narrative" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrative.validationErrors(value.Narrative, dataPath + "/Narrative", missing));
			}
			if ("Informant" in value) {
				errors = errors.concat(classes.BaseDefinitionsInformant.validationErrors(value.Informant, dataPath + "/Informant", missing));
			}
			if ("Author" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthor.validationErrors(value.Author, dataPath + "/Author", missing));
			}
			if ("AssociatedEncounter" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounter.validationErrors(value.AssociatedEncounter, dataPath + "/AssociatedEncounter", missing));
			}
			if ("OriginalCreationDate" in value) {
				errors = errors.concat(classes.BaseDefinitionsOriginalCreationDate.validationErrors(value.OriginalCreationDate, dataPath + "/OriginalCreationDate", missing));
			} else {
				errors.push({code: 302, params: {key: "OriginalCreationDate"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("LastUpdateDate" in value) {
				errors = errors.concat(classes.BaseDefinitionsLastUpdateDate.validationErrors(value.LastUpdateDate, dataPath + "/LastUpdateDate", missing));
			} else {
				errors.push({code: 302, params: {key: "LastUpdateDate"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
			}
			if ("Language" in value) {
				errors = errors.concat(classes.BaseDefinitionsLanguage.validationErrors(value.Language, dataPath + "/Language", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry"});
		}
		return errors;
	}
	BaseDefinitionsEntryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.ShrId, {
		get: function() { return BaseDefinitionsEntryClass.ShrId; },
		set: function(newValue) { BaseDefinitionsEntryClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.EntryId, {
		get: function() { return BaseDefinitionsEntryClass.EntryId; },
		set: function(newValue) { BaseDefinitionsEntryClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Version, {
		get: function() { return BaseDefinitionsEntryClass.Version; },
		set: function(newValue) { BaseDefinitionsEntryClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.EntryType, {
		get: function() { return BaseDefinitionsEntryClass.EntryType; },
		set: function(newValue) { BaseDefinitionsEntryClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.FocalSubject, {
		get: function() { return BaseDefinitionsEntryClass.FocalSubject; },
		set: function(newValue) { BaseDefinitionsEntryClass.FocalSubject = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag, {
		get: function() { return BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag; },
		set: function(newValue) { BaseDefinitionsEntryClass.SubjectIsThirdPartyFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Narrative, {
		get: function() { return BaseDefinitionsEntryClass.Narrative; },
		set: function(newValue) { BaseDefinitionsEntryClass.Narrative = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Informant, {
		get: function() { return BaseDefinitionsEntryClass.Informant; },
		set: function(newValue) { BaseDefinitionsEntryClass.Informant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Author, {
		get: function() { return BaseDefinitionsEntryClass.Author; },
		set: function(newValue) { BaseDefinitionsEntryClass.Author = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.AssociatedEncounter, {
		get: function() { return BaseDefinitionsEntryClass.AssociatedEncounter; },
		set: function(newValue) { BaseDefinitionsEntryClass.AssociatedEncounter = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.OriginalCreationDate, {
		get: function() { return BaseDefinitionsEntryClass.OriginalCreationDate; },
		set: function(newValue) { BaseDefinitionsEntryClass.OriginalCreationDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.LastUpdateDate, {
		get: function() { return BaseDefinitionsEntryClass.LastUpdateDate; },
		set: function(newValue) { BaseDefinitionsEntryClass.LastUpdateDate = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsEntryClass, BaseDefinitionsEntryClass.Language, {
		get: function() { return BaseDefinitionsEntryClass.Language; },
		set: function(newValue) { BaseDefinitionsEntryClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition */
	var ConditionDefinitionsConditionClass = classes.ConditionDefinitionsCondition = function ConditionDefinitionsConditionClass(value) {
		if (!(this instanceof ConditionDefinitionsConditionClass)) return new ConditionDefinitionsConditionClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.ClinicalStatus !== "undefined") {
			this.ClinicalStatus = value.ClinicalStatus;
		}
		if (this.ClinicalStatus && !Array.isArray(this.ClinicalStatus) && this.ClinicalStatus) {
			this.ClinicalStatus = new classes.ConditionDefinitionsClinicalStatus(this.ClinicalStatus);
		}
		if (typeof value.IncludeOnProblemList !== "undefined") {
			this.IncludeOnProblemList = value.IncludeOnProblemList;
		}
		if (this.IncludeOnProblemList && !Array.isArray(this.IncludeOnProblemList) && this.IncludeOnProblemList) {
			this.IncludeOnProblemList = new classes.ConditionDefinitionsIncludeOnProblemList(this.IncludeOnProblemList);
		}
		if (typeof value.Onset !== "undefined") {
			this.Onset = value.Onset;
		}
		if (this.Onset && !Array.isArray(this.Onset) && this.Onset) {
			this.Onset = new classes.ConditionDefinitionsOnset(this.Onset);
		}
		if (typeof value.WhenClinicallyRecognized !== "undefined") {
			this.WhenClinicallyRecognized = value.WhenClinicallyRecognized;
		}
		if (this.WhenClinicallyRecognized && !Array.isArray(this.WhenClinicallyRecognized) && this.WhenClinicallyRecognized) {
			this.WhenClinicallyRecognized = new classes.ConditionDefinitionsWhenClinicallyRecognized(this.WhenClinicallyRecognized);
		}
		if (typeof value.Preexisting !== "undefined") {
			this.Preexisting = value.Preexisting;
		}
		if (this.Preexisting && !Array.isArray(this.Preexisting) && this.Preexisting) {
			this.Preexisting = new classes.ConditionDefinitionsPreexisting(this.Preexisting);
		}
		if (typeof value.Abatement !== "undefined") {
			this.Abatement = value.Abatement;
		}
		if (this.Abatement && !Array.isArray(this.Abatement) && this.Abatement) {
			this.Abatement = new classes.ConditionDefinitionsAbatement(this.Abatement);
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (typeof value.Severity !== "undefined") {
			this.Severity = value.Severity;
		}
		if (this.Severity && !Array.isArray(this.Severity) && this.Severity) {
			this.Severity = new classes.ConditionDefinitionsSeverity(this.Severity);
		}
		if (typeof value.Criticality !== "undefined") {
			this.Criticality = value.Criticality;
		}
		if (this.Criticality && !Array.isArray(this.Criticality) && this.Criticality) {
			this.Criticality = new classes.ConditionDefinitionsCriticality(this.Criticality);
		}
		if (typeof value.Stage !== "undefined") {
			this.Stage = value.Stage;
		}
		if (this.Stage && !Array.isArray(this.Stage) && this.Stage) {
			this.Stage = new classes.ConditionDefinitionsStage(this.Stage);
		}
		if (typeof value.Observation !== "undefined") {
			this.Observation = value.Observation;
		}
		
		BaseDefinitionsEntryClass.apply(this, arguments);
	};
	ConditionDefinitionsConditionClass.prototype = Object.create(BaseDefinitionsEntryClass.prototype);
	ConditionDefinitionsConditionClass.prototype.constructor = ConditionDefinitionsConditionClass;
	ConditionDefinitionsConditionClass.description = "A representation of a disorder, abnormality, problem, injury, complaint, risk, functionality, concern, illness, disease, ailment, sickness, affliction, upset, difficulty, disorder, symptom, worry, or trouble. Condition can be used to track a problem or a risk over a period of time. By virtue of its continuity over time, Condition is different from an Observation or Assessment; Observations represents evidence, and an Assessment is a judgment based on evidence and rendered at a point in time. Diagnosis is a type of Assessment that can lead to creation of a Condition (as can an assessment of risk). The two relate because observations can lead to conclusion that a Condition exists. A statement that a certain condition does not exist should be an assessment. Not all conditions are problems, but all problems are (in some sense) conditions.\nConcepts: http://ncimeta.nci.nih.gov:C0348080";
	ConditionDefinitionsConditionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition";
	ConditionDefinitionsConditionClass.links = {};
	ConditionDefinitionsConditionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ConditionDefinitionsConditionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ConditionDefinitionsConditionClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsConditionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.SpecificType, {
		get: function() { return ConditionDefinitionsConditionClass.SpecificType; },
		set: function(newValue) { ConditionDefinitionsConditionClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Category, {
		get: function() { return ConditionDefinitionsConditionClass.Category; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.ClinicalStatus, {
		get: function() { return ConditionDefinitionsConditionClass.ClinicalStatus; },
		set: function(newValue) { ConditionDefinitionsConditionClass.ClinicalStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.IncludeOnProblemList, {
		get: function() { return ConditionDefinitionsConditionClass.IncludeOnProblemList; },
		set: function(newValue) { ConditionDefinitionsConditionClass.IncludeOnProblemList = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Onset, {
		get: function() { return ConditionDefinitionsConditionClass.Onset; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Onset = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.WhenClinicallyRecognized, {
		get: function() { return ConditionDefinitionsConditionClass.WhenClinicallyRecognized; },
		set: function(newValue) { ConditionDefinitionsConditionClass.WhenClinicallyRecognized = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Preexisting, {
		get: function() { return ConditionDefinitionsConditionClass.Preexisting; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Preexisting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Abatement, {
		get: function() { return ConditionDefinitionsConditionClass.Abatement; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Abatement = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.BodySite, {
		get: function() { return ConditionDefinitionsConditionClass.BodySite; },
		set: function(newValue) { ConditionDefinitionsConditionClass.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Severity, {
		get: function() { return ConditionDefinitionsConditionClass.Severity; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Severity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Criticality, {
		get: function() { return ConditionDefinitionsConditionClass.Criticality; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Criticality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Stage, {
		get: function() { return ConditionDefinitionsConditionClass.Stage; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionClass, ConditionDefinitionsConditionClass.Observation, {
		get: function() { return ConditionDefinitionsConditionClass.Observation; },
		set: function(newValue) { ConditionDefinitionsConditionClass.Observation = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer/allOf/2 */
	var OncologyDefinitionsBreastCancerAllOf2Class = classes.OncologyDefinitionsBreastCancerAllOf2 = function OncologyDefinitionsBreastCancerAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerAllOf2Class)) return new OncologyDefinitionsBreastCancerAllOf2Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.Stage !== "undefined") {
			this.Stage = value.Stage;
		}
		if (this.Stage && !Array.isArray(this.Stage) && this.Stage) {
			this.Stage = new classes.ConditionDefinitionsStage(this.Stage);
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (this.BodySite && !Array.isArray(this.BodySite) && this.BodySite) {
			this.BodySite = new classes.CoreDefinitionsBodySite(this.BodySite);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsBreastCancerAllOf2Class.prototype.constructor = OncologyDefinitionsBreastCancerAllOf2Class;
	OncologyDefinitionsBreastCancerAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer/allOf/2";
	OncologyDefinitionsBreastCancerAllOf2Class.links = {};
	OncologyDefinitionsBreastCancerAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer/allOf/2"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("Category" in value) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("Stage" in value) {
				errors = errors.concat(classes.ConditionDefinitionsStage.validationErrors(value.Stage, dataPath + "/Stage", missing));
			}
			if ("BodySite" in value) {
				errors = errors.concat(classes.CoreDefinitionsBodySite.validationErrors(value.BodySite, dataPath + "/BodySite", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancer/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerAllOf2Class, OncologyDefinitionsBreastCancerAllOf2Class.SpecificType, {
		get: function() { return OncologyDefinitionsBreastCancerAllOf2Class.SpecificType; },
		set: function(newValue) { OncologyDefinitionsBreastCancerAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerAllOf2Class, OncologyDefinitionsBreastCancerAllOf2Class.Category, {
		get: function() { return OncologyDefinitionsBreastCancerAllOf2Class.Category; },
		set: function(newValue) { OncologyDefinitionsBreastCancerAllOf2Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerAllOf2Class, OncologyDefinitionsBreastCancerAllOf2Class.Stage, {
		get: function() { return OncologyDefinitionsBreastCancerAllOf2Class.Stage; },
		set: function(newValue) { OncologyDefinitionsBreastCancerAllOf2Class.Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerAllOf2Class, OncologyDefinitionsBreastCancerAllOf2Class.BodySite, {
		get: function() { return OncologyDefinitionsBreastCancerAllOf2Class.BodySite; },
		set: function(newValue) { OncologyDefinitionsBreastCancerAllOf2Class.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/properties/PanelMembers */
	var OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass = classes.OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembers = function OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass)) return new OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.prototype.constructor = OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass;
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/properties/PanelMembers";
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/properties/PanelMembers";
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.links = {};
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/properties/PanelMembers");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerGeneticAnalysisPropertiesPanelMembersClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel */
	var ObservationDefinitionsPanelClass = classes.ObservationDefinitionsPanel = function ObservationDefinitionsPanelClass(value) {
		if (!(this instanceof ObservationDefinitionsPanelClass)) return new ObservationDefinitionsPanelClass(value);
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && this.PanelMembers) {
			this.PanelMembers = new classes.ObservationDefinitionsPanelMembers(this.PanelMembers);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	ObservationDefinitionsPanelClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	ObservationDefinitionsPanelClass.prototype.constructor = ObservationDefinitionsPanelClass;
	ObservationDefinitionsPanelClass.description = "A grouped set of related observations, frequently captured at the same time. An example is a complete blood count (CBC), with separate observations for hemoglobin, hematocrit, etc. Could represent the content of a diagnostic report, such as a pathology report. Typically the Category and Reason are not given for individual observations that are part of the panel, but rather given at the level of the panel itself. The panel and all its sub-observations share the same metadata (provenance).";
	ObservationDefinitionsPanelClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel";
	ObservationDefinitionsPanelClass.links = {};
	ObservationDefinitionsPanelClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsPanelAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsPanelClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsPanelClass, ObservationDefinitionsPanelClass.PanelMembers, {
		get: function() { return ObservationDefinitionsPanelClass.PanelMembers; },
		set: function(newValue) { ObservationDefinitionsPanelClass.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2 */
	var OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class = classes.OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2 = function OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class)) return new OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class(value);
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && typeof this.PanelMembers === "object") {
			this.PanelMembers = new classes.OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembers(this.PanelMembers);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.prototype.constructor = OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class;
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2";
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.links = {};
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2"});
		} else if (typeof value === "object") {
			if ("PanelMembers" in value) {
				errors = errors.concat(classes.OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembers.validationErrors(value.PanelMembers, dataPath + "/PanelMembers", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class, OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.PanelMembers, {
		get: function() { return OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.PanelMembers; },
		set: function(newValue) { OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2Class.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus/allOf/2 */
	var OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class = classes.OncologyDefinitionsBreastCancerReceptorStatusAllOf2 = function OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class)) return new OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.EstrogenReceptorStatus !== "undefined") {
			this.EstrogenReceptorStatus = value.EstrogenReceptorStatus;
		}
		if (this.EstrogenReceptorStatus && !Array.isArray(this.EstrogenReceptorStatus) && typeof this.EstrogenReceptorStatus === "object") {
			this.EstrogenReceptorStatus = new classes.OncologyDefinitionsEstrogenReceptorStatus(this.EstrogenReceptorStatus);
		}
		if (typeof value.ProgesteroneReceptorStatus !== "undefined") {
			this.ProgesteroneReceptorStatus = value.ProgesteroneReceptorStatus;
		}
		if (this.ProgesteroneReceptorStatus && !Array.isArray(this.ProgesteroneReceptorStatus) && typeof this.ProgesteroneReceptorStatus === "object") {
			this.ProgesteroneReceptorStatus = new classes.OncologyDefinitionsProgesteroneReceptorStatus(this.ProgesteroneReceptorStatus);
		}
		if (typeof value.HumanEpiduralGrowthFactorReceptor2Status !== "undefined") {
			this.HumanEpiduralGrowthFactorReceptor2Status = value.HumanEpiduralGrowthFactorReceptor2Status;
		}
		if (this.HumanEpiduralGrowthFactorReceptor2Status && !Array.isArray(this.HumanEpiduralGrowthFactorReceptor2Status) && typeof this.HumanEpiduralGrowthFactorReceptor2Status === "object") {
			this.HumanEpiduralGrowthFactorReceptor2Status = new classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2Status(this.HumanEpiduralGrowthFactorReceptor2Status);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.prototype.constructor = OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class;
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus/allOf/2";
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.links = {};
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus/allOf/2"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("EstrogenReceptorStatus" in value) {
				errors = errors.concat(classes.OncologyDefinitionsEstrogenReceptorStatus.validationErrors(value.EstrogenReceptorStatus, dataPath + "/EstrogenReceptorStatus", missing));
			}
			if ("ProgesteroneReceptorStatus" in value) {
				errors = errors.concat(classes.OncologyDefinitionsProgesteroneReceptorStatus.validationErrors(value.ProgesteroneReceptorStatus, dataPath + "/ProgesteroneReceptorStatus", missing));
			}
			if ("HumanEpiduralGrowthFactorReceptor2Status" in value) {
				errors = errors.concat(classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2Status.validationErrors(value.HumanEpiduralGrowthFactorReceptor2Status, dataPath + "/HumanEpiduralGrowthFactorReceptor2Status", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerReceptorStatus/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class, OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.SpecificType, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.SpecificType; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class, OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.EstrogenReceptorStatus, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.EstrogenReceptorStatus; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.EstrogenReceptorStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class, OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.ProgesteroneReceptorStatus, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.ProgesteroneReceptorStatus; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.ProgesteroneReceptorStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class, OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.HumanEpiduralGrowthFactorReceptor2Status, {
		get: function() { return OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.HumanEpiduralGrowthFactorReceptor2Status; },
		set: function(newValue) { OncologyDefinitionsBreastCancerReceptorStatusAllOf2Class.HumanEpiduralGrowthFactorReceptor2Status = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept */
	var CoreDefinitionsCodeableConceptClass = classes.CoreDefinitionsCodeableConcept = function CoreDefinitionsCodeableConceptClass(value) {
		if (!(this instanceof CoreDefinitionsCodeableConceptClass)) return new CoreDefinitionsCodeableConceptClass(value);
		if (typeof value.Coding !== "undefined") {
			this.Coding = value.Coding;
		}
		if (typeof value.DisplayText !== "undefined") {
			this.DisplayText = value.DisplayText;
		}
		if (this.DisplayText && !Array.isArray(this.DisplayText) && this.DisplayText) {
			this.DisplayText = new classes.CoreDefinitionsDisplayText(this.DisplayText);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodeableConceptClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodeableConceptClass.prototype.constructor = CoreDefinitionsCodeableConceptClass;
	CoreDefinitionsCodeableConceptClass.description = "A set of codes drawn from different coding systems, representing the same concept.";
	CoreDefinitionsCodeableConceptClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept";
	CoreDefinitionsCodeableConceptClass.links = {};
	CoreDefinitionsCodeableConceptClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		} else if (typeof value === "object") {
			if ("Coding" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConceptPropertiesCoding.validationErrors(value.Coding, dataPath + "/Coding", missing));
			}
			if ("DisplayText" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayText.validationErrors(value.DisplayText, dataPath + "/DisplayText", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept"});
		}
		return errors;
	}
	CoreDefinitionsCodeableConceptClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeableConceptClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.Coding, {
		get: function() { return CoreDefinitionsCodeableConceptClass.Coding; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.Coding = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodeableConceptClass, CoreDefinitionsCodeableConceptClass.DisplayText, {
		get: function() { return CoreDefinitionsCodeableConceptClass.DisplayText; },
		set: function(newValue) { CoreDefinitionsCodeableConceptClass.DisplayText = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex */
	var OncologyDefinitionsKi67LabelingIndexClass = classes.OncologyDefinitionsKi67LabelingIndex = function OncologyDefinitionsKi67LabelingIndexClass(value) {
		if (!(this instanceof OncologyDefinitionsKi67LabelingIndexClass)) return new OncologyDefinitionsKi67LabelingIndexClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsKi67LabelingIndexClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsKi67LabelingIndexClass.prototype.constructor = OncologyDefinitionsKi67LabelingIndexClass;
	OncologyDefinitionsKi67LabelingIndexClass.description = "Ki-67 is a protein phosphatase whose expression is strongly associated with cell proliferation and encoded by the MKI67 gene. The Ki67 labeling index is the fraction of Ki-67-positive cells to total cells in a tumor specimen and may be useful for determining prognosis with respect to survival and disease recurrence. The more positive cells there are, the more quickly they are dividing and forming new cells.\tReferenceRange: Low <10, Intermediate 10-20, >20 High\nConcepts: http://ncimeta.nci.nih.gov:C4049944";
	OncologyDefinitionsKi67LabelingIndexClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex";
	OncologyDefinitionsKi67LabelingIndexClass.links = {};
	OncologyDefinitionsKi67LabelingIndexClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsKi67LabelingIndexAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsKi67LabelingIndexClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsKi67LabelingIndexClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsKi67LabelingIndexClass, OncologyDefinitionsKi67LabelingIndexClass.Value, {
		get: function() { return OncologyDefinitionsKi67LabelingIndexClass.Value; },
		set: function(newValue) { OncologyDefinitionsKi67LabelingIndexClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction */
	var OncologyDefinitionsSPhaseFractionClass = classes.OncologyDefinitionsSPhaseFraction = function OncologyDefinitionsSPhaseFractionClass(value) {
		if (!(this instanceof OncologyDefinitionsSPhaseFractionClass)) return new OncologyDefinitionsSPhaseFractionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsSPhaseFractionClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsSPhaseFractionClass.prototype.constructor = OncologyDefinitionsSPhaseFractionClass;
	OncologyDefinitionsSPhaseFractionClass.description = "An expression of the number of mitoses found in a stated number of cells. The S-phase fraction number tells you what percentage of cells in the tissue sample are in the process of copying their genetic information (DNA). This S-phase, short for synthesis phase, happens just before a cell divides into two new cells. ReferenceRange: Low <6, Intermediate 6-10, >10 High.\nConcepts: http://ncimeta.nci.nih.gov:C0812425";
	OncologyDefinitionsSPhaseFractionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction";
	OncologyDefinitionsSPhaseFractionClass.links = {};
	OncologyDefinitionsSPhaseFractionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsSPhaseFractionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsSPhaseFractionClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsSPhaseFractionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsSPhaseFractionClass, OncologyDefinitionsSPhaseFractionClass.Value, {
		get: function() { return OncologyDefinitionsSPhaseFractionClass.Value; },
		set: function(newValue) { OncologyDefinitionsSPhaseFractionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation */
	var ObservationDefinitionsObservationClass = classes.ObservationDefinitionsObservation = function ObservationDefinitionsObservationClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationClass)) return new ObservationDefinitionsObservationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsObservationPropertiesValue(this.Value);
		}
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (this.BodySite && !Array.isArray(this.BodySite) && this.BodySite) {
			this.BodySite = new classes.CoreDefinitionsBodySite(this.BodySite);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (this.Reason && !Array.isArray(this.Reason) && this.Reason) {
			this.Reason = new classes.CoreDefinitionsReason(this.Reason);
		}
		if (typeof value.AssociatedStudy !== "undefined") {
			this.AssociatedStudy = value.AssociatedStudy;
		}
		if (this.AssociatedStudy && !Array.isArray(this.AssociatedStudy) && this.AssociatedStudy) {
			this.AssociatedStudy = new classes.ObservationDefinitionsAssociatedStudy(this.AssociatedStudy);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status) && this.Status) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && typeof this.NonOccurrenceModifier === "object") {
			this.NonOccurrenceModifier = new classes.ObservationDefinitionsObservationPropertiesNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.AssertionNegationModifier !== "undefined") {
			this.AssertionNegationModifier = value.AssertionNegationModifier;
		}
		if (this.AssertionNegationModifier && !Array.isArray(this.AssertionNegationModifier) && this.AssertionNegationModifier) {
			this.AssertionNegationModifier = new classes.BaseDefinitionsAssertionNegationModifier(this.AssertionNegationModifier);
		}
		if (typeof value.ObservationQualifier !== "undefined") {
			this.ObservationQualifier = value.ObservationQualifier;
		}
		if (typeof value.DataAbsentReason !== "undefined") {
			this.DataAbsentReason = value.DataAbsentReason;
		}
		if (this.DataAbsentReason && !Array.isArray(this.DataAbsentReason) && this.DataAbsentReason) {
			this.DataAbsentReason = new classes.ObservationDefinitionsDataAbsentReason(this.DataAbsentReason);
		}
		if (typeof value.shr_observation_ClinicallyRelevantTime !== "undefined") {
			this.shr_observation_ClinicallyRelevantTime = value.shr_observation_ClinicallyRelevantTime;
		}
		if (this.shr_observation_ClinicallyRelevantTime && !Array.isArray(this.shr_observation_ClinicallyRelevantTime) && this.shr_observation_ClinicallyRelevantTime) {
			this.shr_observation_ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.shr_observation_ClinicallyRelevantTime);
		}
		if (typeof value.ReferenceRange !== "undefined") {
			this.ReferenceRange = value.ReferenceRange;
		}
		if (typeof value.Interpretation !== "undefined") {
			this.Interpretation = value.Interpretation;
		}
		if (this.Interpretation && !Array.isArray(this.Interpretation) && this.Interpretation) {
			this.Interpretation = new classes.LabDefinitionsInterpretation(this.Interpretation);
		}
		if (typeof value.Comment !== "undefined") {
			this.Comment = value.Comment;
		}
		if (this.Comment && !Array.isArray(this.Comment) && this.Comment) {
			this.Comment = new classes.CoreDefinitionsComment(this.Comment);
		}
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && this.PanelMembers) {
			this.PanelMembers = new classes.ObservationDefinitionsPanelMembers(this.PanelMembers);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		if (typeof value.Setting !== "undefined") {
			this.Setting = value.Setting;
		}
		if (typeof value.Location !== "undefined") {
			this.Location = value.Location;
		}
		
		BaseDefinitionsActionClass.apply(this, arguments);
	};
	ObservationDefinitionsObservationClass.prototype = Object.create(BaseDefinitionsActionClass.prototype);
	ObservationDefinitionsObservationClass.prototype.constructor = ObservationDefinitionsObservationClass;
	ObservationDefinitionsObservationClass.description = "An Observation represents evidence, both subjective and objective. Observation includes any information about a subject that results from an act of observing, measuring, or evaluation. The focus of an observation can include the subject's behavior, physiological state, health state, functional status, environment, exposures to substances, etc. An Observation contains information about the act of observing or measuring, and the result of the observation. The method of observing can vary widely, from questioning, physical examination, formal assessment vehicles, laboratory tests, imaging procedures, etc. Patient-reported information is also considered an observation, where subject and observer are the same individual.\nConcepts: http://ncimeta.nci.nih.gov:C1554188";
	ObservationDefinitionsObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation";
	ObservationDefinitionsObservationClass.links = {};
	ObservationDefinitionsObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsAction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Value, {
		get: function() { return ObservationDefinitionsObservationClass.Value; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.SpecificType, {
		get: function() { return ObservationDefinitionsObservationClass.SpecificType; },
		set: function(newValue) { ObservationDefinitionsObservationClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Category, {
		get: function() { return ObservationDefinitionsObservationClass.Category; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.BodySite, {
		get: function() { return ObservationDefinitionsObservationClass.BodySite; },
		set: function(newValue) { ObservationDefinitionsObservationClass.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Reason, {
		get: function() { return ObservationDefinitionsObservationClass.Reason; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.AssociatedStudy, {
		get: function() { return ObservationDefinitionsObservationClass.AssociatedStudy; },
		set: function(newValue) { ObservationDefinitionsObservationClass.AssociatedStudy = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Status, {
		get: function() { return ObservationDefinitionsObservationClass.Status; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.NonOccurrenceModifier, {
		get: function() { return ObservationDefinitionsObservationClass.NonOccurrenceModifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Method, {
		get: function() { return ObservationDefinitionsObservationClass.Method; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.AssertionNegationModifier, {
		get: function() { return ObservationDefinitionsObservationClass.AssertionNegationModifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.AssertionNegationModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.ObservationQualifier, {
		get: function() { return ObservationDefinitionsObservationClass.ObservationQualifier; },
		set: function(newValue) { ObservationDefinitionsObservationClass.ObservationQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.DataAbsentReason, {
		get: function() { return ObservationDefinitionsObservationClass.DataAbsentReason; },
		set: function(newValue) { ObservationDefinitionsObservationClass.DataAbsentReason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime, {
		get: function() { return ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime; },
		set: function(newValue) { ObservationDefinitionsObservationClass.shr_observation_ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.ReferenceRange, {
		get: function() { return ObservationDefinitionsObservationClass.ReferenceRange; },
		set: function(newValue) { ObservationDefinitionsObservationClass.ReferenceRange = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Interpretation, {
		get: function() { return ObservationDefinitionsObservationClass.Interpretation; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Interpretation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Comment, {
		get: function() { return ObservationDefinitionsObservationClass.Comment; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Comment = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.PanelMembers, {
		get: function() { return ObservationDefinitionsObservationClass.PanelMembers; },
		set: function(newValue) { ObservationDefinitionsObservationClass.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Participant, {
		get: function() { return ObservationDefinitionsObservationClass.Participant; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Setting, {
		get: function() { return ObservationDefinitionsObservationClass.Setting; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Setting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationClass, ObservationDefinitionsObservationClass.Location, {
		get: function() { return ObservationDefinitionsObservationClass.Location; },
		set: function(newValue) { ObservationDefinitionsObservationClass.Location = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2 */
	var OncologyDefinitionsCancerGrowthPotentialAllOf2Class = classes.OncologyDefinitionsCancerGrowthPotentialAllOf2 = function OncologyDefinitionsCancerGrowthPotentialAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsCancerGrowthPotentialAllOf2Class)) return new OncologyDefinitionsCancerGrowthPotentialAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Ki_67LabelingIndex !== "undefined") {
			this.Ki_67LabelingIndex = value.Ki_67LabelingIndex;
		}
		if (this.Ki_67LabelingIndex && !Array.isArray(this.Ki_67LabelingIndex) && typeof this.Ki_67LabelingIndex === "object") {
			this.Ki_67LabelingIndex = new classes.OncologyDefinitionsKi67LabelingIndex(this.Ki_67LabelingIndex);
		}
		if (typeof value.S_PhaseFraction !== "undefined") {
			this.S_PhaseFraction = value.S_PhaseFraction;
		}
		if (this.S_PhaseFraction && !Array.isArray(this.S_PhaseFraction) && typeof this.S_PhaseFraction === "object") {
			this.S_PhaseFraction = new classes.OncologyDefinitionsSPhaseFraction(this.S_PhaseFraction);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.prototype.constructor = OncologyDefinitionsCancerGrowthPotentialAllOf2Class;
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2";
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.links = {};
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2"});
			}
			if ("Ki-67LabelingIndex" in value) {
				errors = errors.concat(classes.OncologyDefinitionsKi67LabelingIndex.validationErrors(value.Ki_67LabelingIndex, dataPath + "/Ki-67LabelingIndex", missing));
			}
			if ("S-PhaseFraction" in value) {
				errors = errors.concat(classes.OncologyDefinitionsSPhaseFraction.validationErrors(value.S-PhaseFraction, dataPath + "/S-PhaseFraction", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerGrowthPotential/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsCancerGrowthPotentialAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCancerGrowthPotentialAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialAllOf2Class, OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialAllOf2Class, OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Ki_67LabelingIndex, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Ki_67LabelingIndex; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialAllOf2Class.Ki_67LabelingIndex = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerGrowthPotentialAllOf2Class, OncologyDefinitionsCancerGrowthPotentialAllOf2Class.S_PhaseFraction, {
		get: function() { return OncologyDefinitionsCancerGrowthPotentialAllOf2Class.S_PhaseFraction; },
		set: function(newValue) { OncologyDefinitionsCancerGrowthPotentialAllOf2Class.S_PhaseFraction = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision */
	var OncologyDefinitionsLymphaticSystemSubdivisionClass = classes.OncologyDefinitionsLymphaticSystemSubdivision = function OncologyDefinitionsLymphaticSystemSubdivisionClass(value) {
		if (!(this instanceof OncologyDefinitionsLymphaticSystemSubdivisionClass)) return new OncologyDefinitionsLymphaticSystemSubdivisionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		CoreDefinitionsBodySiteClass.apply(this, arguments);
	};
	OncologyDefinitionsLymphaticSystemSubdivisionClass.prototype = Object.create(CoreDefinitionsBodySiteClass.prototype);
	OncologyDefinitionsLymphaticSystemSubdivisionClass.prototype.constructor = OncologyDefinitionsLymphaticSystemSubdivisionClass;
	OncologyDefinitionsLymphaticSystemSubdivisionClass.description = "A lymph node area or nodal group; a subdivision of the entire lymphatic system. For breast cancer, this includes 5 areas: internal mammary lymph nodes, axillary lymph nodes level I, II, and III, and the supraclavicular lymph nodes.";
	OncologyDefinitionsLymphaticSystemSubdivisionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision";
	OncologyDefinitionsLymphaticSystemSubdivisionClass.links = {};
	OncologyDefinitionsLymphaticSystemSubdivisionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsBodySite.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsLymphaticSystemSubdivisionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsLymphaticSystemSubdivisionClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsLymphaticSystemSubdivisionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsLymphaticSystemSubdivisionClass, OncologyDefinitionsLymphaticSystemSubdivisionClass.Value, {
		get: function() { return OncologyDefinitionsLymphaticSystemSubdivisionClass.Value; },
		set: function(newValue) { OncologyDefinitionsLymphaticSystemSubdivisionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize */
	var OncologyDefinitionsLargestLymphNodeSizeClass = classes.OncologyDefinitionsLargestLymphNodeSize = function OncologyDefinitionsLargestLymphNodeSizeClass(value) {
		if (!(this instanceof OncologyDefinitionsLargestLymphNodeSizeClass)) return new OncologyDefinitionsLargestLymphNodeSizeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsLargestLymphNodeSizeClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsLargestLymphNodeSizeClass.prototype.constructor = OncologyDefinitionsLargestLymphNodeSizeClass;
	OncologyDefinitionsLargestLymphNodeSizeClass.description = "The largest dimension of the largest lymph node invaded by cancer cells.\nConcepts: http://ncimeta.nci.nih.gov:C1285847";
	OncologyDefinitionsLargestLymphNodeSizeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize";
	OncologyDefinitionsLargestLymphNodeSizeClass.links = {};
	OncologyDefinitionsLargestLymphNodeSizeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsLargestLymphNodeSizeAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsLargestLymphNodeSizeClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsLargestLymphNodeSizeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsLargestLymphNodeSizeClass, OncologyDefinitionsLargestLymphNodeSizeClass.Value, {
		get: function() { return OncologyDefinitionsLargestLymphNodeSizeClass.Value; },
		set: function(newValue) { OncologyDefinitionsLargestLymphNodeSizeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved */
	var OncologyDefinitionsNumberOfLymphNodesInvolvedClass = classes.OncologyDefinitionsNumberOfLymphNodesInvolved = function OncologyDefinitionsNumberOfLymphNodesInvolvedClass(value) {
		if (!(this instanceof OncologyDefinitionsNumberOfLymphNodesInvolvedClass)) return new OncologyDefinitionsNumberOfLymphNodesInvolvedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.prototype.constructor = OncologyDefinitionsNumberOfLymphNodesInvolvedClass;
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.description = "A count of lymph nodes invaded by cancer cells of those examined.";
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved";
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.links = {};
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsNumberOfLymphNodesInvolvedClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNumberOfLymphNodesInvolvedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNumberOfLymphNodesInvolvedClass, OncologyDefinitionsNumberOfLymphNodesInvolvedClass.Value, {
		get: function() { return OncologyDefinitionsNumberOfLymphNodesInvolvedClass.Value; },
		set: function(newValue) { OncologyDefinitionsNumberOfLymphNodesInvolvedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement */
	var OncologyDefinitionsDegreeOfLymphaticInvolvementClass = classes.OncologyDefinitionsDegreeOfLymphaticInvolvement = function OncologyDefinitionsDegreeOfLymphaticInvolvementClass(value) {
		if (!(this instanceof OncologyDefinitionsDegreeOfLymphaticInvolvementClass)) return new OncologyDefinitionsDegreeOfLymphaticInvolvementClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.prototype.constructor = OncologyDefinitionsDegreeOfLymphaticInvolvementClass;
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.description = "Assessment of how much cancer is in a lymph node.";
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement";
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.links = {};
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsDegreeOfLymphaticInvolvementClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsDegreeOfLymphaticInvolvementClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsDegreeOfLymphaticInvolvementClass, OncologyDefinitionsDegreeOfLymphaticInvolvementClass.Value, {
		get: function() { return OncologyDefinitionsDegreeOfLymphaticInvolvementClass.Value; },
		set: function(newValue) { OncologyDefinitionsDegreeOfLymphaticInvolvementClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2 */
	var OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class = classes.OncologyDefinitionsCancerLymphaticInvolvementAllOf2 = function OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class)) return new OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.LymphaticSystemSubdivision !== "undefined") {
			this.LymphaticSystemSubdivision = value.LymphaticSystemSubdivision;
		}
		if (this.LymphaticSystemSubdivision && !Array.isArray(this.LymphaticSystemSubdivision) && typeof this.LymphaticSystemSubdivision === "object") {
			this.LymphaticSystemSubdivision = new classes.OncologyDefinitionsLymphaticSystemSubdivision(this.LymphaticSystemSubdivision);
		}
		if (typeof value.LargestLymphNodeSize !== "undefined") {
			this.LargestLymphNodeSize = value.LargestLymphNodeSize;
		}
		if (this.LargestLymphNodeSize && !Array.isArray(this.LargestLymphNodeSize) && typeof this.LargestLymphNodeSize === "object") {
			this.LargestLymphNodeSize = new classes.OncologyDefinitionsLargestLymphNodeSize(this.LargestLymphNodeSize);
		}
		if (typeof value.NumberOfLymphNodesInvolved !== "undefined") {
			this.NumberOfLymphNodesInvolved = value.NumberOfLymphNodesInvolved;
		}
		if (this.NumberOfLymphNodesInvolved && !Array.isArray(this.NumberOfLymphNodesInvolved) && typeof this.NumberOfLymphNodesInvolved === "object") {
			this.NumberOfLymphNodesInvolved = new classes.OncologyDefinitionsNumberOfLymphNodesInvolved(this.NumberOfLymphNodesInvolved);
		}
		if (typeof value.DegreeOfLymphaticInvolvement !== "undefined") {
			this.DegreeOfLymphaticInvolvement = value.DegreeOfLymphaticInvolvement;
		}
		if (this.DegreeOfLymphaticInvolvement && !Array.isArray(this.DegreeOfLymphaticInvolvement) && typeof this.DegreeOfLymphaticInvolvement === "object") {
			this.DegreeOfLymphaticInvolvement = new classes.OncologyDefinitionsDegreeOfLymphaticInvolvement(this.DegreeOfLymphaticInvolvement);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.prototype.constructor = OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class;
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2";
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.links = {};
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2"});
			}
			if ("LymphaticSystemSubdivision" in value) {
				errors = errors.concat(classes.OncologyDefinitionsLymphaticSystemSubdivision.validationErrors(value.LymphaticSystemSubdivision, dataPath + "/LymphaticSystemSubdivision", missing));
			} else {
				errors.push({code: 302, params: {key: "LymphaticSystemSubdivision"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2"});
			}
			if ("LargestLymphNodeSize" in value) {
				errors = errors.concat(classes.OncologyDefinitionsLargestLymphNodeSize.validationErrors(value.LargestLymphNodeSize, dataPath + "/LargestLymphNodeSize", missing));
			}
			if ("NumberOfLymphNodesInvolved" in value) {
				errors = errors.concat(classes.OncologyDefinitionsNumberOfLymphNodesInvolved.validationErrors(value.NumberOfLymphNodesInvolved, dataPath + "/NumberOfLymphNodesInvolved", missing));
			}
			if ("DegreeOfLymphaticInvolvement" in value) {
				errors = errors.concat(classes.OncologyDefinitionsDegreeOfLymphaticInvolvement.validationErrors(value.DegreeOfLymphaticInvolvement, dataPath + "/DegreeOfLymphaticInvolvement", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/CancerLymphaticInvolvement/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class, OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class, OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LymphaticSystemSubdivision, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LymphaticSystemSubdivision; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LymphaticSystemSubdivision = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class, OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LargestLymphNodeSize, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LargestLymphNodeSize; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.LargestLymphNodeSize = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class, OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.NumberOfLymphNodesInvolved, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.NumberOfLymphNodesInvolved; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.NumberOfLymphNodesInvolved = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class, OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.DegreeOfLymphaticInvolvement, {
		get: function() { return OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.DegreeOfLymphaticInvolvement; },
		set: function(newValue) { OncologyDefinitionsCancerLymphaticInvolvementAllOf2Class.DegreeOfLymphaticInvolvement = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType */
	var OncologyDefinitionsReceptorTypeClass = classes.OncologyDefinitionsReceptorType = function OncologyDefinitionsReceptorTypeClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorTypeClass)) return new OncologyDefinitionsReceptorTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorTypeClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorTypeClass.prototype.constructor = OncologyDefinitionsReceptorTypeClass;
	OncologyDefinitionsReceptorTypeClass.description = "A protein located on the cell surface, or in the cytoplasm, that binds to a specific signaling factor, such as a hormone, antigen, or neurotransmitter, causing a conformational and functional change in the receptor molecule. The ligand-bound receptor then alters its interaction with target molecules, which leads to changes in cellular physiology through modification of the activity of one or more signal transduction pathways.\nConcepts: http://ncimeta.nci.nih.gov:C0597357";
	OncologyDefinitionsReceptorTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType";
	OncologyDefinitionsReceptorTypeClass.links = {};
	OncologyDefinitionsReceptorTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorType"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorTypeClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorTypeClass, OncologyDefinitionsReceptorTypeClass.Value, {
		get: function() { return OncologyDefinitionsReceptorTypeClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus/allOf/2 */
	var OncologyDefinitionsEstrogenReceptorStatusAllOf2Class = classes.OncologyDefinitionsEstrogenReceptorStatusAllOf2 = function OncologyDefinitionsEstrogenReceptorStatusAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsEstrogenReceptorStatusAllOf2Class)) return new OncologyDefinitionsEstrogenReceptorStatusAllOf2Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.prototype.constructor = OncologyDefinitionsEstrogenReceptorStatusAllOf2Class;
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus/allOf/2";
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.links = {};
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus/allOf/2"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("ReceptorType" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorType.validationErrors(value.ReceptorType, dataPath + "/ReceptorType", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/EstrogenReceptorStatus/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsEstrogenReceptorStatusAllOf2Class, OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.SpecificType, {
		get: function() { return OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.SpecificType; },
		set: function(newValue) { OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsEstrogenReceptorStatusAllOf2Class, OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.ReceptorType, {
		get: function() { return OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsEstrogenReceptorStatusAllOf2Class.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore */
	var OncologyDefinitionsTubuleFormationScoreClass = classes.OncologyDefinitionsTubuleFormationScore = function OncologyDefinitionsTubuleFormationScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsTubuleFormationScoreClass)) return new OncologyDefinitionsTubuleFormationScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsTubuleFormationScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsTubuleFormationScoreClass.prototype.constructor = OncologyDefinitionsTubuleFormationScoreClass;
	OncologyDefinitionsTubuleFormationScoreClass.description = "A comparison between structures formed by the tumor cells as opposed to those formed by normal cells. Scored 1 to 3 with 3 being the most abnormal.\nConcepts: http://snomed.info/sct:371470008";
	OncologyDefinitionsTubuleFormationScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore";
	OncologyDefinitionsTubuleFormationScoreClass.links = {};
	OncologyDefinitionsTubuleFormationScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTubuleFormationScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTubuleFormationScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTubuleFormationScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTubuleFormationScoreClass, OncologyDefinitionsTubuleFormationScoreClass.Value, {
		get: function() { return OncologyDefinitionsTubuleFormationScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsTubuleFormationScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore */
	var OncologyDefinitionsNuclearPleomorphismScoreClass = classes.OncologyDefinitionsNuclearPleomorphismScore = function OncologyDefinitionsNuclearPleomorphismScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsNuclearPleomorphismScoreClass)) return new OncologyDefinitionsNuclearPleomorphismScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsNuclearPleomorphismScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsNuclearPleomorphismScoreClass.prototype.constructor = OncologyDefinitionsNuclearPleomorphismScoreClass;
	OncologyDefinitionsNuclearPleomorphismScoreClass.description = "How large and varied the nuclei of the tumor cells are. Scored 1 to 3, with 3 being the most pleomorphism.";
	OncologyDefinitionsNuclearPleomorphismScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore";
	OncologyDefinitionsNuclearPleomorphismScoreClass.links = {};
	OncologyDefinitionsNuclearPleomorphismScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsNuclearPleomorphismScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsNuclearPleomorphismScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNuclearPleomorphismScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNuclearPleomorphismScoreClass, OncologyDefinitionsNuclearPleomorphismScoreClass.Value, {
		get: function() { return OncologyDefinitionsNuclearPleomorphismScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsNuclearPleomorphismScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore */
	var OncologyDefinitionsMitoticCountScoreClass = classes.OncologyDefinitionsMitoticCountScore = function OncologyDefinitionsMitoticCountScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsMitoticCountScoreClass)) return new OncologyDefinitionsMitoticCountScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsMitoticCountScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsMitoticCountScoreClass.prototype.constructor = OncologyDefinitionsMitoticCountScoreClass;
	OncologyDefinitionsMitoticCountScoreClass.description = "How fast the tumor cells are growing and dividing, determined from the number of mitotic cells present. Scored 1 to 3, with 3 being the most mitotic cells.\nConcepts: http://snomed.info/sct:371472000";
	OncologyDefinitionsMitoticCountScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore";
	OncologyDefinitionsMitoticCountScoreClass.links = {};
	OncologyDefinitionsMitoticCountScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsMitoticCountScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsMitoticCountScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsMitoticCountScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsMitoticCountScoreClass, OncologyDefinitionsMitoticCountScoreClass.Value, {
		get: function() { return OncologyDefinitionsMitoticCountScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsMitoticCountScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2 */
	var OncologyDefinitionsHistologicGradeAllOf2Class = classes.OncologyDefinitionsHistologicGradeAllOf2 = function OncologyDefinitionsHistologicGradeAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsHistologicGradeAllOf2Class)) return new OncologyDefinitionsHistologicGradeAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.TubuleFormationScore !== "undefined") {
			this.TubuleFormationScore = value.TubuleFormationScore;
		}
		if (this.TubuleFormationScore && !Array.isArray(this.TubuleFormationScore) && typeof this.TubuleFormationScore === "object") {
			this.TubuleFormationScore = new classes.OncologyDefinitionsTubuleFormationScore(this.TubuleFormationScore);
		}
		if (typeof value.NuclearPleomorphismScore !== "undefined") {
			this.NuclearPleomorphismScore = value.NuclearPleomorphismScore;
		}
		if (this.NuclearPleomorphismScore && !Array.isArray(this.NuclearPleomorphismScore) && typeof this.NuclearPleomorphismScore === "object") {
			this.NuclearPleomorphismScore = new classes.OncologyDefinitionsNuclearPleomorphismScore(this.NuclearPleomorphismScore);
		}
		if (typeof value.MitoticCountScore !== "undefined") {
			this.MitoticCountScore = value.MitoticCountScore;
		}
		if (this.MitoticCountScore && !Array.isArray(this.MitoticCountScore) && typeof this.MitoticCountScore === "object") {
			this.MitoticCountScore = new classes.OncologyDefinitionsMitoticCountScore(this.MitoticCountScore);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsHistologicGradeAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsHistologicGradeAllOf2Class.prototype.constructor = OncologyDefinitionsHistologicGradeAllOf2Class;
	OncologyDefinitionsHistologicGradeAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2";
	OncologyDefinitionsHistologicGradeAllOf2Class.links = {};
	OncologyDefinitionsHistologicGradeAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2"});
			}
			if ("TubuleFormationScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsTubuleFormationScore.validationErrors(value.TubuleFormationScore, dataPath + "/TubuleFormationScore", missing));
			}
			if ("NuclearPleomorphismScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsNuclearPleomorphismScore.validationErrors(value.NuclearPleomorphismScore, dataPath + "/NuclearPleomorphismScore", missing));
			}
			if ("MitoticCountScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsMitoticCountScore.validationErrors(value.MitoticCountScore, dataPath + "/MitoticCountScore", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HistologicGrade/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsHistologicGradeAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsHistologicGradeAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsHistologicGradeAllOf2Class, OncologyDefinitionsHistologicGradeAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsHistologicGradeAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeAllOf2Class, OncologyDefinitionsHistologicGradeAllOf2Class.TubuleFormationScore, {
		get: function() { return OncologyDefinitionsHistologicGradeAllOf2Class.TubuleFormationScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeAllOf2Class.TubuleFormationScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeAllOf2Class, OncologyDefinitionsHistologicGradeAllOf2Class.NuclearPleomorphismScore, {
		get: function() { return OncologyDefinitionsHistologicGradeAllOf2Class.NuclearPleomorphismScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeAllOf2Class.NuclearPleomorphismScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHistologicGradeAllOf2Class, OncologyDefinitionsHistologicGradeAllOf2Class.MitoticCountScore, {
		get: function() { return OncologyDefinitionsHistologicGradeAllOf2Class.MitoticCountScore; },
		set: function(newValue) { OncologyDefinitionsHistologicGradeAllOf2Class.MitoticCountScore = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method */
	var ObservationDefinitionsMethodClass = classes.ObservationDefinitionsMethod = function ObservationDefinitionsMethodClass(value) {
		if (!(this instanceof ObservationDefinitionsMethodClass)) return new ObservationDefinitionsMethodClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsMethodClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsMethodClass.prototype.constructor = ObservationDefinitionsMethodClass;
	ObservationDefinitionsMethodClass.description = "The method of the observation, for example, the specific imaging technical or assessment vehicle.";
	ObservationDefinitionsMethodClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method";
	ObservationDefinitionsMethodClass.links = {};
	ObservationDefinitionsMethodClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Method"});
		}
		return errors;
	}
	ObservationDefinitionsMethodClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsMethodClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsMethodClass, ObservationDefinitionsMethodClass.Value, {
		get: function() { return ObservationDefinitionsMethodClass.Value; },
		set: function(newValue) { ObservationDefinitionsMethodClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status/allOf/2 */
	var OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class = classes.OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2 = function OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class)) return new OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.prototype.constructor = OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class;
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status/allOf/2";
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.links = {};
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status/allOf/2"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("ReceptorType" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorType.validationErrors(value.ReceptorType, dataPath + "/ReceptorType", missing));
			}
			if ("Method" in value) {
				errors = errors.concat(classes.ObservationDefinitionsMethod.validationErrors(value.Method, dataPath + "/Method", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/HumanEpiduralGrowthFactorReceptor2Status/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.SpecificType, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.SpecificType; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.ReceptorType, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class, OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.Method, {
		get: function() { return OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.Method; },
		set: function(newValue) { OncologyDefinitionsHumanEpiduralGrowthFactorReceptor2StatusAllOf2Class.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier */
	var CoreDefinitionsIdentifierClass = classes.CoreDefinitionsIdentifier = function CoreDefinitionsIdentifierClass(value) {
		if (!(this instanceof CoreDefinitionsIdentifierClass)) return new CoreDefinitionsIdentifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsIdentifierClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsIdentifierClass.prototype.constructor = CoreDefinitionsIdentifierClass;
	CoreDefinitionsIdentifierClass.description = "A unique string that identifies a specific person or thing.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	CoreDefinitionsIdentifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier";
	CoreDefinitionsIdentifierClass.links = {};
	CoreDefinitionsIdentifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsIdentifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier"});
		}
		return errors;
	}
	CoreDefinitionsIdentifierClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsIdentifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsIdentifierClass, CoreDefinitionsIdentifierClass.Value, {
		get: function() { return CoreDefinitionsIdentifierClass.Value; },
		set: function(newValue) { CoreDefinitionsIdentifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation */
	var ObservationDefinitionsBodyStructureObservationClass = classes.ObservationDefinitionsBodyStructureObservation = function ObservationDefinitionsBodyStructureObservationClass(value) {
		if (!(this instanceof ObservationDefinitionsBodyStructureObservationClass)) return new ObservationDefinitionsBodyStructureObservationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationClass.apply(this, arguments);
	};
	ObservationDefinitionsBodyStructureObservationClass.prototype = Object.create(ObservationDefinitionsObservationClass.prototype);
	ObservationDefinitionsBodyStructureObservationClass.prototype.constructor = ObservationDefinitionsBodyStructureObservationClass;
	ObservationDefinitionsBodyStructureObservationClass.description = "Observation of the existence (or non-existence) distinct anatomical or pathological morphological feature or organizational pattern, acquired or innate. Examples include tissue types, tumors, and wounds. The observation has a body site that allows the the structure to be located in the body. The observation identifier allows other observations of the same body structure to be related to QualitativeValueScaleVSthis observation and tracked over time.\nConcepts: http://ncimeta.nci.nih.gov:C1268086";
	ObservationDefinitionsBodyStructureObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation";
	ObservationDefinitionsBodyStructureObservationClass.links = {};
	ObservationDefinitionsBodyStructureObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ObservationDefinitionsBodyStructureObservationAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsBodyStructureObservationClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsBodyStructureObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsBodyStructureObservationClass, ObservationDefinitionsBodyStructureObservationClass.Value, {
		get: function() { return ObservationDefinitionsBodyStructureObservationClass.Value; },
		set: function(newValue) { ObservationDefinitionsBodyStructureObservationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2 */
	var OncologyDefinitionsNeoplasmObservationAllOf2Class = classes.OncologyDefinitionsNeoplasmObservationAllOf2 = function OncologyDefinitionsNeoplasmObservationAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsNeoplasmObservationAllOf2Class)) return new OncologyDefinitionsNeoplasmObservationAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Identifier !== "undefined") {
			this.Identifier = value.Identifier;
		}
		if (this.Identifier && !Array.isArray(this.Identifier) && this.Identifier) {
			this.Identifier = new classes.CoreDefinitionsIdentifier(this.Identifier);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsNeoplasmObservationAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsNeoplasmObservationAllOf2Class.prototype.constructor = OncologyDefinitionsNeoplasmObservationAllOf2Class;
	OncologyDefinitionsNeoplasmObservationAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2";
	OncologyDefinitionsNeoplasmObservationAllOf2Class.links = {};
	OncologyDefinitionsNeoplasmObservationAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2"});
			}
			if ("Identifier" in value) {
				errors = errors.concat(classes.CoreDefinitionsIdentifier.validationErrors(value.Identifier, dataPath + "/Identifier", missing));
			}
			if ("Method" in value) {
				errors = errors.concat(classes.ObservationDefinitionsMethod.validationErrors(value.Method, dataPath + "/Method", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NeoplasmObservation/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsNeoplasmObservationAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNeoplasmObservationAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationAllOf2Class, OncologyDefinitionsNeoplasmObservationAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsNeoplasmObservationAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationAllOf2Class, OncologyDefinitionsNeoplasmObservationAllOf2Class.Identifier, {
		get: function() { return OncologyDefinitionsNeoplasmObservationAllOf2Class.Identifier; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationAllOf2Class.Identifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsNeoplasmObservationAllOf2Class, OncologyDefinitionsNeoplasmObservationAllOf2Class.Method, {
		get: function() { return OncologyDefinitionsNeoplasmObservationAllOf2Class.Method; },
		set: function(newValue) { OncologyDefinitionsNeoplasmObservationAllOf2Class.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus/allOf/2 */
	var OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class = classes.OncologyDefinitionsProgesteroneReceptorStatusAllOf2 = function OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class)) return new OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType) && this.ReceptorType) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.prototype.constructor = OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class;
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus/allOf/2";
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.links = {};
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus/allOf/2"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("ReceptorType" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorType.validationErrors(value.ReceptorType, dataPath + "/ReceptorType", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ProgesteroneReceptorStatus/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class, OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.SpecificType, {
		get: function() { return OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.SpecificType; },
		set: function(newValue) { OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class, OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.ReceptorType, {
		get: function() { return OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsProgesteroneReceptorStatusAllOf2Class.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus */
	var AssessmentDefinitionsAssessmentFocusClass = classes.AssessmentDefinitionsAssessmentFocus = function AssessmentDefinitionsAssessmentFocusClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentFocusClass)) return new AssessmentDefinitionsAssessmentFocusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.AssessmentDefinitionsAssessmentFocusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentFocusClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentFocusClass.prototype.constructor = AssessmentDefinitionsAssessmentFocusClass;
	AssessmentDefinitionsAssessmentFocusClass.description = "The topic or target of an analysis or assessment. For example, if the assessment involves the progression of the subject's diabetes, then the AssessmentFocus would be diabetes and the category would be progression. If the investigation involves the toxicity of chemotherapy regimen, the focus would be that regimen and the category would be toxicity.";
	AssessmentDefinitionsAssessmentFocusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus";
	AssessmentDefinitionsAssessmentFocusClass.links = {};
	AssessmentDefinitionsAssessmentFocusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusClass, AssessmentDefinitionsAssessmentFocusClass.Value, {
		get: function() { return AssessmentDefinitionsAssessmentFocusClass.Value; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment */
	var AssessmentDefinitionsAssessmentClass = classes.AssessmentDefinitionsAssessment = function AssessmentDefinitionsAssessmentClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentClass)) return new AssessmentDefinitionsAssessmentClass(value);
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status) && this.Status) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (typeof value.AssessmentResult !== "undefined") {
			this.AssessmentResult = value.AssessmentResult;
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.ClinicallyRelevantTime !== "undefined") {
			this.ClinicallyRelevantTime = value.ClinicallyRelevantTime;
		}
		if (this.ClinicallyRelevantTime && !Array.isArray(this.ClinicallyRelevantTime) && this.ClinicallyRelevantTime) {
			this.ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.ClinicallyRelevantTime);
		}
		if (typeof value.EvidenceQuality !== "undefined") {
			this.EvidenceQuality = value.EvidenceQuality;
		}
		if (this.EvidenceQuality && !Array.isArray(this.EvidenceQuality) && this.EvidenceQuality) {
			this.EvidenceQuality = new classes.AssessmentDefinitionsEvidenceQuality(this.EvidenceQuality);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.Summary !== "undefined") {
			this.Summary = value.Summary;
		}
		if (this.Summary && !Array.isArray(this.Summary) && this.Summary) {
			this.Summary = new classes.CoreDefinitionsSummary(this.Summary);
		}
		
		BaseDefinitionsActionClass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentClass.prototype = Object.create(BaseDefinitionsActionClass.prototype);
	AssessmentDefinitionsAssessmentClass.prototype.constructor = AssessmentDefinitionsAssessmentClass;
	AssessmentDefinitionsAssessmentClass.description = "A conclusion (tentative or final) resulting from synthesis of evidence (one or more observations). An Assessment is a judgment rendered at a point in time. A diagnosis is a type of Assessment that can lead to creation of a Condition.\nConcepts: http://ncimeta.nci.nih.gov:C0220825";
	AssessmentDefinitionsAssessmentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment";
	AssessmentDefinitionsAssessmentClass.links = {};
	AssessmentDefinitionsAssessmentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.BaseDefinitionsAction.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Category, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Category; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Status, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Status; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentFocus, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentFocus; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.AssessmentResult, {
		get: function() { return AssessmentDefinitionsAssessmentClass.AssessmentResult; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.AssessmentResult = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Method, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Method; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime, {
		get: function() { return AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.EvidenceQuality, {
		get: function() { return AssessmentDefinitionsAssessmentClass.EvidenceQuality; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.EvidenceQuality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Evidence, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Evidence; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentClass, AssessmentDefinitionsAssessmentClass.Summary, {
		get: function() { return AssessmentDefinitionsAssessmentClass.Summary; },
		set: function(newValue) { AssessmentDefinitionsAssessmentClass.Summary = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2 */
	var OncologyDefinitionsProgressionAllOf2Class = classes.OncologyDefinitionsProgressionAllOf2 = function OncologyDefinitionsProgressionAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsProgressionAllOf2Class)) return new OncologyDefinitionsProgressionAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (this.Category && !Array.isArray(this.Category) && this.Category) {
			this.Category = new classes.BaseDefinitionsCategory(this.Category);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (this.AssessmentFocus && !Array.isArray(this.AssessmentFocus)) {
			this.AssessmentFocus = new classes.AssessmentDefinitionsAssessmentFocus(this.AssessmentFocus);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsProgressionAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsProgressionAllOf2Class.prototype.constructor = OncologyDefinitionsProgressionAllOf2Class;
	OncologyDefinitionsProgressionAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2";
	OncologyDefinitionsProgressionAllOf2Class.links = {};
	OncologyDefinitionsProgressionAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("AssessmentFocus" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocus.validationErrors(value.AssessmentFocus, dataPath + "/AssessmentFocus", missing));
			} else {
				errors.push({code: 302, params: {key: "AssessmentFocus"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2"});
			}
			if ("Evidence" in value) {
				if (Array.isArray(value.Evidence)) {
					for (var i = 0; i < value.Evidence.length; i++) {
						errors = errors.concat(classes.ObservationDefinitionsEvidence.validationErrors(value.Evidence[i], dataPath + "/Evidence/" + i, missing));
					}
				} else if (value.Evidence == null) {
					errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath + "/Evidence", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2/properties/Evidence"});
				} else {
					errors.push({code: 0, params: {type: typeof value.Evidence, expected: "array"}, path:dataPath + "/Evidence", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2/properties/Evidence"});
				}
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Progression/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsProgressionAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsProgressionAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsProgressionAllOf2Class, OncologyDefinitionsProgressionAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsProgressionAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsProgressionAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionAllOf2Class, OncologyDefinitionsProgressionAllOf2Class.Category, {
		get: function() { return OncologyDefinitionsProgressionAllOf2Class.Category; },
		set: function(newValue) { OncologyDefinitionsProgressionAllOf2Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionAllOf2Class, OncologyDefinitionsProgressionAllOf2Class.AssessmentFocus, {
		get: function() { return OncologyDefinitionsProgressionAllOf2Class.AssessmentFocus; },
		set: function(newValue) { OncologyDefinitionsProgressionAllOf2Class.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsProgressionAllOf2Class, OncologyDefinitionsProgressionAllOf2Class.Evidence, {
		get: function() { return OncologyDefinitionsProgressionAllOf2Class.Evidence; },
		set: function(newValue) { OncologyDefinitionsProgressionAllOf2Class.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage */
	var OncologyDefinitionsReceptorPositivityPercentageClass = classes.OncologyDefinitionsReceptorPositivityPercentage = function OncologyDefinitionsReceptorPositivityPercentageClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorPositivityPercentageClass)) return new OncologyDefinitionsReceptorPositivityPercentageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorPositivityPercentageClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsReceptorPositivityPercentageClass.prototype.constructor = OncologyDefinitionsReceptorPositivityPercentageClass;
	OncologyDefinitionsReceptorPositivityPercentageClass.description = "The percentage of cells that test (stain) positive for the presence of a receptor.";
	OncologyDefinitionsReceptorPositivityPercentageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage";
	OncologyDefinitionsReceptorPositivityPercentageClass.links = {};
	OncologyDefinitionsReceptorPositivityPercentageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorPositivityPercentageAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsReceptorPositivityPercentageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorPositivityPercentageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorPositivityPercentageClass, OncologyDefinitionsReceptorPositivityPercentageClass.Value, {
		get: function() { return OncologyDefinitionsReceptorPositivityPercentageClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorPositivityPercentageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore */
	var OncologyDefinitionsReceptorAllredTotalScoreClass = classes.OncologyDefinitionsReceptorAllredTotalScore = function OncologyDefinitionsReceptorAllredTotalScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorAllredTotalScoreClass)) return new OncologyDefinitionsReceptorAllredTotalScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorAllredTotalScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsReceptorAllredTotalScoreClass.prototype.constructor = OncologyDefinitionsReceptorAllredTotalScoreClass;
	OncologyDefinitionsReceptorAllredTotalScoreClass.description = "Part of the Allred scoring, the total of proportion and intensity scores, from 0 to 8.";
	OncologyDefinitionsReceptorAllredTotalScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore";
	OncologyDefinitionsReceptorAllredTotalScoreClass.links = {};
	OncologyDefinitionsReceptorAllredTotalScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorAllredTotalScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsReceptorAllredTotalScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorAllredTotalScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorAllredTotalScoreClass, OncologyDefinitionsReceptorAllredTotalScoreClass.Value, {
		get: function() { return OncologyDefinitionsReceptorAllredTotalScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorAllredTotalScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore */
	var OncologyDefinitionsReceptorProportionScoreClass = classes.OncologyDefinitionsReceptorProportionScore = function OncologyDefinitionsReceptorProportionScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorProportionScoreClass)) return new OncologyDefinitionsReceptorProportionScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorProportionScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsReceptorProportionScoreClass.prototype.constructor = OncologyDefinitionsReceptorProportionScoreClass;
	OncologyDefinitionsReceptorProportionScoreClass.description = "Part of Allred scoring, based on the percentage of cells that stain for a receptor, on a scale of 0 to 5.";
	OncologyDefinitionsReceptorProportionScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore";
	OncologyDefinitionsReceptorProportionScoreClass.links = {};
	OncologyDefinitionsReceptorProportionScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorProportionScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsReceptorProportionScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorProportionScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorProportionScoreClass, OncologyDefinitionsReceptorProportionScoreClass.Value, {
		get: function() { return OncologyDefinitionsReceptorProportionScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorProportionScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore */
	var OncologyDefinitionsReceptorIntensityScoreClass = classes.OncologyDefinitionsReceptorIntensityScore = function OncologyDefinitionsReceptorIntensityScoreClass(value) {
		if (!(this instanceof OncologyDefinitionsReceptorIntensityScoreClass)) return new OncologyDefinitionsReceptorIntensityScoreClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorIntensityScoreClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsReceptorIntensityScoreClass.prototype.constructor = OncologyDefinitionsReceptorIntensityScoreClass;
	OncologyDefinitionsReceptorIntensityScoreClass.description = "Part of the Allred scoring, based on the intensity of that staining, on a scale of 0 to 3.";
	OncologyDefinitionsReceptorIntensityScoreClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore";
	OncologyDefinitionsReceptorIntensityScoreClass.links = {};
	OncologyDefinitionsReceptorIntensityScoreClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsReceptorIntensityScoreAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsReceptorIntensityScoreClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorIntensityScoreClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorIntensityScoreClass, OncologyDefinitionsReceptorIntensityScoreClass.Value, {
		get: function() { return OncologyDefinitionsReceptorIntensityScoreClass.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorIntensityScoreClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2 */
	var OncologyDefinitionsReceptorStatusObservationAllOf2Class = classes.OncologyDefinitionsReceptorStatusObservationAllOf2 = function OncologyDefinitionsReceptorStatusObservationAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsReceptorStatusObservationAllOf2Class)) return new OncologyDefinitionsReceptorStatusObservationAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.ReceptorType !== "undefined") {
			this.ReceptorType = value.ReceptorType;
		}
		if (this.ReceptorType && !Array.isArray(this.ReceptorType)) {
			this.ReceptorType = new classes.OncologyDefinitionsReceptorType(this.ReceptorType);
		}
		if (typeof value.ReceptorPositivityPercentage !== "undefined") {
			this.ReceptorPositivityPercentage = value.ReceptorPositivityPercentage;
		}
		if (this.ReceptorPositivityPercentage && !Array.isArray(this.ReceptorPositivityPercentage) && typeof this.ReceptorPositivityPercentage === "object") {
			this.ReceptorPositivityPercentage = new classes.OncologyDefinitionsReceptorPositivityPercentage(this.ReceptorPositivityPercentage);
		}
		if (typeof value.ReceptorAllredTotalScore !== "undefined") {
			this.ReceptorAllredTotalScore = value.ReceptorAllredTotalScore;
		}
		if (this.ReceptorAllredTotalScore && !Array.isArray(this.ReceptorAllredTotalScore) && typeof this.ReceptorAllredTotalScore === "object") {
			this.ReceptorAllredTotalScore = new classes.OncologyDefinitionsReceptorAllredTotalScore(this.ReceptorAllredTotalScore);
		}
		if (typeof value.ReceptorProportionScore !== "undefined") {
			this.ReceptorProportionScore = value.ReceptorProportionScore;
		}
		if (this.ReceptorProportionScore && !Array.isArray(this.ReceptorProportionScore) && typeof this.ReceptorProportionScore === "object") {
			this.ReceptorProportionScore = new classes.OncologyDefinitionsReceptorProportionScore(this.ReceptorProportionScore);
		}
		if (typeof value.ReceptorIntensityScore !== "undefined") {
			this.ReceptorIntensityScore = value.ReceptorIntensityScore;
		}
		if (this.ReceptorIntensityScore && !Array.isArray(this.ReceptorIntensityScore) && typeof this.ReceptorIntensityScore === "object") {
			this.ReceptorIntensityScore = new classes.OncologyDefinitionsReceptorIntensityScore(this.ReceptorIntensityScore);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.prototype.constructor = OncologyDefinitionsReceptorStatusObservationAllOf2Class;
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2";
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.links = {};
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2"});
			}
			if ("ReceptorType" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorType.validationErrors(value.ReceptorType, dataPath + "/ReceptorType", missing));
			} else {
				errors.push({code: 302, params: {key: "ReceptorType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2"});
			}
			if ("ReceptorPositivityPercentage" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorPositivityPercentage.validationErrors(value.ReceptorPositivityPercentage, dataPath + "/ReceptorPositivityPercentage", missing));
			}
			if ("ReceptorAllredTotalScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorAllredTotalScore.validationErrors(value.ReceptorAllredTotalScore, dataPath + "/ReceptorAllredTotalScore", missing));
			}
			if ("ReceptorProportionScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorProportionScore.validationErrors(value.ReceptorProportionScore, dataPath + "/ReceptorProportionScore", missing));
			}
			if ("ReceptorIntensityScore" in value) {
				errors = errors.concat(classes.OncologyDefinitionsReceptorIntensityScore.validationErrors(value.ReceptorIntensityScore, dataPath + "/ReceptorIntensityScore", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorStatusObservation/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorStatusObservationAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorStatusObservationAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorType, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorType; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorPositivityPercentage, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorPositivityPercentage; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorPositivityPercentage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorAllredTotalScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorAllredTotalScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorAllredTotalScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorProportionScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorProportionScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorProportionScore = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsReceptorStatusObservationAllOf2Class, OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorIntensityScore, {
		get: function() { return OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorIntensityScore; },
		set: function(newValue) { OncologyDefinitionsReceptorStatusObservationAllOf2Class.ReceptorIntensityScore = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem */
	var OncologyDefinitionsStagingSystemClass = classes.OncologyDefinitionsStagingSystem = function OncologyDefinitionsStagingSystemClass(value) {
		if (!(this instanceof OncologyDefinitionsStagingSystemClass)) return new OncologyDefinitionsStagingSystemClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.Version !== "undefined") {
			this.Version = value.Version;
		}
		if (this.Version && !Array.isArray(this.Version) && this.Version) {
			this.Version = new classes.CoreDefinitionsVersion(this.Version);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsStagingSystemClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsStagingSystemClass.prototype.constructor = OncologyDefinitionsStagingSystemClass;
	OncologyDefinitionsStagingSystemClass.description = "What staging system are used ";
	OncologyDefinitionsStagingSystemClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem";
	OncologyDefinitionsStagingSystemClass.links = {};
	OncologyDefinitionsStagingSystemClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				if (Array.isArray(value.Value)) {
					errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				} else if (value.Value == null) {
					errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				} else if (typeof value.Value === "object" || typeof value.Value === "number" || typeof value.Value === "boolean") {
					errors.push({code: 0, params: {type: typeof value.Value, expected: "string"}, path:dataPath + "/Value", schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem/properties/Value"});
				}
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
			}
			if ("Version" in value) {
				errors = errors.concat(classes.CoreDefinitionsVersion.validationErrors(value.Version, dataPath + "/Version", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingSystem"});
		}
		return errors;
	}
	OncologyDefinitionsStagingSystemClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsStagingSystemClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsStagingSystemClass, OncologyDefinitionsStagingSystemClass.Value, {
		get: function() { return OncologyDefinitionsStagingSystemClass.Value; },
		set: function(newValue) { OncologyDefinitionsStagingSystemClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsStagingSystemClass, OncologyDefinitionsStagingSystemClass.Version, {
		get: function() { return OncologyDefinitionsStagingSystemClass.Version; },
		set: function(newValue) { OncologyDefinitionsStagingSystemClass.Version = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming */
	var OncologyDefinitionsStagingTimingClass = classes.OncologyDefinitionsStagingTiming = function OncologyDefinitionsStagingTimingClass(value) {
		if (!(this instanceof OncologyDefinitionsStagingTimingClass)) return new OncologyDefinitionsStagingTimingClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsStagingTimingClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsStagingTimingClass.prototype.constructor = OncologyDefinitionsStagingTimingClass;
	OncologyDefinitionsStagingTimingClass.description = "Indicates when the staging was done, in terms of treatment landmarks, for example, at diagnosis (clinical), at surgery(pathologic), after treatment (post-neoadjuvant), at entry to a clinical trial, or at recurrence.";
	OncologyDefinitionsStagingTimingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming";
	OncologyDefinitionsStagingTimingClass.links = {};
	OncologyDefinitionsStagingTimingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/StagingTiming"});
		}
		return errors;
	}
	OncologyDefinitionsStagingTimingClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsStagingTimingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsStagingTimingClass, OncologyDefinitionsStagingTimingClass.Value, {
		get: function() { return OncologyDefinitionsStagingTimingClass.Value; },
		set: function(newValue) { OncologyDefinitionsStagingTimingClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage */
	var OncologyDefinitionsTStageClass = classes.OncologyDefinitionsTStage = function OncologyDefinitionsTStageClass(value) {
		if (!(this instanceof OncologyDefinitionsTStageClass)) return new OncologyDefinitionsTStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsTStageClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsTStageClass.prototype.constructor = OncologyDefinitionsTStageClass;
	OncologyDefinitionsTStageClass.description = "The size and extent of the primary tumor (greatest dimension), based on criteria from the American Joint Committee on Cancer. See Table 152 in HL7 CDA® R2 Implementation Guide: Clinical Oncology Treatment Plan and Summary, Release 1 - US Realm\nConcepts: http://loinc.org:59528-0";
	OncologyDefinitionsTStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage";
	OncologyDefinitionsTStageClass.links = {};
	OncologyDefinitionsTStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTStageAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTStageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTStageClass, OncologyDefinitionsTStageClass.Value, {
		get: function() { return OncologyDefinitionsTStageClass.Value; },
		set: function(newValue) { OncologyDefinitionsTStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage */
	var OncologyDefinitionsNStageClass = classes.OncologyDefinitionsNStage = function OncologyDefinitionsNStageClass(value) {
		if (!(this instanceof OncologyDefinitionsNStageClass)) return new OncologyDefinitionsNStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsNStageClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsNStageClass.prototype.constructor = OncologyDefinitionsNStageClass;
	OncologyDefinitionsNStageClass.description = "The presence of metastases in regional lymph nodes. TNM node category for staging derived from the American Joint Committee on Cancer. See Table 147 in HL7 CDA® R2 Implementation Guide: Clinical Oncology Treatment Plan and Summary, Release 1 - US Realm\nConcepts: http://loinc.org:59525-6";
	OncologyDefinitionsNStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage";
	OncologyDefinitionsNStageClass.links = {};
	OncologyDefinitionsNStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsNStageAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsNStageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNStageClass, OncologyDefinitionsNStageClass.Value, {
		get: function() { return OncologyDefinitionsNStageClass.Value; },
		set: function(newValue) { OncologyDefinitionsNStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage */
	var OncologyDefinitionsMStageClass = classes.OncologyDefinitionsMStage = function OncologyDefinitionsMStageClass(value) {
		if (!(this instanceof OncologyDefinitionsMStageClass)) return new OncologyDefinitionsMStageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsMStageClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsMStageClass.prototype.constructor = OncologyDefinitionsMStageClass;
	OncologyDefinitionsMStageClass.description = "Part of the TNM classification system representing metastases.  The system is used to describe the spread of cancer to other parts of the body. See Table 144 in HL7 CDA® R2 Implementation Guide: Clinical Oncology Treatment Plan and Summary, Release 1 - US Realm\nConcepts: http://loinc.org:59522-3";
	OncologyDefinitionsMStageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage";
	OncologyDefinitionsMStageClass.links = {};
	OncologyDefinitionsMStageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsMStageAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsMStageClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsMStageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsMStageClass, OncologyDefinitionsMStageClass.Value, {
		get: function() { return OncologyDefinitionsMStageClass.Value; },
		set: function(newValue) { OncologyDefinitionsMStageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2 */
	var OncologyDefinitionsTNMStageAllOf2Class = classes.OncologyDefinitionsTNMStageAllOf2 = function OncologyDefinitionsTNMStageAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsTNMStageAllOf2Class)) return new OncologyDefinitionsTNMStageAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.StagingSystem !== "undefined") {
			this.StagingSystem = value.StagingSystem;
		}
		if (this.StagingSystem && !Array.isArray(this.StagingSystem)) {
			this.StagingSystem = new classes.OncologyDefinitionsStagingSystem(this.StagingSystem);
		}
		if (typeof value.StagingTiming !== "undefined") {
			this.StagingTiming = value.StagingTiming;
		}
		if (this.StagingTiming && !Array.isArray(this.StagingTiming) && this.StagingTiming) {
			this.StagingTiming = new classes.OncologyDefinitionsStagingTiming(this.StagingTiming);
		}
		if (typeof value.T_Stage !== "undefined") {
			this.T_Stage = value.T_Stage;
		}
		if (this.T_Stage && !Array.isArray(this.T_Stage) && typeof this.T_Stage === "object") {
			this.T_Stage = new classes.OncologyDefinitionsTStage(this.T_Stage);
		}
		if (typeof value.N_Stage !== "undefined") {
			this.N_Stage = value.N_Stage;
		}
		if (this.N_Stage && !Array.isArray(this.N_Stage) && typeof this.N_Stage === "object") {
			this.N_Stage = new classes.OncologyDefinitionsNStage(this.N_Stage);
		}
		if (typeof value.M_Stage !== "undefined") {
			this.M_Stage = value.M_Stage;
		}
		if (this.M_Stage && !Array.isArray(this.M_Stage) && typeof this.M_Stage === "object") {
			this.M_Stage = new classes.OncologyDefinitionsMStage(this.M_Stage);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTNMStageAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTNMStageAllOf2Class.prototype.constructor = OncologyDefinitionsTNMStageAllOf2Class;
	OncologyDefinitionsTNMStageAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2";
	OncologyDefinitionsTNMStageAllOf2Class.links = {};
	OncologyDefinitionsTNMStageAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
			}
			if ("StagingSystem" in value) {
				errors = errors.concat(classes.OncologyDefinitionsStagingSystem.validationErrors(value.StagingSystem, dataPath + "/StagingSystem", missing));
			} else {
				errors.push({code: 302, params: {key: "StagingSystem"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
			}
			if ("StagingTiming" in value) {
				errors = errors.concat(classes.OncologyDefinitionsStagingTiming.validationErrors(value.StagingTiming, dataPath + "/StagingTiming", missing));
			}
			if ("T-Stage" in value) {
				errors = errors.concat(classes.OncologyDefinitionsTStage.validationErrors(value.T-Stage, dataPath + "/T-Stage", missing));
			} else {
				errors.push({code: 302, params: {key: "T-Stage"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
			}
			if ("N-Stage" in value) {
				errors = errors.concat(classes.OncologyDefinitionsNStage.validationErrors(value.N-Stage, dataPath + "/N-Stage", missing));
			} else {
				errors.push({code: 302, params: {key: "N-Stage"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
			}
			if ("M-Stage" in value) {
				errors = errors.concat(classes.OncologyDefinitionsMStage.validationErrors(value.M-Stage, dataPath + "/M-Stage", missing));
			} else {
				errors.push({code: 302, params: {key: "M-Stage"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TNMStage/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsTNMStageAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTNMStageAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.StagingSystem, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.StagingSystem; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.StagingSystem = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.StagingTiming, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.StagingTiming; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.StagingTiming = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.T_Stage, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.T_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.T_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.N_Stage, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.N_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.N_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTNMStageAllOf2Class, OncologyDefinitionsTNMStageAllOf2Class.M_Stage, {
		get: function() { return OncologyDefinitionsTNMStageAllOf2Class.M_Stage; },
		set: function(newValue) { OncologyDefinitionsTNMStageAllOf2Class.M_Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent */
	var OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass = classes.OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEvent = function OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass)) return new OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass;
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent";
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent";
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.links = {};
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/properties/AdverseEvent");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentPropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction */
	var AdverseDefinitionsAdverseReactionClass = classes.AdverseDefinitionsAdverseReaction = function AdverseDefinitionsAdverseReactionClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionClass)) return new AdverseDefinitionsAdverseReactionClass(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent) && this.AdverseEvent) {
			this.AdverseEvent = new classes.AdverseDefinitionsAdverseReactionPropertiesAdverseEvent(this.AdverseEvent);
		}
		if (typeof value.AdverseReactionAttribution !== "undefined") {
			this.AdverseReactionAttribution = value.AdverseReactionAttribution;
		}
		
		BaseDefinitionsEntryClass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionClass.prototype = Object.create(BaseDefinitionsEntryClass.prototype);
	AdverseDefinitionsAdverseReactionClass.prototype.constructor = AdverseDefinitionsAdverseReactionClass;
	AdverseDefinitionsAdverseReactionClass.description = "Any noxious and unintended response to a medical product, procedure, or other intervention, for which a causal relationship to an intervention is at least a reasonable possibility i.e., the relationship cannot be ruled out. It is not necessarily associated with a previously-recorded SubstanceRisk. This entry could be used to record the occurrence or non-occurrence of an adverse reaction.\nTBD Fields: ActionTakenWithMedication\nOtherActionTaken";
	AdverseDefinitionsAdverseReactionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction";
	AdverseDefinitionsAdverseReactionClass.links = {};
	AdverseDefinitionsAdverseReactionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionClass, AdverseDefinitionsAdverseReactionClass.AdverseEvent, {
		get: function() { return AdverseDefinitionsAdverseReactionClass.AdverseEvent; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionClass.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionClass, AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution, {
		get: function() { return AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionClass.AdverseReactionAttribution = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2 */
	var OncologyDefinitionsToxicReactionToTreatmentAllOf2Class = classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2 = function OncologyDefinitionsToxicReactionToTreatmentAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentAllOf2Class)) return new OncologyDefinitionsToxicReactionToTreatmentAllOf2Class(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent) && typeof this.AdverseEvent === "object") {
			this.AdverseEvent = new classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEvent(this.AdverseEvent);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentAllOf2Class;
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2";
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.links = {};
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2"});
		} else if (typeof value === "object") {
			if ("AdverseEvent" in value) {
				errors = errors.concat(classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEvent.validationErrors(value.AdverseEvent, dataPath + "/AdverseEvent", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsToxicReactionToTreatmentAllOf2Class, OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.AdverseEvent, {
		get: function() { return OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.AdverseEvent; },
		set: function(newValue) { OncologyDefinitionsToxicReactionToTreatmentAllOf2Class.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity */
	var CoreDefinitionsQuantityClass = classes.CoreDefinitionsQuantity = function CoreDefinitionsQuantityClass(value) {
		if (!(this instanceof CoreDefinitionsQuantityClass)) return new CoreDefinitionsQuantityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.Units !== "undefined") {
			this.Units = value.Units;
		}
		if (this.Units && !Array.isArray(this.Units) && this.Units) {
			this.Units = new classes.CoreDefinitionsUnits(this.Units);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsQuantityClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsQuantityClass.prototype.constructor = CoreDefinitionsQuantityClass;
	CoreDefinitionsQuantityClass.description = "A quantity with units, whose value may be bounded from above or below.";
	CoreDefinitionsQuantityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity";
	CoreDefinitionsQuantityClass.links = {};
	CoreDefinitionsQuantityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantityPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity"});
			}
			if ("Units" in value) {
				errors = errors.concat(classes.CoreDefinitionsUnits.validationErrors(value.Units, dataPath + "/Units", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity"});
		}
		return errors;
	}
	CoreDefinitionsQuantityClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsQuantityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsQuantityClass, CoreDefinitionsQuantityClass.Value, {
		get: function() { return CoreDefinitionsQuantityClass.Value; },
		set: function(newValue) { CoreDefinitionsQuantityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsQuantityClass, CoreDefinitionsQuantityClass.Units, {
		get: function() { return CoreDefinitionsQuantityClass.Units; },
		set: function(newValue) { CoreDefinitionsQuantityClass.Units = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize */
	var OncologyDefinitionsTumorSecondaryDimensionSizeClass = classes.OncologyDefinitionsTumorSecondaryDimensionSize = function OncologyDefinitionsTumorSecondaryDimensionSizeClass(value) {
		if (!(this instanceof OncologyDefinitionsTumorSecondaryDimensionSizeClass)) return new OncologyDefinitionsTumorSecondaryDimensionSizeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.prototype.constructor = OncologyDefinitionsTumorSecondaryDimensionSizeClass;
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.description = "The longest perpendicular diameter of the primary tumor.";
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize";
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.links = {};
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTumorSecondaryDimensionSizeClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorSecondaryDimensionSizeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorSecondaryDimensionSizeClass, OncologyDefinitionsTumorSecondaryDimensionSizeClass.Value, {
		get: function() { return OncologyDefinitionsTumorSecondaryDimensionSizeClass.Value; },
		set: function(newValue) { OncologyDefinitionsTumorSecondaryDimensionSizeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed */
	var OncologyDefinitionsSizeOfGrossTumorBedClass = classes.OncologyDefinitionsSizeOfGrossTumorBed = function OncologyDefinitionsSizeOfGrossTumorBedClass(value) {
		if (!(this instanceof OncologyDefinitionsSizeOfGrossTumorBedClass)) return new OncologyDefinitionsSizeOfGrossTumorBedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsSizeOfGrossTumorBedClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsSizeOfGrossTumorBedClass.prototype.constructor = OncologyDefinitionsSizeOfGrossTumorBedClass;
	OncologyDefinitionsSizeOfGrossTumorBedClass.description = "The largest dimension of the gross tumor bed/fibrotic area.";
	OncologyDefinitionsSizeOfGrossTumorBedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed";
	OncologyDefinitionsSizeOfGrossTumorBedClass.links = {};
	OncologyDefinitionsSizeOfGrossTumorBedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsSizeOfGrossTumorBedAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsSizeOfGrossTumorBedClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsSizeOfGrossTumorBedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsSizeOfGrossTumorBedClass, OncologyDefinitionsSizeOfGrossTumorBedClass.Value, {
		get: function() { return OncologyDefinitionsSizeOfGrossTumorBedClass.Value; },
		set: function(newValue) { OncologyDefinitionsSizeOfGrossTumorBedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins */
	var OncologyDefinitionsTumorMarginsClass = classes.OncologyDefinitionsTumorMargins = function OncologyDefinitionsTumorMarginsClass(value) {
		if (!(this instanceof OncologyDefinitionsTumorMarginsClass)) return new OncologyDefinitionsTumorMarginsClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsTumorMarginsClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsTumorMarginsClass.prototype.constructor = OncologyDefinitionsTumorMarginsClass;
	OncologyDefinitionsTumorMarginsClass.description = "The edge or border of the tissue removed in cancer surgery. The margin is described as negative or clean when the pathologist finds no cancer cells at the edge of the tissue, suggesting that all of the cancer has been removed. The margin is described as positive or involved when the pathologist finds cancer cells at the edge of the tissue, suggesting that all of the cancer has not been removed.\nConcepts: http://ncimeta.nci.nih.gov:C1269830";
	OncologyDefinitionsTumorMarginsClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins";
	OncologyDefinitionsTumorMarginsClass.links = {};
	OncologyDefinitionsTumorMarginsClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsTumorMarginsAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsTumorMarginsClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorMarginsClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorMarginsClass, OncologyDefinitionsTumorMarginsClass.Value, {
		get: function() { return OncologyDefinitionsTumorMarginsClass.Value; },
		set: function(newValue) { OncologyDefinitionsTumorMarginsClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity */
	var OncologyDefinitionsCellularityClass = classes.OncologyDefinitionsCellularity = function OncologyDefinitionsCellularityClass(value) {
		if (!(this instanceof OncologyDefinitionsCellularityClass)) return new OncologyDefinitionsCellularityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsCellularityClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsCellularityClass.prototype.constructor = OncologyDefinitionsCellularityClass;
	OncologyDefinitionsCellularityClass.description = "Percentage of cells in a sample that are cancerous\nConcepts: http://ncimeta.nci.nih.gov:C4055283";
	OncologyDefinitionsCellularityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity";
	OncologyDefinitionsCellularityClass.links = {};
	OncologyDefinitionsCellularityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsCellularityAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsCellularityClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCellularityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCellularityClass, OncologyDefinitionsCellularityClass.Value, {
		get: function() { return OncologyDefinitionsCellularityClass.Value; },
		set: function(newValue) { OncologyDefinitionsCellularityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma */
	var OncologyDefinitionsPercentageInSituCarcinomaClass = classes.OncologyDefinitionsPercentageInSituCarcinoma = function OncologyDefinitionsPercentageInSituCarcinomaClass(value) {
		if (!(this instanceof OncologyDefinitionsPercentageInSituCarcinomaClass)) return new OncologyDefinitionsPercentageInSituCarcinomaClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		ObservationDefinitionsObservationComponentClass.apply(this, arguments);
	};
	OncologyDefinitionsPercentageInSituCarcinomaClass.prototype = Object.create(ObservationDefinitionsObservationComponentClass.prototype);
	OncologyDefinitionsPercentageInSituCarcinomaClass.prototype.constructor = OncologyDefinitionsPercentageInSituCarcinomaClass;
	OncologyDefinitionsPercentageInSituCarcinomaClass.description = "The percentage of the cancer that is in situ, as opposed to invading other tissues.";
	OncologyDefinitionsPercentageInSituCarcinomaClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma";
	OncologyDefinitionsPercentageInSituCarcinomaClass.links = {};
	OncologyDefinitionsPercentageInSituCarcinomaClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponent.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.OncologyDefinitionsPercentageInSituCarcinomaAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsPercentageInSituCarcinomaClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsPercentageInSituCarcinomaClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsPercentageInSituCarcinomaClass, OncologyDefinitionsPercentageInSituCarcinomaClass.Value, {
		get: function() { return OncologyDefinitionsPercentageInSituCarcinomaClass.Value; },
		set: function(newValue) { OncologyDefinitionsPercentageInSituCarcinomaClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2 */
	var OncologyDefinitionsTumorSizeAllOf2Class = classes.OncologyDefinitionsTumorSizeAllOf2 = function OncologyDefinitionsTumorSizeAllOf2Class(value) {
		if (!(this instanceof OncologyDefinitionsTumorSizeAllOf2Class)) return new OncologyDefinitionsTumorSizeAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		if (typeof value.TumorSecondaryDimensionSize !== "undefined") {
			this.TumorSecondaryDimensionSize = value.TumorSecondaryDimensionSize;
		}
		if (this.TumorSecondaryDimensionSize && !Array.isArray(this.TumorSecondaryDimensionSize) && typeof this.TumorSecondaryDimensionSize === "object") {
			this.TumorSecondaryDimensionSize = new classes.OncologyDefinitionsTumorSecondaryDimensionSize(this.TumorSecondaryDimensionSize);
		}
		if (typeof value.SizeOfGrossTumorBed !== "undefined") {
			this.SizeOfGrossTumorBed = value.SizeOfGrossTumorBed;
		}
		if (this.SizeOfGrossTumorBed && !Array.isArray(this.SizeOfGrossTumorBed) && typeof this.SizeOfGrossTumorBed === "object") {
			this.SizeOfGrossTumorBed = new classes.OncologyDefinitionsSizeOfGrossTumorBed(this.SizeOfGrossTumorBed);
		}
		if (typeof value.TumorMargins !== "undefined") {
			this.TumorMargins = value.TumorMargins;
		}
		if (this.TumorMargins && !Array.isArray(this.TumorMargins) && typeof this.TumorMargins === "object") {
			this.TumorMargins = new classes.OncologyDefinitionsTumorMargins(this.TumorMargins);
		}
		if (typeof value.Cellularity !== "undefined") {
			this.Cellularity = value.Cellularity;
		}
		if (this.Cellularity && !Array.isArray(this.Cellularity) && typeof this.Cellularity === "object") {
			this.Cellularity = new classes.OncologyDefinitionsCellularity(this.Cellularity);
		}
		if (typeof value.PercentageInSituCarcinoma !== "undefined") {
			this.PercentageInSituCarcinoma = value.PercentageInSituCarcinoma;
		}
		if (this.PercentageInSituCarcinoma && !Array.isArray(this.PercentageInSituCarcinoma) && typeof this.PercentageInSituCarcinoma === "object") {
			this.PercentageInSituCarcinoma = new classes.OncologyDefinitionsPercentageInSituCarcinoma(this.PercentageInSituCarcinoma);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTumorSizeAllOf2Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTumorSizeAllOf2Class.prototype.constructor = OncologyDefinitionsTumorSizeAllOf2Class;
	OncologyDefinitionsTumorSizeAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2";
	OncologyDefinitionsTumorSizeAllOf2Class.links = {};
	OncologyDefinitionsTumorSizeAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2"});
			}
			if ("TumorSecondaryDimensionSize" in value) {
				errors = errors.concat(classes.OncologyDefinitionsTumorSecondaryDimensionSize.validationErrors(value.TumorSecondaryDimensionSize, dataPath + "/TumorSecondaryDimensionSize", missing));
			}
			if ("SizeOfGrossTumorBed" in value) {
				errors = errors.concat(classes.OncologyDefinitionsSizeOfGrossTumorBed.validationErrors(value.SizeOfGrossTumorBed, dataPath + "/SizeOfGrossTumorBed", missing));
			}
			if ("TumorMargins" in value) {
				errors = errors.concat(classes.OncologyDefinitionsTumorMargins.validationErrors(value.TumorMargins, dataPath + "/TumorMargins", missing));
			}
			if ("Cellularity" in value) {
				errors = errors.concat(classes.OncologyDefinitionsCellularity.validationErrors(value.Cellularity, dataPath + "/Cellularity", missing));
			}
			if ("PercentageInSituCarcinoma" in value) {
				errors = errors.concat(classes.OncologyDefinitionsPercentageInSituCarcinoma.validationErrors(value.PercentageInSituCarcinoma, dataPath + "/PercentageInSituCarcinoma", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSize/allOf/2"});
		}
		return errors;
	}
	OncologyDefinitionsTumorSizeAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorSizeAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.Value, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.Value; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.TumorSecondaryDimensionSize, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.TumorSecondaryDimensionSize; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.TumorSecondaryDimensionSize = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.SizeOfGrossTumorBed, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.SizeOfGrossTumorBed; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.SizeOfGrossTumorBed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.TumorMargins, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.TumorMargins; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.TumorMargins = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.Cellularity, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.Cellularity; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.Cellularity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(OncologyDefinitionsTumorSizeAllOf2Class, OncologyDefinitionsTumorSizeAllOf2Class.PercentageInSituCarcinoma, {
		get: function() { return OncologyDefinitionsTumorSizeAllOf2Class.PercentageInSituCarcinoma; },
		set: function(newValue) { OncologyDefinitionsTumorSizeAllOf2Class.PercentageInSituCarcinoma = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence */
	var ObservationDefinitionsEvidenceClass = classes.ObservationDefinitionsEvidence = function ObservationDefinitionsEvidenceClass(value) {
		if (!(this instanceof ObservationDefinitionsEvidenceClass)) return new ObservationDefinitionsEvidenceClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsEvidencePropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsEvidenceClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsEvidenceClass.prototype.constructor = ObservationDefinitionsEvidenceClass;
	ObservationDefinitionsEvidenceClass.description = "An observation that serves as evidence for some type of assessment.";
	ObservationDefinitionsEvidenceClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence";
	ObservationDefinitionsEvidenceClass.links = {};
	ObservationDefinitionsEvidenceClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsEvidencePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence"});
		}
		return errors;
	}
	ObservationDefinitionsEvidenceClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidenceClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsEvidenceClass, ObservationDefinitionsEvidenceClass.Value, {
		get: function() { return ObservationDefinitionsEvidenceClass.Value; },
		set: function(newValue) { ObservationDefinitionsEvidenceClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality */
	var CoreDefinitionsLateralityClass = classes.CoreDefinitionsLaterality = function CoreDefinitionsLateralityClass(value) {
		if (!(this instanceof CoreDefinitionsLateralityClass)) return new CoreDefinitionsLateralityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLateralityClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLateralityClass.prototype.constructor = CoreDefinitionsLateralityClass;
	CoreDefinitionsLateralityClass.description = "Anatomical location or specimen further detailing the side(s) of interest.\nConcepts: Anatomical laterality (http://ncimeta.nci.nih.gov:C0925205)";
	CoreDefinitionsLateralityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality";
	CoreDefinitionsLateralityClass.links = {};
	CoreDefinitionsLateralityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Laterality"});
		}
		return errors;
	}
	CoreDefinitionsLateralityClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLateralityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLateralityClass, CoreDefinitionsLateralityClass.Value, {
		get: function() { return CoreDefinitionsLateralityClass.Value; },
		set: function(newValue) { CoreDefinitionsLateralityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality */
	var CoreDefinitionsDirectionalityClass = classes.CoreDefinitionsDirectionality = function CoreDefinitionsDirectionalityClass(value) {
		if (!(this instanceof CoreDefinitionsDirectionalityClass)) return new CoreDefinitionsDirectionalityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDirectionalityClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDirectionalityClass.prototype.constructor = CoreDefinitionsDirectionalityClass;
	CoreDefinitionsDirectionalityClass.description = "Anatomical location or specimen further detailing directionality.\nConcepts: https://evs.nci.nih.gov/ftp1/CDISC/SDTM/:C99074";
	CoreDefinitionsDirectionalityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality";
	CoreDefinitionsDirectionalityClass.links = {};
	CoreDefinitionsDirectionalityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Directionality"});
		}
		return errors;
	}
	CoreDefinitionsDirectionalityClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDirectionalityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDirectionalityClass, CoreDefinitionsDirectionalityClass.Value, {
		get: function() { return CoreDefinitionsDirectionalityClass.Value; },
		set: function(newValue) { CoreDefinitionsDirectionalityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality */
	var CoreDefinitionsPortionTotalityClass = classes.CoreDefinitionsPortionTotality = function CoreDefinitionsPortionTotalityClass(value) {
		if (!(this instanceof CoreDefinitionsPortionTotalityClass)) return new CoreDefinitionsPortionTotalityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsPortionTotalityClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsPortionTotalityClass.prototype.constructor = CoreDefinitionsPortionTotalityClass;
	CoreDefinitionsPortionTotalityClass.description = "ObservationQualifier for anatomical location or specimen further detailing the portion or totality, which means arrangement of, or apportioning of an entity.\nConcepts: https://evs.nci.nih.gov/ftp1/CDISC/SDTM/:C99075";
	CoreDefinitionsPortionTotalityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality";
	CoreDefinitionsPortionTotalityClass.links = {};
	CoreDefinitionsPortionTotalityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PortionTotality"});
		}
		return errors;
	}
	CoreDefinitionsPortionTotalityClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsPortionTotalityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsPortionTotalityClass, CoreDefinitionsPortionTotalityClass.Value, {
		get: function() { return CoreDefinitionsPortionTotalityClass.Value; },
		set: function(newValue) { CoreDefinitionsPortionTotalityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection */
	var CoreDefinitionsClockDirectionClass = classes.CoreDefinitionsClockDirection = function CoreDefinitionsClockDirectionClass(value) {
		if (!(this instanceof CoreDefinitionsClockDirectionClass)) return new CoreDefinitionsClockDirectionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsClockDirectionClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsClockDirectionClass.prototype.constructor = CoreDefinitionsClockDirectionClass;
	CoreDefinitionsClockDirectionClass.description = "A direction indicated by an angle relative to 12 o'clock.\nConcepts: http://loinc.org:72294-2";
	CoreDefinitionsClockDirectionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection";
	CoreDefinitionsClockDirectionClass.links = {};
	CoreDefinitionsClockDirectionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/ClockDirection"});
		}
		return errors;
	}
	CoreDefinitionsClockDirectionClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsClockDirectionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsClockDirectionClass, CoreDefinitionsClockDirectionClass.Value, {
		get: function() { return CoreDefinitionsClockDirectionClass.Value; },
		set: function(newValue) { CoreDefinitionsClockDirectionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance */
	var CoreDefinitionsDistanceClass = classes.CoreDefinitionsDistance = function CoreDefinitionsDistanceClass(value) {
		if (!(this instanceof CoreDefinitionsDistanceClass)) return new CoreDefinitionsDistanceClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDistanceClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDistanceClass.prototype.constructor = CoreDefinitionsDistanceClass;
	CoreDefinitionsDistanceClass.description = "The space separating two objects or points.\nConcepts: http://ncimeta.nci.nih.gov:C0012751";
	CoreDefinitionsDistanceClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance";
	CoreDefinitionsDistanceClass.links = {};
	CoreDefinitionsDistanceClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Distance"});
		}
		return errors;
	}
	CoreDefinitionsDistanceClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDistanceClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDistanceClass, CoreDefinitionsDistanceClass.Value, {
		get: function() { return CoreDefinitionsDistanceClass.Value; },
		set: function(newValue) { CoreDefinitionsDistanceClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description */
	var CoreDefinitionsDescriptionClass = classes.CoreDefinitionsDescription = function CoreDefinitionsDescriptionClass(value) {
		if (!(this instanceof CoreDefinitionsDescriptionClass)) return new CoreDefinitionsDescriptionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDescriptionClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDescriptionClass.prototype.constructor = CoreDefinitionsDescriptionClass;
	CoreDefinitionsDescriptionClass.description = "An account, representation, statement, or explanation of something.\nConcepts: http://ncimeta.nci.nih.gov:C0678257";
	CoreDefinitionsDescriptionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description";
	CoreDefinitionsDescriptionClass.links = {};
	CoreDefinitionsDescriptionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsDescriptionPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description"});
		}
		return errors;
	}
	CoreDefinitionsDescriptionClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDescriptionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDescriptionClass, CoreDefinitionsDescriptionClass.Value, {
		get: function() { return CoreDefinitionsDescriptionClass.Value; },
		set: function(newValue) { CoreDefinitionsDescriptionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker */
	var CoreDefinitionsBodySiteMarkerClass = classes.CoreDefinitionsBodySiteMarker = function CoreDefinitionsBodySiteMarkerClass(value) {
		if (!(this instanceof CoreDefinitionsBodySiteMarkerClass)) return new CoreDefinitionsBodySiteMarkerClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsBodySiteMarkerClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsBodySiteMarkerClass.prototype.constructor = CoreDefinitionsBodySiteMarkerClass;
	CoreDefinitionsBodySiteMarkerClass.description = "A marker surgically placed at the site, often during a biopsy procedure, to pinpoint the location. The marker is typically a metal clip or radioactive seed.";
	CoreDefinitionsBodySiteMarkerClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker";
	CoreDefinitionsBodySiteMarkerClass.links = {};
	CoreDefinitionsBodySiteMarkerClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsBodySiteMarkerPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker"});
		}
		return errors;
	}
	CoreDefinitionsBodySiteMarkerClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsBodySiteMarkerClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsBodySiteMarkerClass, CoreDefinitionsBodySiteMarkerClass.Value, {
		get: function() { return CoreDefinitionsBodySiteMarkerClass.Value; },
		set: function(newValue) { CoreDefinitionsBodySiteMarkerClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId */
	var BaseDefinitionsShrIdClass = classes.BaseDefinitionsShrId = function BaseDefinitionsShrIdClass(value) {
		if (!(this instanceof BaseDefinitionsShrIdClass)) return new BaseDefinitionsShrIdClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsShrIdClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsShrIdClass.prototype.constructor = BaseDefinitionsShrIdClass;
	BaseDefinitionsShrIdClass.description = "A unique, persistent identifier for the Standard Health Record to which this entry belongs.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	BaseDefinitionsShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId";
	BaseDefinitionsShrIdClass.links = {};
	BaseDefinitionsShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsShrIdPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId"});
		}
		return errors;
	}
	BaseDefinitionsShrIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsShrIdClass, BaseDefinitionsShrIdClass.Value, {
		get: function() { return BaseDefinitionsShrIdClass.Value; },
		set: function(newValue) { BaseDefinitionsShrIdClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId */
	var BaseDefinitionsEntryIdClass = classes.BaseDefinitionsEntryId = function BaseDefinitionsEntryIdClass(value) {
		if (!(this instanceof BaseDefinitionsEntryIdClass)) return new BaseDefinitionsEntryIdClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsEntryIdClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsEntryIdClass.prototype.constructor = BaseDefinitionsEntryIdClass;
	BaseDefinitionsEntryIdClass.description = "A unique, persistent, permanent identifier for an entry in a health record.\nConcepts: http://ncimeta.nci.nih.gov:C0600091";
	BaseDefinitionsEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId";
	BaseDefinitionsEntryIdClass.links = {};
	BaseDefinitionsEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryIdPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId"});
		}
		return errors;
	}
	BaseDefinitionsEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsEntryIdClass, BaseDefinitionsEntryIdClass.Value, {
		get: function() { return BaseDefinitionsEntryIdClass.Value; },
		set: function(newValue) { BaseDefinitionsEntryIdClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version */
	var CoreDefinitionsVersionClass = classes.CoreDefinitionsVersion = function CoreDefinitionsVersionClass(value) {
		if (!(this instanceof CoreDefinitionsVersionClass)) return new CoreDefinitionsVersionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsVersionClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsVersionClass.prototype.constructor = CoreDefinitionsVersionClass;
	CoreDefinitionsVersionClass.description = "A string identifying the particular of form of something (such as a code system or software product) that is different in some way from another form of the same thing.\nConcepts: http://ncimeta.nci.nih.gov:C0333052";
	CoreDefinitionsVersionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version";
	CoreDefinitionsVersionClass.links = {};
	CoreDefinitionsVersionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsVersionPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version"});
		}
		return errors;
	}
	CoreDefinitionsVersionClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsVersionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsVersionClass, CoreDefinitionsVersionClass.Value, {
		get: function() { return CoreDefinitionsVersionClass.Value; },
		set: function(newValue) { CoreDefinitionsVersionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject */
	var BaseDefinitionsFocalSubjectClass = classes.BaseDefinitionsFocalSubject = function BaseDefinitionsFocalSubjectClass(value) {
		if (!(this instanceof BaseDefinitionsFocalSubjectClass)) return new BaseDefinitionsFocalSubjectClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsFocalSubjectPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsFocalSubjectClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsFocalSubjectClass.prototype.constructor = BaseDefinitionsFocalSubjectClass;
	BaseDefinitionsFocalSubjectClass.description = "The person or thing that this entry refers to, usually the Person of Record. However, not all entries refer to the Person of Record. The entry could refer to a fetus, care giver, or relative (living or dead).";
	BaseDefinitionsFocalSubjectClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject";
	BaseDefinitionsFocalSubjectClass.links = {};
	BaseDefinitionsFocalSubjectClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubjectPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsFocalSubjectClass, BaseDefinitionsFocalSubjectClass.Value, {
		get: function() { return BaseDefinitionsFocalSubjectClass.Value; },
		set: function(newValue) { BaseDefinitionsFocalSubjectClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag */
	var BaseDefinitionsSubjectIsThirdPartyFlagClass = classes.BaseDefinitionsSubjectIsThirdPartyFlag = function BaseDefinitionsSubjectIsThirdPartyFlagClass(value) {
		if (!(this instanceof BaseDefinitionsSubjectIsThirdPartyFlagClass)) return new BaseDefinitionsSubjectIsThirdPartyFlagClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsSubjectIsThirdPartyFlagClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsSubjectIsThirdPartyFlagClass.prototype.constructor = BaseDefinitionsSubjectIsThirdPartyFlagClass;
	BaseDefinitionsSubjectIsThirdPartyFlagClass.description = "If true, the subject of this entry is someone other than the Person of Record, for example, a family member.";
	BaseDefinitionsSubjectIsThirdPartyFlagClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag";
	BaseDefinitionsSubjectIsThirdPartyFlagClass.links = {};
	BaseDefinitionsSubjectIsThirdPartyFlagClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag"});
		}
		return errors;
	}
	BaseDefinitionsSubjectIsThirdPartyFlagClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsSubjectIsThirdPartyFlagClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsSubjectIsThirdPartyFlagClass, BaseDefinitionsSubjectIsThirdPartyFlagClass.Value, {
		get: function() { return BaseDefinitionsSubjectIsThirdPartyFlagClass.Value; },
		set: function(newValue) { BaseDefinitionsSubjectIsThirdPartyFlagClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative */
	var BaseDefinitionsNarrativeClass = classes.BaseDefinitionsNarrative = function BaseDefinitionsNarrativeClass(value) {
		if (!(this instanceof BaseDefinitionsNarrativeClass)) return new BaseDefinitionsNarrativeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.NarrativeQualifier !== "undefined") {
			this.NarrativeQualifier = value.NarrativeQualifier;
		}
		if (this.NarrativeQualifier && !Array.isArray(this.NarrativeQualifier)) {
			this.NarrativeQualifier = new classes.BaseDefinitionsNarrativeQualifier(this.NarrativeQualifier);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsNarrativeClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsNarrativeClass.prototype.constructor = BaseDefinitionsNarrativeClass;
	BaseDefinitionsNarrativeClass.description = "A human-readable narrative, potentially including images, that contains a summary of the resource, and may be used to represent the content of the resource to a human.";
	BaseDefinitionsNarrativeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative";
	BaseDefinitionsNarrativeClass.links = {};
	BaseDefinitionsNarrativeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrativePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
			}
			if ("NarrativeQualifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrativeQualifier.validationErrors(value.NarrativeQualifier, dataPath + "/NarrativeQualifier", missing));
			} else {
				errors.push({code: 302, params: {key: "NarrativeQualifier"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative"});
		}
		return errors;
	}
	BaseDefinitionsNarrativeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNarrativeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsNarrativeClass, BaseDefinitionsNarrativeClass.Value, {
		get: function() { return BaseDefinitionsNarrativeClass.Value; },
		set: function(newValue) { BaseDefinitionsNarrativeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsNarrativeClass, BaseDefinitionsNarrativeClass.NarrativeQualifier, {
		get: function() { return BaseDefinitionsNarrativeClass.NarrativeQualifier; },
		set: function(newValue) { BaseDefinitionsNarrativeClass.NarrativeQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant */
	var BaseDefinitionsInformantClass = classes.BaseDefinitionsInformant = function BaseDefinitionsInformantClass(value) {
		if (!(this instanceof BaseDefinitionsInformantClass)) return new BaseDefinitionsInformantClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.BaseDefinitionsInformantPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsInformantClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsInformantClass.prototype.constructor = BaseDefinitionsInformantClass;
	BaseDefinitionsInformantClass.description = "The person or entity that provided the information in the entry, as distinct from the actor creating the entry, e.g. the subject (patient), medical professional, family member, device or software program.\nConcepts: http://ncimeta.nci.nih.gov:C0449416";
	BaseDefinitionsInformantClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant";
	BaseDefinitionsInformantClass.links = {};
	BaseDefinitionsInformantClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsInformantPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant"});
		}
		return errors;
	}
	BaseDefinitionsInformantClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsInformantClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsInformantClass, BaseDefinitionsInformantClass.Value, {
		get: function() { return BaseDefinitionsInformantClass.Value; },
		set: function(newValue) { BaseDefinitionsInformantClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author */
	var BaseDefinitionsAuthorClass = classes.BaseDefinitionsAuthor = function BaseDefinitionsAuthorClass(value) {
		if (!(this instanceof BaseDefinitionsAuthorClass)) return new BaseDefinitionsAuthorClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsAuthorPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAuthorClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAuthorClass.prototype.constructor = BaseDefinitionsAuthorClass;
	BaseDefinitionsAuthorClass.description = "The person or organization who created the entry and is responsible for (and may certify) its content.";
	BaseDefinitionsAuthorClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author";
	BaseDefinitionsAuthorClass.links = {};
	BaseDefinitionsAuthorClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthorPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author"});
		}
		return errors;
	}
	BaseDefinitionsAuthorClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAuthorClass, BaseDefinitionsAuthorClass.Value, {
		get: function() { return BaseDefinitionsAuthorClass.Value; },
		set: function(newValue) { BaseDefinitionsAuthorClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter */
	var BaseDefinitionsAssociatedEncounterClass = classes.BaseDefinitionsAssociatedEncounter = function BaseDefinitionsAssociatedEncounterClass(value) {
		if (!(this instanceof BaseDefinitionsAssociatedEncounterClass)) return new BaseDefinitionsAssociatedEncounterClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsAssociatedEncounterPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAssociatedEncounterClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAssociatedEncounterClass.prototype.constructor = BaseDefinitionsAssociatedEncounterClass;
	BaseDefinitionsAssociatedEncounterClass.description = "The encounter or episode of care that led to creation of this entry.";
	BaseDefinitionsAssociatedEncounterClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter";
	BaseDefinitionsAssociatedEncounterClass.links = {};
	BaseDefinitionsAssociatedEncounterClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounterPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAssociatedEncounterClass, BaseDefinitionsAssociatedEncounterClass.Value, {
		get: function() { return BaseDefinitionsAssociatedEncounterClass.Value; },
		set: function(newValue) { BaseDefinitionsAssociatedEncounterClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate */
	var BaseDefinitionsOriginalCreationDateClass = classes.BaseDefinitionsOriginalCreationDate = function BaseDefinitionsOriginalCreationDateClass(value) {
		if (!(this instanceof BaseDefinitionsOriginalCreationDateClass)) return new BaseDefinitionsOriginalCreationDateClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsOriginalCreationDateClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsOriginalCreationDateClass.prototype.constructor = BaseDefinitionsOriginalCreationDateClass;
	BaseDefinitionsOriginalCreationDateClass.description = "The point in time when the information was recorded in the system of record.\nConcepts: http://ncimeta.nci.nih.gov:C3669169";
	BaseDefinitionsOriginalCreationDateClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate";
	BaseDefinitionsOriginalCreationDateClass.links = {};
	BaseDefinitionsOriginalCreationDateClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsOriginalCreationDatePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate"});
		}
		return errors;
	}
	BaseDefinitionsOriginalCreationDateClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsOriginalCreationDateClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsOriginalCreationDateClass, BaseDefinitionsOriginalCreationDateClass.Value, {
		get: function() { return BaseDefinitionsOriginalCreationDateClass.Value; },
		set: function(newValue) { BaseDefinitionsOriginalCreationDateClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate */
	var BaseDefinitionsLastUpdateDateClass = classes.BaseDefinitionsLastUpdateDate = function BaseDefinitionsLastUpdateDateClass(value) {
		if (!(this instanceof BaseDefinitionsLastUpdateDateClass)) return new BaseDefinitionsLastUpdateDateClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsLastUpdateDateClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsLastUpdateDateClass.prototype.constructor = BaseDefinitionsLastUpdateDateClass;
	BaseDefinitionsLastUpdateDateClass.description = "A date that the entry was changed.";
	BaseDefinitionsLastUpdateDateClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate";
	BaseDefinitionsLastUpdateDateClass.links = {};
	BaseDefinitionsLastUpdateDateClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsLastUpdateDatePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate"});
		}
		return errors;
	}
	BaseDefinitionsLastUpdateDateClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsLastUpdateDateClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsLastUpdateDateClass, BaseDefinitionsLastUpdateDateClass.Value, {
		get: function() { return BaseDefinitionsLastUpdateDateClass.Value; },
		set: function(newValue) { BaseDefinitionsLastUpdateDateClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language */
	var BaseDefinitionsLanguageClass = classes.BaseDefinitionsLanguage = function BaseDefinitionsLanguageClass(value) {
		if (!(this instanceof BaseDefinitionsLanguageClass)) return new BaseDefinitionsLanguageClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsLanguageClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsLanguageClass.prototype.constructor = BaseDefinitionsLanguageClass;
	BaseDefinitionsLanguageClass.description = "A human language, spoken or written.\nConcepts: http://ncimeta.nci.nih.gov:C0023008";
	BaseDefinitionsLanguageClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language";
	BaseDefinitionsLanguageClass.links = {};
	BaseDefinitionsLanguageClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Language"});
		}
		return errors;
	}
	BaseDefinitionsLanguageClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsLanguageClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsLanguageClass, BaseDefinitionsLanguageClass.Value, {
		get: function() { return BaseDefinitionsLanguageClass.Value; },
		set: function(newValue) { BaseDefinitionsLanguageClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry/properties/EntryType */
	var BaseDefinitionsEntryPropertiesEntryTypeClass = classes.BaseDefinitionsEntryPropertiesEntryType = {};
	BaseDefinitionsEntryPropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry/properties/EntryType";
	BaseDefinitionsEntryPropertiesEntryTypeClass.links = {};
	BaseDefinitionsEntryPropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length < 1) {
				errors.push({code: 400, params: {length: value.length, minimum: 1}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry/properties/EntryType"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.BaseDefinitionsEntryType.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry/properties/EntryType"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Entry/properties/EntryType"});
		}
		return errors;
	}
	BaseDefinitionsEntryPropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryPropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus */
	var ConditionDefinitionsClinicalStatusClass = classes.ConditionDefinitionsClinicalStatus = function ConditionDefinitionsClinicalStatusClass(value) {
		if (!(this instanceof ConditionDefinitionsClinicalStatusClass)) return new ConditionDefinitionsClinicalStatusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsClinicalStatusClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsClinicalStatusClass.prototype.constructor = ConditionDefinitionsClinicalStatusClass;
	ConditionDefinitionsClinicalStatusClass.description = "A flag indicating whether the condition is active or inactive, recurring, in remission, or resolved (as of the last update of the Condition).";
	ConditionDefinitionsClinicalStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus";
	ConditionDefinitionsClinicalStatusClass.links = {};
	ConditionDefinitionsClinicalStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ConditionDefinitionsClinicalStatusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus"});
		}
		return errors;
	}
	ConditionDefinitionsClinicalStatusClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsClinicalStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsClinicalStatusClass, ConditionDefinitionsClinicalStatusClass.Value, {
		get: function() { return ConditionDefinitionsClinicalStatusClass.Value; },
		set: function(newValue) { ConditionDefinitionsClinicalStatusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList */
	var ConditionDefinitionsIncludeOnProblemListClass = classes.ConditionDefinitionsIncludeOnProblemList = function ConditionDefinitionsIncludeOnProblemListClass(value) {
		if (!(this instanceof ConditionDefinitionsIncludeOnProblemListClass)) return new ConditionDefinitionsIncludeOnProblemListClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsIncludeOnProblemListClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsIncludeOnProblemListClass.prototype.constructor = ConditionDefinitionsIncludeOnProblemListClass;
	ConditionDefinitionsIncludeOnProblemListClass.description = "Whether or not to include this condition on the subject's current problem list.";
	ConditionDefinitionsIncludeOnProblemListClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList";
	ConditionDefinitionsIncludeOnProblemListClass.links = {};
	ConditionDefinitionsIncludeOnProblemListClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ConditionDefinitionsIncludeOnProblemListPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList"});
		}
		return errors;
	}
	ConditionDefinitionsIncludeOnProblemListClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsIncludeOnProblemListClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsIncludeOnProblemListClass, ConditionDefinitionsIncludeOnProblemListClass.Value, {
		get: function() { return ConditionDefinitionsIncludeOnProblemListClass.Value; },
		set: function(newValue) { ConditionDefinitionsIncludeOnProblemListClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset */
	var ConditionDefinitionsOnsetClass = classes.ConditionDefinitionsOnset = function ConditionDefinitionsOnsetClass(value) {
		if (!(this instanceof ConditionDefinitionsOnsetClass)) return new ConditionDefinitionsOnsetClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedTemporalContext(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsOnsetClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsOnsetClass.prototype.constructor = ConditionDefinitionsOnsetClass;
	ConditionDefinitionsOnsetClass.description = "The beginning or first appearance of a mental or physical disorder.\nConcepts: http://ncimeta.nci.nih.gov:C0277793";
	ConditionDefinitionsOnsetClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset";
	ConditionDefinitionsOnsetClass.links = {};
	ConditionDefinitionsOnsetClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedTemporalContext.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Onset"});
		}
		return errors;
	}
	ConditionDefinitionsOnsetClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsOnsetClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsOnsetClass, ConditionDefinitionsOnsetClass.Value, {
		get: function() { return ConditionDefinitionsOnsetClass.Value; },
		set: function(newValue) { ConditionDefinitionsOnsetClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized */
	var ConditionDefinitionsWhenClinicallyRecognizedClass = classes.ConditionDefinitionsWhenClinicallyRecognized = function ConditionDefinitionsWhenClinicallyRecognizedClass(value) {
		if (!(this instanceof ConditionDefinitionsWhenClinicallyRecognizedClass)) return new ConditionDefinitionsWhenClinicallyRecognizedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedTemporalContext(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsWhenClinicallyRecognizedClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsWhenClinicallyRecognizedClass.prototype.constructor = ConditionDefinitionsWhenClinicallyRecognizedClass;
	ConditionDefinitionsWhenClinicallyRecognizedClass.description = "The time at which a condition or condition was first identified in a healthcare context.";
	ConditionDefinitionsWhenClinicallyRecognizedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized";
	ConditionDefinitionsWhenClinicallyRecognizedClass.links = {};
	ConditionDefinitionsWhenClinicallyRecognizedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedTemporalContext.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/WhenClinicallyRecognized"});
		}
		return errors;
	}
	ConditionDefinitionsWhenClinicallyRecognizedClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsWhenClinicallyRecognizedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsWhenClinicallyRecognizedClass, ConditionDefinitionsWhenClinicallyRecognizedClass.Value, {
		get: function() { return ConditionDefinitionsWhenClinicallyRecognizedClass.Value; },
		set: function(newValue) { ConditionDefinitionsWhenClinicallyRecognizedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting */
	var ConditionDefinitionsPreexistingClass = classes.ConditionDefinitionsPreexisting = function ConditionDefinitionsPreexistingClass(value) {
		if (!(this instanceof ConditionDefinitionsPreexistingClass)) return new ConditionDefinitionsPreexistingClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsPreexistingClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsPreexistingClass.prototype.constructor = ConditionDefinitionsPreexistingClass;
	ConditionDefinitionsPreexistingClass.description = "If the problem or condition existed before the current episode of care.";
	ConditionDefinitionsPreexistingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting";
	ConditionDefinitionsPreexistingClass.links = {};
	ConditionDefinitionsPreexistingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ConditionDefinitionsPreexistingPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting"});
		}
		return errors;
	}
	ConditionDefinitionsPreexistingClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsPreexistingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsPreexistingClass, ConditionDefinitionsPreexistingClass.Value, {
		get: function() { return ConditionDefinitionsPreexistingClass.Value; },
		set: function(newValue) { ConditionDefinitionsPreexistingClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement */
	var ConditionDefinitionsAbatementClass = classes.ConditionDefinitionsAbatement = function ConditionDefinitionsAbatementClass(value) {
		if (!(this instanceof ConditionDefinitionsAbatementClass)) return new ConditionDefinitionsAbatementClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedTemporalContext(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsAbatementClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsAbatementClass.prototype.constructor = ConditionDefinitionsAbatementClass;
	ConditionDefinitionsAbatementClass.description = "The end, remission or resolution.\nConcepts: http://ncimeta.nci.nih.gov:C1880019";
	ConditionDefinitionsAbatementClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement";
	ConditionDefinitionsAbatementClass.links = {};
	ConditionDefinitionsAbatementClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedTemporalContext.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Abatement"});
		}
		return errors;
	}
	ConditionDefinitionsAbatementClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsAbatementClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsAbatementClass, ConditionDefinitionsAbatementClass.Value, {
		get: function() { return ConditionDefinitionsAbatementClass.Value; },
		set: function(newValue) { ConditionDefinitionsAbatementClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity */
	var ConditionDefinitionsSeverityClass = classes.ConditionDefinitionsSeverity = function ConditionDefinitionsSeverityClass(value) {
		if (!(this instanceof ConditionDefinitionsSeverityClass)) return new ConditionDefinitionsSeverityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsSeverityClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsSeverityClass.prototype.constructor = ConditionDefinitionsSeverityClass;
	ConditionDefinitionsSeverityClass.description = "Degree of harshness or extent of a symptom, disorder, or condition.\nConcepts: http://ncimeta.nci.nih.gov:C0392364";
	ConditionDefinitionsSeverityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity";
	ConditionDefinitionsSeverityClass.links = {};
	ConditionDefinitionsSeverityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Severity"});
		}
		return errors;
	}
	ConditionDefinitionsSeverityClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsSeverityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsSeverityClass, ConditionDefinitionsSeverityClass.Value, {
		get: function() { return ConditionDefinitionsSeverityClass.Value; },
		set: function(newValue) { ConditionDefinitionsSeverityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality */
	var ConditionDefinitionsCriticalityClass = classes.ConditionDefinitionsCriticality = function ConditionDefinitionsCriticalityClass(value) {
		if (!(this instanceof ConditionDefinitionsCriticalityClass)) return new ConditionDefinitionsCriticalityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsCriticalityClass.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsCriticalityClass.prototype.constructor = ConditionDefinitionsCriticalityClass;
	ConditionDefinitionsCriticalityClass.description = "The potential clinical harm associated with a condition. When the worst case result is assessed to have a life-threatening or organ system threatening potential, it is considered to be of high criticality.\nConcepts: Criticality (http://ncimeta.nci.nih.gov:C3858539)";
	ConditionDefinitionsCriticalityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality";
	ConditionDefinitionsCriticalityClass.links = {};
	ConditionDefinitionsCriticalityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ConditionDefinitionsCriticalityPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality"});
		}
		return errors;
	}
	ConditionDefinitionsCriticalityClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsCriticalityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsCriticalityClass, ConditionDefinitionsCriticalityClass.Value, {
		get: function() { return ConditionDefinitionsCriticalityClass.Value; },
		set: function(newValue) { ConditionDefinitionsCriticalityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1 */
	var ConditionDefinitionsConditionAllOf1Class = classes.ConditionDefinitionsConditionAllOf1 = function ConditionDefinitionsConditionAllOf1Class(value) {
		if (!(this instanceof ConditionDefinitionsConditionAllOf1Class)) return new ConditionDefinitionsConditionAllOf1Class(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType)) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.ClinicalStatus !== "undefined") {
			this.ClinicalStatus = value.ClinicalStatus;
		}
		if (this.ClinicalStatus && !Array.isArray(this.ClinicalStatus)) {
			this.ClinicalStatus = new classes.ConditionDefinitionsClinicalStatus(this.ClinicalStatus);
		}
		if (typeof value.IncludeOnProblemList !== "undefined") {
			this.IncludeOnProblemList = value.IncludeOnProblemList;
		}
		if (this.IncludeOnProblemList && !Array.isArray(this.IncludeOnProblemList) && this.IncludeOnProblemList) {
			this.IncludeOnProblemList = new classes.ConditionDefinitionsIncludeOnProblemList(this.IncludeOnProblemList);
		}
		if (typeof value.Onset !== "undefined") {
			this.Onset = value.Onset;
		}
		if (this.Onset && !Array.isArray(this.Onset) && this.Onset) {
			this.Onset = new classes.ConditionDefinitionsOnset(this.Onset);
		}
		if (typeof value.WhenClinicallyRecognized !== "undefined") {
			this.WhenClinicallyRecognized = value.WhenClinicallyRecognized;
		}
		if (this.WhenClinicallyRecognized && !Array.isArray(this.WhenClinicallyRecognized) && this.WhenClinicallyRecognized) {
			this.WhenClinicallyRecognized = new classes.ConditionDefinitionsWhenClinicallyRecognized(this.WhenClinicallyRecognized);
		}
		if (typeof value.Preexisting !== "undefined") {
			this.Preexisting = value.Preexisting;
		}
		if (this.Preexisting && !Array.isArray(this.Preexisting) && this.Preexisting) {
			this.Preexisting = new classes.ConditionDefinitionsPreexisting(this.Preexisting);
		}
		if (typeof value.Abatement !== "undefined") {
			this.Abatement = value.Abatement;
		}
		if (this.Abatement && !Array.isArray(this.Abatement) && this.Abatement) {
			this.Abatement = new classes.ConditionDefinitionsAbatement(this.Abatement);
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (typeof value.Severity !== "undefined") {
			this.Severity = value.Severity;
		}
		if (this.Severity && !Array.isArray(this.Severity) && this.Severity) {
			this.Severity = new classes.ConditionDefinitionsSeverity(this.Severity);
		}
		if (typeof value.Criticality !== "undefined") {
			this.Criticality = value.Criticality;
		}
		if (this.Criticality && !Array.isArray(this.Criticality) && this.Criticality) {
			this.Criticality = new classes.ConditionDefinitionsCriticality(this.Criticality);
		}
		if (typeof value.Stage !== "undefined") {
			this.Stage = value.Stage;
		}
		if (this.Stage && !Array.isArray(this.Stage) && this.Stage) {
			this.Stage = new classes.ConditionDefinitionsStage(this.Stage);
		}
		if (typeof value.Observation !== "undefined") {
			this.Observation = value.Observation;
		}
		
		superclass.apply(this, arguments);
	};
	ConditionDefinitionsConditionAllOf1Class.prototype = Object.create(superclass.prototype);
	ConditionDefinitionsConditionAllOf1Class.prototype.constructor = ConditionDefinitionsConditionAllOf1Class;
	ConditionDefinitionsConditionAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1";
	ConditionDefinitionsConditionAllOf1Class.links = {};
	ConditionDefinitionsConditionAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			} else {
				errors.push({code: 302, params: {key: "SpecificType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.ConditionDefinitionsConditionAllOf1PropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("ClinicalStatus" in value) {
				errors = errors.concat(classes.ConditionDefinitionsClinicalStatus.validationErrors(value.ClinicalStatus, dataPath + "/ClinicalStatus", missing));
			} else {
				errors.push({code: 302, params: {key: "ClinicalStatus"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1"});
			}
			if ("IncludeOnProblemList" in value) {
				errors = errors.concat(classes.ConditionDefinitionsIncludeOnProblemList.validationErrors(value.IncludeOnProblemList, dataPath + "/IncludeOnProblemList", missing));
			}
			if ("Onset" in value) {
				errors = errors.concat(classes.ConditionDefinitionsOnset.validationErrors(value.Onset, dataPath + "/Onset", missing));
			}
			if ("WhenClinicallyRecognized" in value) {
				errors = errors.concat(classes.ConditionDefinitionsWhenClinicallyRecognized.validationErrors(value.WhenClinicallyRecognized, dataPath + "/WhenClinicallyRecognized", missing));
			}
			if ("Preexisting" in value) {
				errors = errors.concat(classes.ConditionDefinitionsPreexisting.validationErrors(value.Preexisting, dataPath + "/Preexisting", missing));
			}
			if ("Abatement" in value) {
				errors = errors.concat(classes.ConditionDefinitionsAbatement.validationErrors(value.Abatement, dataPath + "/Abatement", missing));
			}
			if ("BodySite" in value) {
				errors = errors.concat(classes.ConditionDefinitionsConditionAllOf1PropertiesBodySite.validationErrors(value.BodySite, dataPath + "/BodySite", missing));
			}
			if ("Severity" in value) {
				errors = errors.concat(classes.ConditionDefinitionsSeverity.validationErrors(value.Severity, dataPath + "/Severity", missing));
			}
			if ("Criticality" in value) {
				errors = errors.concat(classes.ConditionDefinitionsCriticality.validationErrors(value.Criticality, dataPath + "/Criticality", missing));
			}
			if ("Stage" in value) {
				errors = errors.concat(classes.ConditionDefinitionsStage.validationErrors(value.Stage, dataPath + "/Stage", missing));
			}
			if ("Observation" in value) {
				errors = errors.concat(classes.ConditionDefinitionsConditionAllOf1PropertiesObservation.validationErrors(value.Observation, dataPath + "/Observation", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1"});
		}
		return errors;
	}
	ConditionDefinitionsConditionAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsConditionAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.SpecificType, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.SpecificType; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Category, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Category; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.ClinicalStatus, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.ClinicalStatus; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.ClinicalStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.IncludeOnProblemList, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.IncludeOnProblemList; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.IncludeOnProblemList = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Onset, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Onset; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Onset = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.WhenClinicallyRecognized, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.WhenClinicallyRecognized; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.WhenClinicallyRecognized = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Preexisting, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Preexisting; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Preexisting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Abatement, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Abatement; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Abatement = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.BodySite, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.BodySite; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Severity, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Severity; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Severity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Criticality, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Criticality; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Criticality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Stage, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Stage; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Stage = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ConditionDefinitionsConditionAllOf1Class, ConditionDefinitionsConditionAllOf1Class.Observation, {
		get: function() { return ConditionDefinitionsConditionAllOf1Class.Observation; },
		set: function(newValue) { ConditionDefinitionsConditionAllOf1Class.Observation = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers */
	var ObservationDefinitionsPanelMembersClass = classes.ObservationDefinitionsPanelMembers = function ObservationDefinitionsPanelMembersClass(value) {
		if (!(this instanceof ObservationDefinitionsPanelMembersClass)) return new ObservationDefinitionsPanelMembersClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsPanelMembersClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsPanelMembersClass.prototype.constructor = ObservationDefinitionsPanelMembersClass;
	ObservationDefinitionsPanelMembersClass.description = "PanelMembers represent the elements of a group of a related observations. Examples are the measurements that compose a complete blood count (CBC), or the elements of a pathology report. Each member is an independent observation, but the grouping reflects a composite lab order, shared specimen, or a single report author.";
	ObservationDefinitionsPanelMembersClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers";
	ObservationDefinitionsPanelMembersClass.links = {};
	ObservationDefinitionsPanelMembersClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembersPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsPanelMembersClass, ObservationDefinitionsPanelMembersClass.Value, {
		get: function() { return ObservationDefinitionsPanelMembersClass.Value; },
		set: function(newValue) { ObservationDefinitionsPanelMembersClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2 */
	var ObservationDefinitionsPanelAllOf2Class = classes.ObservationDefinitionsPanelAllOf2 = function ObservationDefinitionsPanelAllOf2Class(value) {
		if (!(this instanceof ObservationDefinitionsPanelAllOf2Class)) return new ObservationDefinitionsPanelAllOf2Class(value);
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers)) {
			this.PanelMembers = new classes.ObservationDefinitionsPanelMembers(this.PanelMembers);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsPanelAllOf2Class.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsPanelAllOf2Class.prototype.constructor = ObservationDefinitionsPanelAllOf2Class;
	ObservationDefinitionsPanelAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2";
	ObservationDefinitionsPanelAllOf2Class.links = {};
	ObservationDefinitionsPanelAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2"});
		} else if (typeof value === "object") {
			if ("PanelMembers" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembers.validationErrors(value.PanelMembers, dataPath + "/PanelMembers", missing));
			} else {
				errors.push({code: 302, params: {key: "PanelMembers"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Panel/allOf/2"});
		}
		return errors;
	}
	ObservationDefinitionsPanelAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsPanelAllOf2Class, ObservationDefinitionsPanelAllOf2Class.PanelMembers, {
		get: function() { return ObservationDefinitionsPanelAllOf2Class.PanelMembers; },
		set: function(newValue) { ObservationDefinitionsPanelAllOf2Class.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2/properties/PanelMembers */
	var OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass = classes.OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembers = function OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass(value) {
		if (!(this instanceof OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass)) return new OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.prototype.constructor = OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass;
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/BreastCancerGeneticAnalysis/allOf/2/properties/PanelMembers";
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.links = {};
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsBreastCancerGeneticAnalysisAllOf2PropertiesPanelMembersClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText */
	var CoreDefinitionsDisplayTextClass = classes.CoreDefinitionsDisplayText = function CoreDefinitionsDisplayTextClass(value) {
		if (!(this instanceof CoreDefinitionsDisplayTextClass)) return new CoreDefinitionsDisplayTextClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDisplayTextClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDisplayTextClass.prototype.constructor = CoreDefinitionsDisplayTextClass;
	CoreDefinitionsDisplayTextClass.description = "A string meant for reading by a person, usually accompanying a code.\nConcepts: http://ncimeta.nci.nih.gov:C1548311";
	CoreDefinitionsDisplayTextClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText";
	CoreDefinitionsDisplayTextClass.links = {};
	CoreDefinitionsDisplayTextClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayTextPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText"});
		}
		return errors;
	}
	CoreDefinitionsDisplayTextClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDisplayTextClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDisplayTextClass, CoreDefinitionsDisplayTextClass.Value, {
		get: function() { return CoreDefinitionsDisplayTextClass.Value; },
		set: function(newValue) { CoreDefinitionsDisplayTextClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding */
	var CoreDefinitionsCodeableConceptPropertiesCodingClass = classes.CoreDefinitionsCodeableConceptPropertiesCoding = {};
	CoreDefinitionsCodeableConceptPropertiesCodingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding";
	CoreDefinitionsCodeableConceptPropertiesCodingClass.links = {};
	CoreDefinitionsCodeableConceptPropertiesCodingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsCoding.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeableConcept/properties/Coding"});
		}
		return errors;
	}
	CoreDefinitionsCodeableConceptPropertiesCodingClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeableConceptPropertiesCodingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent */
	var ObservationDefinitionsObservationComponentClass = classes.ObservationDefinitionsObservationComponent = function ObservationDefinitionsObservationComponentClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationComponentClass)) return new ObservationDefinitionsObservationComponentClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsObservationComponentPropertiesValue(this.Value);
		}
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.DataAbsentReason !== "undefined") {
			this.DataAbsentReason = value.DataAbsentReason;
		}
		if (this.DataAbsentReason && !Array.isArray(this.DataAbsentReason) && this.DataAbsentReason) {
			this.DataAbsentReason = new classes.ObservationDefinitionsDataAbsentReason(this.DataAbsentReason);
		}
		if (typeof value.Interpretation !== "undefined") {
			this.Interpretation = value.Interpretation;
		}
		if (this.Interpretation && !Array.isArray(this.Interpretation) && this.Interpretation) {
			this.Interpretation = new classes.LabDefinitionsInterpretation(this.Interpretation);
		}
		if (typeof value.ReferenceRange !== "undefined") {
			this.ReferenceRange = value.ReferenceRange;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationComponentClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationComponentClass.prototype.constructor = ObservationDefinitionsObservationComponentClass;
	ObservationDefinitionsObservationComponentClass.description = "A simplified observation consisting of a type code, value (or data absent reason), reference range, and interpretation. Can be used in place of an observation when a full observation cannot be mapped, for example, in the components of an observation. Note that although Status is required, the value is not mapped to FHIR and is essentially ignored.";
	ObservationDefinitionsObservationComponentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent";
	ObservationDefinitionsObservationComponentClass.links = {};
	ObservationDefinitionsObservationComponentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			}
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("DataAbsentReason" in value) {
				errors = errors.concat(classes.ObservationDefinitionsDataAbsentReason.validationErrors(value.DataAbsentReason, dataPath + "/DataAbsentReason", missing));
			}
			if ("Interpretation" in value) {
				errors = errors.concat(classes.LabDefinitionsInterpretation.validationErrors(value.Interpretation, dataPath + "/Interpretation", missing));
			}
			if ("ReferenceRange" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesReferenceRange.validationErrors(value.ReferenceRange, dataPath + "/ReferenceRange", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsObservationComponentClass, ObservationDefinitionsObservationComponentClass.Value, {
		get: function() { return ObservationDefinitionsObservationComponentClass.Value; },
		set: function(newValue) { ObservationDefinitionsObservationComponentClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationComponentClass, ObservationDefinitionsObservationComponentClass.SpecificType, {
		get: function() { return ObservationDefinitionsObservationComponentClass.SpecificType; },
		set: function(newValue) { ObservationDefinitionsObservationComponentClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationComponentClass, ObservationDefinitionsObservationComponentClass.DataAbsentReason, {
		get: function() { return ObservationDefinitionsObservationComponentClass.DataAbsentReason; },
		set: function(newValue) { ObservationDefinitionsObservationComponentClass.DataAbsentReason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationComponentClass, ObservationDefinitionsObservationComponentClass.Interpretation, {
		get: function() { return ObservationDefinitionsObservationComponentClass.Interpretation; },
		set: function(newValue) { ObservationDefinitionsObservationComponentClass.Interpretation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationComponentClass, ObservationDefinitionsObservationComponentClass.ReferenceRange, {
		get: function() { return ObservationDefinitionsObservationComponentClass.ReferenceRange; },
		set: function(newValue) { ObservationDefinitionsObservationComponentClass.ReferenceRange = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1 */
	var OncologyDefinitionsKi67LabelingIndexAllOf1Class = classes.OncologyDefinitionsKi67LabelingIndexAllOf1 = function OncologyDefinitionsKi67LabelingIndexAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsKi67LabelingIndexAllOf1Class)) return new OncologyDefinitionsKi67LabelingIndexAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.prototype.constructor = OncologyDefinitionsKi67LabelingIndexAllOf1Class;
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1";
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.links = {};
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Ki-67LabelingIndex/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsKi67LabelingIndexAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsKi67LabelingIndexAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsKi67LabelingIndexAllOf1Class, OncologyDefinitionsKi67LabelingIndexAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsKi67LabelingIndexAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsKi67LabelingIndexAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1 */
	var OncologyDefinitionsSPhaseFractionAllOf1Class = classes.OncologyDefinitionsSPhaseFractionAllOf1 = function OncologyDefinitionsSPhaseFractionAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsSPhaseFractionAllOf1Class)) return new OncologyDefinitionsSPhaseFractionAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsSPhaseFractionAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsSPhaseFractionAllOf1Class.prototype.constructor = OncologyDefinitionsSPhaseFractionAllOf1Class;
	OncologyDefinitionsSPhaseFractionAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1";
	OncologyDefinitionsSPhaseFractionAllOf1Class.links = {};
	OncologyDefinitionsSPhaseFractionAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/S-PhaseFraction/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsSPhaseFractionAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsSPhaseFractionAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsSPhaseFractionAllOf1Class, OncologyDefinitionsSPhaseFractionAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsSPhaseFractionAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsSPhaseFractionAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value */
	var ObservationDefinitionsObservationPropertiesValueClass = classes.ObservationDefinitionsObservationPropertiesValue = function ObservationDefinitionsObservationPropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationPropertiesValueClass)) return new ObservationDefinitionsObservationPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationPropertiesValueClass.prototype.constructor = ObservationDefinitionsObservationPropertiesValueClass;
	ObservationDefinitionsObservationPropertiesValueClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value";
	ObservationDefinitionsObservationPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value";
	ObservationDefinitionsObservationPropertiesValueClass.links = {};
	ObservationDefinitionsObservationPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/Value");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason */
	var CoreDefinitionsReasonClass = classes.CoreDefinitionsReason = function CoreDefinitionsReasonClass(value) {
		if (!(this instanceof CoreDefinitionsReasonClass)) return new CoreDefinitionsReasonClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsReasonPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsReasonClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsReasonClass.prototype.constructor = CoreDefinitionsReasonClass;
	CoreDefinitionsReasonClass.description = "The justification for an action or non-action, conclusion, opinion, etc.\nConcepts: http://ncimeta.nci.nih.gov:C0566251";
	CoreDefinitionsReasonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason";
	CoreDefinitionsReasonClass.links = {};
	CoreDefinitionsReasonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason"});
		}
		return errors;
	}
	CoreDefinitionsReasonClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsReasonClass, CoreDefinitionsReasonClass.Value, {
		get: function() { return CoreDefinitionsReasonClass.Value; },
		set: function(newValue) { CoreDefinitionsReasonClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy */
	var ObservationDefinitionsAssociatedStudyClass = classes.ObservationDefinitionsAssociatedStudy = function ObservationDefinitionsAssociatedStudyClass(value) {
		if (!(this instanceof ObservationDefinitionsAssociatedStudyClass)) return new ObservationDefinitionsAssociatedStudyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.ObservationDefinitionsAssociatedStudyPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsAssociatedStudyClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsAssociatedStudyClass.prototype.constructor = ObservationDefinitionsAssociatedStudyClass;
	ObservationDefinitionsAssociatedStudyClass.description = "The clinical trial or other formal study related to this finding.";
	ObservationDefinitionsAssociatedStudyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy";
	ObservationDefinitionsAssociatedStudyClass.links = {};
	ObservationDefinitionsAssociatedStudyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudyPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsAssociatedStudyClass, ObservationDefinitionsAssociatedStudyClass.Value, {
		get: function() { return ObservationDefinitionsAssociatedStudyClass.Value; },
		set: function(newValue) { ObservationDefinitionsAssociatedStudyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status */
	var BaseDefinitionsStatusClass = classes.BaseDefinitionsStatus = function BaseDefinitionsStatusClass(value) {
		if (!(this instanceof BaseDefinitionsStatusClass)) return new BaseDefinitionsStatusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.BaseDefinitionsStatusPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsStatusClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsStatusClass.prototype.constructor = BaseDefinitionsStatusClass;
	BaseDefinitionsStatusClass.description = "The position of affairs at a particular time\nConcepts: http://ncimeta.nci.nih.gov:C0449438";
	BaseDefinitionsStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status";
	BaseDefinitionsStatusClass.links = {};
	BaseDefinitionsStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatusPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status"});
		}
		return errors;
	}
	BaseDefinitionsStatusClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsStatusClass, BaseDefinitionsStatusClass.Value, {
		get: function() { return BaseDefinitionsStatusClass.Value; },
		set: function(newValue) { BaseDefinitionsStatusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/NonOccurrenceModifier */
	var ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass = classes.ObservationDefinitionsObservationPropertiesNonOccurrenceModifier = function ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass)) return new ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.prototype.constructor = ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass;
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/NonOccurrenceModifier";
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/NonOccurrenceModifier";
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.links = {};
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/properties/NonOccurrenceModifier");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationPropertiesNonOccurrenceModifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier */
	var BaseDefinitionsAssertionNegationModifierClass = classes.BaseDefinitionsAssertionNegationModifier = function BaseDefinitionsAssertionNegationModifierClass(value) {
		if (!(this instanceof BaseDefinitionsAssertionNegationModifierClass)) return new BaseDefinitionsAssertionNegationModifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAssertionNegationModifierClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAssertionNegationModifierClass.prototype.constructor = BaseDefinitionsAssertionNegationModifierClass;
	BaseDefinitionsAssertionNegationModifierClass.description = "When true, this modifier indicates that the associated observation, assessment, or finding is false, the condition is absent. For example, if the assessment is 'allergy to peanuts' and the AssertionNegationModifier is true, it means the subject does not have an allergy to peanuts.";
	BaseDefinitionsAssertionNegationModifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier";
	BaseDefinitionsAssertionNegationModifierClass.links = {};
	BaseDefinitionsAssertionNegationModifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssertionNegationModifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier"});
		}
		return errors;
	}
	BaseDefinitionsAssertionNegationModifierClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssertionNegationModifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAssertionNegationModifierClass, BaseDefinitionsAssertionNegationModifierClass.Value, {
		get: function() { return BaseDefinitionsAssertionNegationModifierClass.Value; },
		set: function(newValue) { BaseDefinitionsAssertionNegationModifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason */
	var ObservationDefinitionsDataAbsentReasonClass = classes.ObservationDefinitionsDataAbsentReason = function ObservationDefinitionsDataAbsentReasonClass(value) {
		if (!(this instanceof ObservationDefinitionsDataAbsentReasonClass)) return new ObservationDefinitionsDataAbsentReasonClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsDataAbsentReasonClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsDataAbsentReasonClass.prototype.constructor = ObservationDefinitionsDataAbsentReasonClass;
	ObservationDefinitionsDataAbsentReasonClass.description = "Provides a reason why the value of the observation is missing, if it is expected (some observations are not expected to have a value).";
	ObservationDefinitionsDataAbsentReasonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason";
	ObservationDefinitionsDataAbsentReasonClass.links = {};
	ObservationDefinitionsDataAbsentReasonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/DataAbsentReason"});
		}
		return errors;
	}
	ObservationDefinitionsDataAbsentReasonClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsDataAbsentReasonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsDataAbsentReasonClass, ObservationDefinitionsDataAbsentReasonClass.Value, {
		get: function() { return ObservationDefinitionsDataAbsentReasonClass.Value; },
		set: function(newValue) { ObservationDefinitionsDataAbsentReasonClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime */
	var ObservationDefinitionsClinicallyRelevantTimeClass = classes.ObservationDefinitionsClinicallyRelevantTime = function ObservationDefinitionsClinicallyRelevantTimeClass(value) {
		if (!(this instanceof ObservationDefinitionsClinicallyRelevantTimeClass)) return new ObservationDefinitionsClinicallyRelevantTimeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedTemporalContext(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsClinicallyRelevantTimeClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsClinicallyRelevantTimeClass.prototype.constructor = ObservationDefinitionsClinicallyRelevantTimeClass;
	ObservationDefinitionsClinicallyRelevantTimeClass.description = "The time or time period that the observation addresses. The clinically relevant time is not necessarily when the information is gathered or when a test is carried out, but for example, when a specimen was collected, or the time period referred to by the question. Use a TimePeriod for a measurement or specimen collection continued over a significant period of time (e.g. 24 hour Urine Sodium).";
	ObservationDefinitionsClinicallyRelevantTimeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime";
	ObservationDefinitionsClinicallyRelevantTimeClass.links = {};
	ObservationDefinitionsClinicallyRelevantTimeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedTemporalContext.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ClinicallyRelevantTime"});
		}
		return errors;
	}
	ObservationDefinitionsClinicallyRelevantTimeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsClinicallyRelevantTimeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsClinicallyRelevantTimeClass, ObservationDefinitionsClinicallyRelevantTimeClass.Value, {
		get: function() { return ObservationDefinitionsClinicallyRelevantTimeClass.Value; },
		set: function(newValue) { ObservationDefinitionsClinicallyRelevantTimeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation */
	var LabDefinitionsInterpretationClass = classes.LabDefinitionsInterpretation = function LabDefinitionsInterpretationClass(value) {
		if (!(this instanceof LabDefinitionsInterpretationClass)) return new LabDefinitionsInterpretationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	LabDefinitionsInterpretationClass.prototype = Object.create(superclass.prototype);
	LabDefinitionsInterpretationClass.prototype.constructor = LabDefinitionsInterpretationClass;
	LabDefinitionsInterpretationClass.description = "A clinical interpretation of a measurement.\nConcepts: http://ncimeta.nci.nih.gov:C0420833";
	LabDefinitionsInterpretationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation";
	LabDefinitionsInterpretationClass.links = {};
	LabDefinitionsInterpretationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/lab#/definitions/Interpretation"});
		}
		return errors;
	}
	LabDefinitionsInterpretationClass.validate = function (value) {
		var missing = {};
		var errors = LabDefinitionsInterpretationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(LabDefinitionsInterpretationClass, LabDefinitionsInterpretationClass.Value, {
		get: function() { return LabDefinitionsInterpretationClass.Value; },
		set: function(newValue) { LabDefinitionsInterpretationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment */
	var CoreDefinitionsCommentClass = classes.CoreDefinitionsComment = function CoreDefinitionsCommentClass(value) {
		if (!(this instanceof CoreDefinitionsCommentClass)) return new CoreDefinitionsCommentClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCommentClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCommentClass.prototype.constructor = CoreDefinitionsCommentClass;
	CoreDefinitionsCommentClass.description = "A critical or explanatory note written to discuss, support, explain changes to, or dispute information.\nConcepts: http://ncimeta.nci.nih.gov:C0947611";
	CoreDefinitionsCommentClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment";
	CoreDefinitionsCommentClass.links = {};
	CoreDefinitionsCommentClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCommentPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment"});
		}
		return errors;
	}
	CoreDefinitionsCommentClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCommentClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCommentClass, CoreDefinitionsCommentClass.Value, {
		get: function() { return CoreDefinitionsCommentClass.Value; },
		set: function(newValue) { CoreDefinitionsCommentClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action */
	var BaseDefinitionsActionClass = classes.BaseDefinitionsAction = function BaseDefinitionsActionClass(value) {
		if (!(this instanceof BaseDefinitionsActionClass)) return new BaseDefinitionsActionClass(value);
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType) && this.SpecificType) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && this.NonOccurrenceModifier) {
			this.NonOccurrenceModifier = new classes.BaseDefinitionsNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (typeof value.OccurrenceTime !== "undefined") {
			this.OccurrenceTime = value.OccurrenceTime;
		}
		if (this.OccurrenceTime && !Array.isArray(this.OccurrenceTime) && this.OccurrenceTime) {
			this.OccurrenceTime = new classes.CoreDefinitionsOccurrenceTime(this.OccurrenceTime);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsActionClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsActionClass.prototype.constructor = BaseDefinitionsActionClass;
	BaseDefinitionsActionClass.description = "A deed or endeavor; an action taken to address a undesired health state, behavior, risk, or goal. An action can have various contexts: definitional, occurred/not occurred, ordered/not ordered, recommended/recommended against.";
	BaseDefinitionsActionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action";
	BaseDefinitionsActionClass.links = {};
	BaseDefinitionsActionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		} else if (typeof value === "object") {
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
			if ("OccurrenceTime" in value) {
				errors = errors.concat(classes.CoreDefinitionsOccurrenceTime.validationErrors(value.OccurrenceTime, dataPath + "/OccurrenceTime", missing));
			}
			if ("Participant" in value) {
				errors = errors.concat(classes.BaseDefinitionsActionPropertiesParticipant.validationErrors(value.Participant, dataPath + "/Participant", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action"});
		}
		return errors;
	}
	BaseDefinitionsActionClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.SpecificType, {
		get: function() { return BaseDefinitionsActionClass.SpecificType; },
		set: function(newValue) { BaseDefinitionsActionClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Status, {
		get: function() { return BaseDefinitionsActionClass.Status; },
		set: function(newValue) { BaseDefinitionsActionClass.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Category, {
		get: function() { return BaseDefinitionsActionClass.Category; },
		set: function(newValue) { BaseDefinitionsActionClass.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.NonOccurrenceModifier, {
		get: function() { return BaseDefinitionsActionClass.NonOccurrenceModifier; },
		set: function(newValue) { BaseDefinitionsActionClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Reason, {
		get: function() { return BaseDefinitionsActionClass.Reason; },
		set: function(newValue) { BaseDefinitionsActionClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.OccurrenceTime, {
		get: function() { return BaseDefinitionsActionClass.OccurrenceTime; },
		set: function(newValue) { BaseDefinitionsActionClass.OccurrenceTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsActionClass, BaseDefinitionsActionClass.Participant, {
		get: function() { return BaseDefinitionsActionClass.Participant; },
		set: function(newValue) { BaseDefinitionsActionClass.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2 */
	var ObservationDefinitionsObservationAllOf2Class = classes.ObservationDefinitionsObservationAllOf2 = function ObservationDefinitionsObservationAllOf2Class(value) {
		if (!(this instanceof ObservationDefinitionsObservationAllOf2Class)) return new ObservationDefinitionsObservationAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsObservationAllOf2PropertiesValue(this.Value);
		}
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType)) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.BodySite !== "undefined") {
			this.BodySite = value.BodySite;
		}
		if (this.BodySite && !Array.isArray(this.BodySite) && this.BodySite) {
			this.BodySite = new classes.CoreDefinitionsBodySite(this.BodySite);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (this.Reason && !Array.isArray(this.Reason) && this.Reason) {
			this.Reason = new classes.CoreDefinitionsReason(this.Reason);
		}
		if (typeof value.AssociatedStudy !== "undefined") {
			this.AssociatedStudy = value.AssociatedStudy;
		}
		if (this.AssociatedStudy && !Array.isArray(this.AssociatedStudy) && this.AssociatedStudy) {
			this.AssociatedStudy = new classes.ObservationDefinitionsAssociatedStudy(this.AssociatedStudy);
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && typeof this.NonOccurrenceModifier === "object") {
			this.NonOccurrenceModifier = new classes.ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.AssertionNegationModifier !== "undefined") {
			this.AssertionNegationModifier = value.AssertionNegationModifier;
		}
		if (this.AssertionNegationModifier && !Array.isArray(this.AssertionNegationModifier) && this.AssertionNegationModifier) {
			this.AssertionNegationModifier = new classes.BaseDefinitionsAssertionNegationModifier(this.AssertionNegationModifier);
		}
		if (typeof value.ObservationQualifier !== "undefined") {
			this.ObservationQualifier = value.ObservationQualifier;
		}
		if (typeof value.DataAbsentReason !== "undefined") {
			this.DataAbsentReason = value.DataAbsentReason;
		}
		if (this.DataAbsentReason && !Array.isArray(this.DataAbsentReason) && this.DataAbsentReason) {
			this.DataAbsentReason = new classes.ObservationDefinitionsDataAbsentReason(this.DataAbsentReason);
		}
		if (typeof value.shr_observation_ClinicallyRelevantTime !== "undefined") {
			this.shr_observation_ClinicallyRelevantTime = value.shr_observation_ClinicallyRelevantTime;
		}
		if (this.shr_observation_ClinicallyRelevantTime && !Array.isArray(this.shr_observation_ClinicallyRelevantTime) && this.shr_observation_ClinicallyRelevantTime) {
			this.shr_observation_ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.shr_observation_ClinicallyRelevantTime);
		}
		if (typeof value.ReferenceRange !== "undefined") {
			this.ReferenceRange = value.ReferenceRange;
		}
		if (typeof value.Interpretation !== "undefined") {
			this.Interpretation = value.Interpretation;
		}
		if (this.Interpretation && !Array.isArray(this.Interpretation) && this.Interpretation) {
			this.Interpretation = new classes.LabDefinitionsInterpretation(this.Interpretation);
		}
		if (typeof value.Comment !== "undefined") {
			this.Comment = value.Comment;
		}
		if (this.Comment && !Array.isArray(this.Comment) && this.Comment) {
			this.Comment = new classes.CoreDefinitionsComment(this.Comment);
		}
		if (typeof value.PanelMembers !== "undefined") {
			this.PanelMembers = value.PanelMembers;
		}
		if (this.PanelMembers && !Array.isArray(this.PanelMembers) && this.PanelMembers) {
			this.PanelMembers = new classes.ObservationDefinitionsPanelMembers(this.PanelMembers);
		}
		if (typeof value.Participant !== "undefined") {
			this.Participant = value.Participant;
		}
		if (typeof value.Setting !== "undefined") {
			this.Setting = value.Setting;
		}
		if (typeof value.Location !== "undefined") {
			this.Location = value.Location;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationAllOf2Class.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationAllOf2Class.prototype.constructor = ObservationDefinitionsObservationAllOf2Class;
	ObservationDefinitionsObservationAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2";
	ObservationDefinitionsObservationAllOf2Class.links = {};
	ObservationDefinitionsObservationAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			}
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			} else {
				errors.push({code: 302, params: {key: "SpecificType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2"});
			}
			if ("Category" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("BodySite" in value) {
				errors = errors.concat(classes.CoreDefinitionsBodySite.validationErrors(value.BodySite, dataPath + "/BodySite", missing));
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.CoreDefinitionsReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
			if ("AssociatedStudy" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudy.validationErrors(value.AssociatedStudy, dataPath + "/AssociatedStudy", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2"});
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
			if ("Method" in value) {
				errors = errors.concat(classes.ObservationDefinitionsMethod.validationErrors(value.Method, dataPath + "/Method", missing));
			}
			if ("AssertionNegationModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssertionNegationModifier.validationErrors(value.AssertionNegationModifier, dataPath + "/AssertionNegationModifier", missing));
			}
			if ("ObservationQualifier" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesObservationQualifier.validationErrors(value.ObservationQualifier, dataPath + "/ObservationQualifier", missing));
			}
			if ("DataAbsentReason" in value) {
				errors = errors.concat(classes.ObservationDefinitionsDataAbsentReason.validationErrors(value.DataAbsentReason, dataPath + "/DataAbsentReason", missing));
			}
			if ("shr/observation/ClinicallyRelevantTime" in value) {
				errors = errors.concat(classes.ObservationDefinitionsClinicallyRelevantTime.validationErrors(value.shr/observation/ClinicallyRelevantTime, dataPath + "/shr~1observation~1ClinicallyRelevantTime", missing));
			}
			if ("ReferenceRange" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesReferenceRange.validationErrors(value.ReferenceRange, dataPath + "/ReferenceRange", missing));
			}
			if ("Interpretation" in value) {
				errors = errors.concat(classes.LabDefinitionsInterpretation.validationErrors(value.Interpretation, dataPath + "/Interpretation", missing));
			}
			if ("Comment" in value) {
				errors = errors.concat(classes.CoreDefinitionsComment.validationErrors(value.Comment, dataPath + "/Comment", missing));
			}
			if ("PanelMembers" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembers.validationErrors(value.PanelMembers, dataPath + "/PanelMembers", missing));
			}
			if ("Participant" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesParticipant.validationErrors(value.Participant, dataPath + "/Participant", missing));
			}
			if ("Setting" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesSetting.validationErrors(value.Setting, dataPath + "/Setting", missing));
			}
			if ("Location" in value) {
				errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesLocation.validationErrors(value.Location, dataPath + "/Location", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Value, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Value; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.SpecificType, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.SpecificType; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Category, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Category; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.BodySite, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.BodySite; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.BodySite = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Reason, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Reason; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.AssociatedStudy, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.AssociatedStudy; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.AssociatedStudy = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Status, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Status; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.NonOccurrenceModifier, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.NonOccurrenceModifier; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Method, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Method; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.AssertionNegationModifier, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.AssertionNegationModifier; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.AssertionNegationModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.ObservationQualifier, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.ObservationQualifier; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.ObservationQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.DataAbsentReason, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.DataAbsentReason; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.DataAbsentReason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.shr_observation_ClinicallyRelevantTime, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.shr_observation_ClinicallyRelevantTime; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.shr_observation_ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.ReferenceRange, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.ReferenceRange; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.ReferenceRange = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Interpretation, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Interpretation; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Interpretation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Comment, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Comment; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Comment = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.PanelMembers, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.PanelMembers; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.PanelMembers = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Participant, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Participant; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Participant = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Setting, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Setting; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Setting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsObservationAllOf2Class, ObservationDefinitionsObservationAllOf2Class.Location, {
		get: function() { return ObservationDefinitionsObservationAllOf2Class.Location; },
		set: function(newValue) { ObservationDefinitionsObservationAllOf2Class.Location = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1 */
	var OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class = classes.OncologyDefinitionsLymphaticSystemSubdivisionAllOf1 = function OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class)) return new OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.prototype.constructor = OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class;
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1";
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.links = {};
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LymphaticSystemSubdivision/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class, OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsLymphaticSystemSubdivisionAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1 */
	var OncologyDefinitionsLargestLymphNodeSizeAllOf1Class = classes.OncologyDefinitionsLargestLymphNodeSizeAllOf1 = function OncologyDefinitionsLargestLymphNodeSizeAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsLargestLymphNodeSizeAllOf1Class)) return new OncologyDefinitionsLargestLymphNodeSizeAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.prototype.constructor = OncologyDefinitionsLargestLymphNodeSizeAllOf1Class;
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1";
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.links = {};
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/LargestLymphNodeSize/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsLargestLymphNodeSizeAllOf1Class, OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsLargestLymphNodeSizeAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1 */
	var OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class = classes.OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1 = function OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class)) return new OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.prototype.constructor = OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class;
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1";
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.links = {};
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NumberOfLymphNodesInvolved/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class, OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsNumberOfLymphNodesInvolvedAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1 */
	var OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class = classes.OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1 = function OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class)) return new OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.prototype.constructor = OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class;
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1";
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.links = {};
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/DegreeOfLymphaticInvolvement/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class, OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsDegreeOfLymphaticInvolvementAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1 */
	var OncologyDefinitionsTubuleFormationScoreAllOf1Class = classes.OncologyDefinitionsTubuleFormationScoreAllOf1 = function OncologyDefinitionsTubuleFormationScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsTubuleFormationScoreAllOf1Class)) return new OncologyDefinitionsTubuleFormationScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.prototype.constructor = OncologyDefinitionsTubuleFormationScoreAllOf1Class;
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1";
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.links = {};
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TubuleFormationScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsTubuleFormationScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTubuleFormationScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTubuleFormationScoreAllOf1Class, OncologyDefinitionsTubuleFormationScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsTubuleFormationScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsTubuleFormationScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1 */
	var OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class = classes.OncologyDefinitionsNuclearPleomorphismScoreAllOf1 = function OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class)) return new OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.prototype.constructor = OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class;
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1";
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.links = {};
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/NuclearPleomorphismScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class, OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsNuclearPleomorphismScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1 */
	var OncologyDefinitionsMitoticCountScoreAllOf1Class = classes.OncologyDefinitionsMitoticCountScoreAllOf1 = function OncologyDefinitionsMitoticCountScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsMitoticCountScoreAllOf1Class)) return new OncologyDefinitionsMitoticCountScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsMitoticCountScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsMitoticCountScoreAllOf1Class.prototype.constructor = OncologyDefinitionsMitoticCountScoreAllOf1Class;
	OncologyDefinitionsMitoticCountScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1";
	OncologyDefinitionsMitoticCountScoreAllOf1Class.links = {};
	OncologyDefinitionsMitoticCountScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/MitoticCountScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsMitoticCountScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsMitoticCountScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsMitoticCountScoreAllOf1Class, OncologyDefinitionsMitoticCountScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsMitoticCountScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsMitoticCountScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier/properties/Value */
	var CoreDefinitionsIdentifierPropertiesValueClass = classes.CoreDefinitionsIdentifierPropertiesValue = {};
	CoreDefinitionsIdentifierPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier/properties/Value";
	CoreDefinitionsIdentifierPropertiesValueClass.links = {};
	CoreDefinitionsIdentifierPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Identifier/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsIdentifierPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsIdentifierPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2 */
	var ObservationDefinitionsBodyStructureObservationAllOf2Class = classes.ObservationDefinitionsBodyStructureObservationAllOf2 = function ObservationDefinitionsBodyStructureObservationAllOf2Class(value) {
		if (!(this instanceof ObservationDefinitionsBodyStructureObservationAllOf2Class)) return new ObservationDefinitionsBodyStructureObservationAllOf2Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsBodyStructureObservationAllOf2Class.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsBodyStructureObservationAllOf2Class.prototype.constructor = ObservationDefinitionsBodyStructureObservationAllOf2Class;
	ObservationDefinitionsBodyStructureObservationAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2";
	ObservationDefinitionsBodyStructureObservationAllOf2Class.links = {};
	ObservationDefinitionsBodyStructureObservationAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/BodyStructureObservation/allOf/2"});
		}
		return errors;
	}
	ObservationDefinitionsBodyStructureObservationAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsBodyStructureObservationAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsBodyStructureObservationAllOf2Class, ObservationDefinitionsBodyStructureObservationAllOf2Class.Value, {
		get: function() { return ObservationDefinitionsBodyStructureObservationAllOf2Class.Value; },
		set: function(newValue) { ObservationDefinitionsBodyStructureObservationAllOf2Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value */
	var AssessmentDefinitionsAssessmentFocusPropertiesValueClass = classes.AssessmentDefinitionsAssessmentFocusPropertiesValue = function AssessmentDefinitionsAssessmentFocusPropertiesValueClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentFocusPropertiesValueClass)) return new AssessmentDefinitionsAssessmentFocusPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.prototype.constructor = AssessmentDefinitionsAssessmentFocusPropertiesValueClass;
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value";
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.links = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality */
	var AssessmentDefinitionsEvidenceQualityClass = classes.AssessmentDefinitionsEvidenceQuality = function AssessmentDefinitionsEvidenceQualityClass(value) {
		if (!(this instanceof AssessmentDefinitionsEvidenceQualityClass)) return new AssessmentDefinitionsEvidenceQualityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsEvidenceQualityClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsEvidenceQualityClass.prototype.constructor = AssessmentDefinitionsEvidenceQualityClass;
	AssessmentDefinitionsEvidenceQualityClass.description = "An estimate of the quality and/or quantity of the source information that supports the assessment.";
	AssessmentDefinitionsEvidenceQualityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality";
	AssessmentDefinitionsEvidenceQualityClass.links = {};
	AssessmentDefinitionsEvidenceQualityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/EvidenceQuality"});
		}
		return errors;
	}
	AssessmentDefinitionsEvidenceQualityClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsEvidenceQualityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsEvidenceQualityClass, AssessmentDefinitionsEvidenceQualityClass.Value, {
		get: function() { return AssessmentDefinitionsEvidenceQualityClass.Value; },
		set: function(newValue) { AssessmentDefinitionsEvidenceQualityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary */
	var CoreDefinitionsSummaryClass = classes.CoreDefinitionsSummary = function CoreDefinitionsSummaryClass(value) {
		if (!(this instanceof CoreDefinitionsSummaryClass)) return new CoreDefinitionsSummaryClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsSummaryClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsSummaryClass.prototype.constructor = CoreDefinitionsSummaryClass;
	CoreDefinitionsSummaryClass.description = "A shortened version of an item of information, containing only the main points.\nConcepts: http://ncimeta.nci.nih.gov:C1706244";
	CoreDefinitionsSummaryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary";
	CoreDefinitionsSummaryClass.links = {};
	CoreDefinitionsSummaryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsSummaryPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary"});
		}
		return errors;
	}
	CoreDefinitionsSummaryClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsSummaryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsSummaryClass, CoreDefinitionsSummaryClass.Value, {
		get: function() { return CoreDefinitionsSummaryClass.Value; },
		set: function(newValue) { CoreDefinitionsSummaryClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2 */
	var AssessmentDefinitionsAssessmentAllOf2Class = classes.AssessmentDefinitionsAssessmentAllOf2 = function AssessmentDefinitionsAssessmentAllOf2Class(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentAllOf2Class)) return new AssessmentDefinitionsAssessmentAllOf2Class(value);
		if (typeof value.Category !== "undefined") {
			this.Category = value.Category;
		}
		if (typeof value.Status !== "undefined") {
			this.Status = value.Status;
		}
		if (this.Status && !Array.isArray(this.Status)) {
			this.Status = new classes.BaseDefinitionsStatus(this.Status);
		}
		if (typeof value.AssessmentFocus !== "undefined") {
			this.AssessmentFocus = value.AssessmentFocus;
		}
		if (typeof value.AssessmentResult !== "undefined") {
			this.AssessmentResult = value.AssessmentResult;
		}
		if (typeof value.Method !== "undefined") {
			this.Method = value.Method;
		}
		if (this.Method && !Array.isArray(this.Method) && this.Method) {
			this.Method = new classes.ObservationDefinitionsMethod(this.Method);
		}
		if (typeof value.ClinicallyRelevantTime !== "undefined") {
			this.ClinicallyRelevantTime = value.ClinicallyRelevantTime;
		}
		if (this.ClinicallyRelevantTime && !Array.isArray(this.ClinicallyRelevantTime) && this.ClinicallyRelevantTime) {
			this.ClinicallyRelevantTime = new classes.ObservationDefinitionsClinicallyRelevantTime(this.ClinicallyRelevantTime);
		}
		if (typeof value.EvidenceQuality !== "undefined") {
			this.EvidenceQuality = value.EvidenceQuality;
		}
		if (this.EvidenceQuality && !Array.isArray(this.EvidenceQuality) && this.EvidenceQuality) {
			this.EvidenceQuality = new classes.AssessmentDefinitionsEvidenceQuality(this.EvidenceQuality);
		}
		if (typeof value.Evidence !== "undefined") {
			this.Evidence = value.Evidence;
		}
		if (typeof value.Summary !== "undefined") {
			this.Summary = value.Summary;
		}
		if (this.Summary && !Array.isArray(this.Summary) && this.Summary) {
			this.Summary = new classes.CoreDefinitionsSummary(this.Summary);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentAllOf2Class.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentAllOf2Class.prototype.constructor = AssessmentDefinitionsAssessmentAllOf2Class;
	AssessmentDefinitionsAssessmentAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2";
	AssessmentDefinitionsAssessmentAllOf2Class.links = {};
	AssessmentDefinitionsAssessmentAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		} else if (typeof value === "object") {
			if ("Category" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesCategory.validationErrors(value.Category, dataPath + "/Category", missing));
			}
			if ("Status" in value) {
				errors = errors.concat(classes.BaseDefinitionsStatus.validationErrors(value.Status, dataPath + "/Status", missing));
			} else {
				errors.push({code: 302, params: {key: "Status"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
			}
			if ("AssessmentFocus" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocus.validationErrors(value.AssessmentFocus, dataPath + "/AssessmentFocus", missing));
			}
			if ("AssessmentResult" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResult.validationErrors(value.AssessmentResult, dataPath + "/AssessmentResult", missing));
			}
			if ("Method" in value) {
				errors = errors.concat(classes.ObservationDefinitionsMethod.validationErrors(value.Method, dataPath + "/Method", missing));
			}
			if ("ClinicallyRelevantTime" in value) {
				errors = errors.concat(classes.ObservationDefinitionsClinicallyRelevantTime.validationErrors(value.ClinicallyRelevantTime, dataPath + "/ClinicallyRelevantTime", missing));
			}
			if ("EvidenceQuality" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsEvidenceQuality.validationErrors(value.EvidenceQuality, dataPath + "/EvidenceQuality", missing));
			}
			if ("Evidence" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentAllOf2PropertiesEvidence.validationErrors(value.Evidence, dataPath + "/Evidence", missing));
			}
			if ("Summary" in value) {
				errors = errors.concat(classes.CoreDefinitionsSummary.validationErrors(value.Summary, dataPath + "/Summary", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Category, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Category; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Category = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Status, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Status; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Status = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.AssessmentFocus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.AssessmentResult = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Method, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Method; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Method = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.ClinicallyRelevantTime = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.EvidenceQuality = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Evidence, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Evidence; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Evidence = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentAllOf2Class, AssessmentDefinitionsAssessmentAllOf2Class.Summary, {
		get: function() { return AssessmentDefinitionsAssessmentAllOf2Class.Summary; },
		set: function(newValue) { AssessmentDefinitionsAssessmentAllOf2Class.Summary = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1 */
	var OncologyDefinitionsReceptorPositivityPercentageAllOf1Class = classes.OncologyDefinitionsReceptorPositivityPercentageAllOf1 = function OncologyDefinitionsReceptorPositivityPercentageAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsReceptorPositivityPercentageAllOf1Class)) return new OncologyDefinitionsReceptorPositivityPercentageAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.prototype.constructor = OncologyDefinitionsReceptorPositivityPercentageAllOf1Class;
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1";
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.links = {};
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorPositivityPercentage/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorPositivityPercentageAllOf1Class, OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorPositivityPercentageAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1 */
	var OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class = classes.OncologyDefinitionsReceptorAllredTotalScoreAllOf1 = function OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class)) return new OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.prototype.constructor = OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class;
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1";
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.links = {};
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorAllredTotalScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class, OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorAllredTotalScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1 */
	var OncologyDefinitionsReceptorProportionScoreAllOf1Class = classes.OncologyDefinitionsReceptorProportionScoreAllOf1 = function OncologyDefinitionsReceptorProportionScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsReceptorProportionScoreAllOf1Class)) return new OncologyDefinitionsReceptorProportionScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.prototype.constructor = OncologyDefinitionsReceptorProportionScoreAllOf1Class;
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1";
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.links = {};
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorProportionScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorProportionScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorProportionScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorProportionScoreAllOf1Class, OncologyDefinitionsReceptorProportionScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsReceptorProportionScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorProportionScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1 */
	var OncologyDefinitionsReceptorIntensityScoreAllOf1Class = classes.OncologyDefinitionsReceptorIntensityScoreAllOf1 = function OncologyDefinitionsReceptorIntensityScoreAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsReceptorIntensityScoreAllOf1Class)) return new OncologyDefinitionsReceptorIntensityScoreAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.prototype.constructor = OncologyDefinitionsReceptorIntensityScoreAllOf1Class;
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1";
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.links = {};
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ReceptorIntensityScore/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsReceptorIntensityScoreAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsReceptorIntensityScoreAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsReceptorIntensityScoreAllOf1Class, OncologyDefinitionsReceptorIntensityScoreAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsReceptorIntensityScoreAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsReceptorIntensityScoreAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1 */
	var OncologyDefinitionsTStageAllOf1Class = classes.OncologyDefinitionsTStageAllOf1 = function OncologyDefinitionsTStageAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsTStageAllOf1Class)) return new OncologyDefinitionsTStageAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTStageAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTStageAllOf1Class.prototype.constructor = OncologyDefinitionsTStageAllOf1Class;
	OncologyDefinitionsTStageAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1";
	OncologyDefinitionsTStageAllOf1Class.links = {};
	OncologyDefinitionsTStageAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/T-Stage/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsTStageAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTStageAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTStageAllOf1Class, OncologyDefinitionsTStageAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsTStageAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsTStageAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1 */
	var OncologyDefinitionsNStageAllOf1Class = classes.OncologyDefinitionsNStageAllOf1 = function OncologyDefinitionsNStageAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsNStageAllOf1Class)) return new OncologyDefinitionsNStageAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsNStageAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsNStageAllOf1Class.prototype.constructor = OncologyDefinitionsNStageAllOf1Class;
	OncologyDefinitionsNStageAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1";
	OncologyDefinitionsNStageAllOf1Class.links = {};
	OncologyDefinitionsNStageAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/N-Stage/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsNStageAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsNStageAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsNStageAllOf1Class, OncologyDefinitionsNStageAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsNStageAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsNStageAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1 */
	var OncologyDefinitionsMStageAllOf1Class = classes.OncologyDefinitionsMStageAllOf1 = function OncologyDefinitionsMStageAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsMStageAllOf1Class)) return new OncologyDefinitionsMStageAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsMStageAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsMStageAllOf1Class.prototype.constructor = OncologyDefinitionsMStageAllOf1Class;
	OncologyDefinitionsMStageAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1";
	OncologyDefinitionsMStageAllOf1Class.links = {};
	OncologyDefinitionsMStageAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/M-Stage/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsMStageAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsMStageAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsMStageAllOf1Class, OncologyDefinitionsMStageAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsMStageAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsMStageAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent */
	var AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass = classes.AdverseDefinitionsAdverseReactionPropertiesAdverseEvent = function AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass)) return new AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass(value);
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.prototype.constructor = AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass;
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent";
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent";
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.links = {};
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/properties/AdverseEvent");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionPropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1 */
	var AdverseDefinitionsAdverseReactionAllOf1Class = classes.AdverseDefinitionsAdverseReactionAllOf1 = function AdverseDefinitionsAdverseReactionAllOf1Class(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAllOf1Class)) return new AdverseDefinitionsAdverseReactionAllOf1Class(value);
		if (typeof value.AdverseEvent !== "undefined") {
			this.AdverseEvent = value.AdverseEvent;
		}
		if (this.AdverseEvent && !Array.isArray(this.AdverseEvent)) {
			this.AdverseEvent = new classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEvent(this.AdverseEvent);
		}
		if (typeof value.AdverseReactionAttribution !== "undefined") {
			this.AdverseReactionAttribution = value.AdverseReactionAttribution;
		}
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAllOf1Class.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionAllOf1Class.prototype.constructor = AdverseDefinitionsAdverseReactionAllOf1Class;
	AdverseDefinitionsAdverseReactionAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1";
	AdverseDefinitionsAdverseReactionAllOf1Class.links = {};
	AdverseDefinitionsAdverseReactionAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1"});
		} else if (typeof value === "object") {
			if ("AdverseEvent" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEvent.validationErrors(value.AdverseEvent, dataPath + "/AdverseEvent", missing));
			} else {
				errors.push({code: 302, params: {key: "AdverseEvent"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1"});
			}
			if ("AdverseReactionAttribution" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttribution.validationErrors(value.AdverseReactionAttribution, dataPath + "/AdverseReactionAttribution", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionAllOf1Class, AdverseDefinitionsAdverseReactionAllOf1Class.AdverseEvent, {
		get: function() { return AdverseDefinitionsAdverseReactionAllOf1Class.AdverseEvent; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAllOf1Class.AdverseEvent = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAllOf1Class, AdverseDefinitionsAdverseReactionAllOf1Class.AdverseReactionAttribution, {
		get: function() { return AdverseDefinitionsAdverseReactionAllOf1Class.AdverseReactionAttribution; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAllOf1Class.AdverseReactionAttribution = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2/properties/AdverseEvent */
	var OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass = classes.OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEvent = function OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass(value) {
		if (!(this instanceof OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass)) return new OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass(value);
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.prototype.constructor = OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass;
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/ToxicReactionToTreatment/allOf/2/properties/AdverseEvent";
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.links = {};
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsToxicReactionToTreatmentAllOf2PropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units */
	var CoreDefinitionsUnitsClass = classes.CoreDefinitionsUnits = function CoreDefinitionsUnitsClass(value) {
		if (!(this instanceof CoreDefinitionsUnitsClass)) return new CoreDefinitionsUnitsClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCoding(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsUnitsClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsUnitsClass.prototype.constructor = CoreDefinitionsUnitsClass;
	CoreDefinitionsUnitsClass.description = "Code for the unit of measure of the quantity.";
	CoreDefinitionsUnitsClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units";
	CoreDefinitionsUnitsClass.links = {};
	CoreDefinitionsUnitsClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCoding.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Units"});
		}
		return errors;
	}
	CoreDefinitionsUnitsClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsUnitsClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsUnitsClass, CoreDefinitionsUnitsClass.Value, {
		get: function() { return CoreDefinitionsUnitsClass.Value; },
		set: function(newValue) { CoreDefinitionsUnitsClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity/properties/Value */
	var CoreDefinitionsQuantityPropertiesValueClass = classes.CoreDefinitionsQuantityPropertiesValue = {};
	CoreDefinitionsQuantityPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity/properties/Value";
	CoreDefinitionsQuantityPropertiesValueClass.links = {};
	CoreDefinitionsQuantityPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "number"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Quantity/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsQuantityPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsQuantityPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1 */
	var OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class = classes.OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1 = function OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class)) return new OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.prototype.constructor = OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class;
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1";
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.links = {};
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorSecondaryDimensionSize/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class, OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsTumorSecondaryDimensionSizeAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1 */
	var OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class = classes.OncologyDefinitionsSizeOfGrossTumorBedAllOf1 = function OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class)) return new OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.prototype.constructor = OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class;
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1";
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.links = {};
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/SizeOfGrossTumorBed/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class, OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsSizeOfGrossTumorBedAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1 */
	var OncologyDefinitionsTumorMarginsAllOf1Class = classes.OncologyDefinitionsTumorMarginsAllOf1 = function OncologyDefinitionsTumorMarginsAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsTumorMarginsAllOf1Class)) return new OncologyDefinitionsTumorMarginsAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsTumorMarginsAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsTumorMarginsAllOf1Class.prototype.constructor = OncologyDefinitionsTumorMarginsAllOf1Class;
	OncologyDefinitionsTumorMarginsAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1";
	OncologyDefinitionsTumorMarginsAllOf1Class.links = {};
	OncologyDefinitionsTumorMarginsAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/TumorMargins/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsTumorMarginsAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsTumorMarginsAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsTumorMarginsAllOf1Class, OncologyDefinitionsTumorMarginsAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsTumorMarginsAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsTumorMarginsAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1 */
	var OncologyDefinitionsCellularityAllOf1Class = classes.OncologyDefinitionsCellularityAllOf1 = function OncologyDefinitionsCellularityAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsCellularityAllOf1Class)) return new OncologyDefinitionsCellularityAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsCellularityAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsCellularityAllOf1Class.prototype.constructor = OncologyDefinitionsCellularityAllOf1Class;
	OncologyDefinitionsCellularityAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1";
	OncologyDefinitionsCellularityAllOf1Class.links = {};
	OncologyDefinitionsCellularityAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/Cellularity/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsCellularityAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsCellularityAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsCellularityAllOf1Class, OncologyDefinitionsCellularityAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsCellularityAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsCellularityAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1 */
	var OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class = classes.OncologyDefinitionsPercentageInSituCarcinomaAllOf1 = function OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class(value) {
		if (!(this instanceof OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class)) return new OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.prototype = Object.create(superclass.prototype);
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.prototype.constructor = OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class;
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1";
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.links = {};
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/oncology#/definitions/PercentageInSituCarcinoma/allOf/1"});
		}
		return errors;
	}
	OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class, OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.Value, {
		get: function() { return OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.Value; },
		set: function(newValue) { OncologyDefinitionsPercentageInSituCarcinomaAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value */
	var ObservationDefinitionsEvidencePropertiesValueClass = classes.ObservationDefinitionsEvidencePropertiesValue = function ObservationDefinitionsEvidencePropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsEvidencePropertiesValueClass)) return new ObservationDefinitionsEvidencePropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsEvidencePropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsEvidencePropertiesValueClass.prototype.constructor = ObservationDefinitionsEvidencePropertiesValueClass;
	ObservationDefinitionsEvidencePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value";
	ObservationDefinitionsEvidencePropertiesValueClass.links = {};
	ObservationDefinitionsEvidencePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsEvidencePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidencePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description/properties/Value */
	var CoreDefinitionsDescriptionPropertiesValueClass = classes.CoreDefinitionsDescriptionPropertiesValue = {};
	CoreDefinitionsDescriptionPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description/properties/Value";
	CoreDefinitionsDescriptionPropertiesValueClass.links = {};
	CoreDefinitionsDescriptionPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Description/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsDescriptionPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDescriptionPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker/properties/Value */
	var CoreDefinitionsBodySiteMarkerPropertiesValueClass = classes.CoreDefinitionsBodySiteMarkerPropertiesValue = {};
	CoreDefinitionsBodySiteMarkerPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker/properties/Value";
	CoreDefinitionsBodySiteMarkerPropertiesValueClass.links = {};
	CoreDefinitionsBodySiteMarkerPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BodySiteMarker/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsBodySiteMarkerPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsBodySiteMarkerPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId/properties/Value */
	var BaseDefinitionsShrIdPropertiesValueClass = classes.BaseDefinitionsShrIdPropertiesValue = {};
	BaseDefinitionsShrIdPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId/properties/Value";
	BaseDefinitionsShrIdPropertiesValueClass.links = {};
	BaseDefinitionsShrIdPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/ShrId/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsShrIdPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsShrIdPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId/properties/Value */
	var BaseDefinitionsEntryIdPropertiesValueClass = classes.BaseDefinitionsEntryIdPropertiesValue = {};
	BaseDefinitionsEntryIdPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId/properties/Value";
	BaseDefinitionsEntryIdPropertiesValueClass.links = {};
	BaseDefinitionsEntryIdPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryId/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsEntryIdPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryIdPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version/properties/Value */
	var CoreDefinitionsVersionPropertiesValueClass = classes.CoreDefinitionsVersionPropertiesValue = {};
	CoreDefinitionsVersionPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version/properties/Value";
	CoreDefinitionsVersionPropertiesValueClass.links = {};
	CoreDefinitionsVersionPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Version/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsVersionPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsVersionPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value */
	var BaseDefinitionsFocalSubjectPropertiesValueClass = classes.BaseDefinitionsFocalSubjectPropertiesValue = function BaseDefinitionsFocalSubjectPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsFocalSubjectPropertiesValueClass)) return new BaseDefinitionsFocalSubjectPropertiesValueClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsFocalSubjectPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsFocalSubjectPropertiesValueClass.prototype.constructor = BaseDefinitionsFocalSubjectPropertiesValueClass;
	BaseDefinitionsFocalSubjectPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value";
	BaseDefinitionsFocalSubjectPropertiesValueClass.links = {};
	BaseDefinitionsFocalSubjectPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsFocalSubjectPropertiesValueClass, BaseDefinitionsFocalSubjectPropertiesValueClass.ShrId, {
		get: function() { return BaseDefinitionsFocalSubjectPropertiesValueClass.ShrId; },
		set: function(newValue) { BaseDefinitionsFocalSubjectPropertiesValueClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsFocalSubjectPropertiesValueClass, BaseDefinitionsFocalSubjectPropertiesValueClass.EntryType, {
		get: function() { return BaseDefinitionsFocalSubjectPropertiesValueClass.EntryType; },
		set: function(newValue) { BaseDefinitionsFocalSubjectPropertiesValueClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsFocalSubjectPropertiesValueClass, BaseDefinitionsFocalSubjectPropertiesValueClass.EntryId, {
		get: function() { return BaseDefinitionsFocalSubjectPropertiesValueClass.EntryId; },
		set: function(newValue) { BaseDefinitionsFocalSubjectPropertiesValueClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag/properties/Value */
	var BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass = classes.BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValue = {};
	BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag/properties/Value";
	BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass.links = {};
	BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/SubjectIsThirdPartyFlag/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsSubjectIsThirdPartyFlagPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier */
	var BaseDefinitionsNarrativeQualifierClass = classes.BaseDefinitionsNarrativeQualifier = function BaseDefinitionsNarrativeQualifierClass(value) {
		if (!(this instanceof BaseDefinitionsNarrativeQualifierClass)) return new BaseDefinitionsNarrativeQualifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsNarrativeQualifierClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsNarrativeQualifierClass.prototype.constructor = BaseDefinitionsNarrativeQualifierClass;
	BaseDefinitionsNarrativeQualifierClass.description = "Additional information on how the narrative was generated, and the scope of information contained.";
	BaseDefinitionsNarrativeQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier";
	BaseDefinitionsNarrativeQualifierClass.links = {};
	BaseDefinitionsNarrativeQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsNarrativeQualifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier"});
		}
		return errors;
	}
	BaseDefinitionsNarrativeQualifierClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNarrativeQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsNarrativeQualifierClass, BaseDefinitionsNarrativeQualifierClass.Value, {
		get: function() { return BaseDefinitionsNarrativeQualifierClass.Value; },
		set: function(newValue) { BaseDefinitionsNarrativeQualifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative/properties/Value */
	var BaseDefinitionsNarrativePropertiesValueClass = classes.BaseDefinitionsNarrativePropertiesValue = {};
	BaseDefinitionsNarrativePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative/properties/Value";
	BaseDefinitionsNarrativePropertiesValueClass.links = {};
	BaseDefinitionsNarrativePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Narrative/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsNarrativePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNarrativePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant/properties/Value */
	var BaseDefinitionsInformantPropertiesValueClass = classes.BaseDefinitionsInformantPropertiesValue = function BaseDefinitionsInformantPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsInformantPropertiesValueClass)) return new BaseDefinitionsInformantPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsInformantPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsInformantPropertiesValueClass.prototype.constructor = BaseDefinitionsInformantPropertiesValueClass;
	BaseDefinitionsInformantPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant/properties/Value";
	BaseDefinitionsInformantPropertiesValueClass.links = {};
	BaseDefinitionsInformantPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecord.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.ActorDefinitionsPractitioner.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.ActorDefinitionsRelatedPerson.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Informant/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	BaseDefinitionsInformantPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsInformantPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value */
	var BaseDefinitionsAuthorPropertiesValueClass = classes.BaseDefinitionsAuthorPropertiesValue = function BaseDefinitionsAuthorPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsAuthorPropertiesValueClass)) return new BaseDefinitionsAuthorPropertiesValueClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAuthorPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAuthorPropertiesValueClass.prototype.constructor = BaseDefinitionsAuthorPropertiesValueClass;
	BaseDefinitionsAuthorPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value";
	BaseDefinitionsAuthorPropertiesValueClass.links = {};
	BaseDefinitionsAuthorPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthorPropertiesValuePropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthorPropertiesValuePropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.BaseDefinitionsAuthorPropertiesValuePropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsAuthorPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAuthorPropertiesValueClass, BaseDefinitionsAuthorPropertiesValueClass.ShrId, {
		get: function() { return BaseDefinitionsAuthorPropertiesValueClass.ShrId; },
		set: function(newValue) { BaseDefinitionsAuthorPropertiesValueClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsAuthorPropertiesValueClass, BaseDefinitionsAuthorPropertiesValueClass.EntryType, {
		get: function() { return BaseDefinitionsAuthorPropertiesValueClass.EntryType; },
		set: function(newValue) { BaseDefinitionsAuthorPropertiesValueClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsAuthorPropertiesValueClass, BaseDefinitionsAuthorPropertiesValueClass.EntryId, {
		get: function() { return BaseDefinitionsAuthorPropertiesValueClass.EntryId; },
		set: function(newValue) { BaseDefinitionsAuthorPropertiesValueClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value */
	var BaseDefinitionsAssociatedEncounterPropertiesValueClass = classes.BaseDefinitionsAssociatedEncounterPropertiesValue = function BaseDefinitionsAssociatedEncounterPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsAssociatedEncounterPropertiesValueClass)) return new BaseDefinitionsAssociatedEncounterPropertiesValueClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.prototype.constructor = BaseDefinitionsAssociatedEncounterPropertiesValueClass;
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value";
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.links = {};
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsAssociatedEncounterPropertiesValueClass, BaseDefinitionsAssociatedEncounterPropertiesValueClass.ShrId, {
		get: function() { return BaseDefinitionsAssociatedEncounterPropertiesValueClass.ShrId; },
		set: function(newValue) { BaseDefinitionsAssociatedEncounterPropertiesValueClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsAssociatedEncounterPropertiesValueClass, BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryType, {
		get: function() { return BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryType; },
		set: function(newValue) { BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsAssociatedEncounterPropertiesValueClass, BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryId, {
		get: function() { return BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryId; },
		set: function(newValue) { BaseDefinitionsAssociatedEncounterPropertiesValueClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate/properties/Value */
	var BaseDefinitionsOriginalCreationDatePropertiesValueClass = classes.BaseDefinitionsOriginalCreationDatePropertiesValue = {};
	BaseDefinitionsOriginalCreationDatePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate/properties/Value";
	BaseDefinitionsOriginalCreationDatePropertiesValueClass.links = {};
	BaseDefinitionsOriginalCreationDatePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/OriginalCreationDate/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsOriginalCreationDatePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsOriginalCreationDatePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate/properties/Value */
	var BaseDefinitionsLastUpdateDatePropertiesValueClass = classes.BaseDefinitionsLastUpdateDatePropertiesValue = {};
	BaseDefinitionsLastUpdateDatePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate/properties/Value";
	BaseDefinitionsLastUpdateDatePropertiesValueClass.links = {};
	BaseDefinitionsLastUpdateDatePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/LastUpdateDate/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsLastUpdateDatePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsLastUpdateDatePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType */
	var BaseDefinitionsEntryTypeClass = classes.BaseDefinitionsEntryType = function BaseDefinitionsEntryTypeClass(value) {
		if (!(this instanceof BaseDefinitionsEntryTypeClass)) return new BaseDefinitionsEntryTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsEntryTypeClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsEntryTypeClass.prototype.constructor = BaseDefinitionsEntryTypeClass;
	BaseDefinitionsEntryTypeClass.description = "The SHR data element identifier, for example, http://standardhealthrecord.org/allergy/SubstanceRisk. The EntryType array includes the entire 'based on' hierarchy to enable searching for classes of things, for example, searching for all vital signs, or all types of behavioral observations.";
	BaseDefinitionsEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType";
	BaseDefinitionsEntryTypeClass.links = {};
	BaseDefinitionsEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsEntryTypePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType"});
		}
		return errors;
	}
	BaseDefinitionsEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsEntryTypeClass, BaseDefinitionsEntryTypeClass.Value, {
		get: function() { return BaseDefinitionsEntryTypeClass.Value; },
		set: function(newValue) { BaseDefinitionsEntryTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus/properties/Value */
	var ConditionDefinitionsClinicalStatusPropertiesValueClass = classes.ConditionDefinitionsClinicalStatusPropertiesValue = {};
	ConditionDefinitionsClinicalStatusPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus/properties/Value";
	ConditionDefinitionsClinicalStatusPropertiesValueClass.links = {};
	ConditionDefinitionsClinicalStatusPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/ClinicalStatus/properties/Value"});
		}
		return errors;
	}
	ConditionDefinitionsClinicalStatusPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsClinicalStatusPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList/properties/Value */
	var ConditionDefinitionsIncludeOnProblemListPropertiesValueClass = classes.ConditionDefinitionsIncludeOnProblemListPropertiesValue = {};
	ConditionDefinitionsIncludeOnProblemListPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList/properties/Value";
	ConditionDefinitionsIncludeOnProblemListPropertiesValueClass.links = {};
	ConditionDefinitionsIncludeOnProblemListPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/IncludeOnProblemList/properties/Value"});
		}
		return errors;
	}
	ConditionDefinitionsIncludeOnProblemListPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsIncludeOnProblemListPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext */
	var CoreDefinitionsGeneralizedTemporalContextClass = classes.CoreDefinitionsGeneralizedTemporalContext = function CoreDefinitionsGeneralizedTemporalContextClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedTemporalContextClass)) return new CoreDefinitionsGeneralizedTemporalContextClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsGeneralizedTemporalContextPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedTemporalContextClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedTemporalContextClass.prototype.constructor = CoreDefinitionsGeneralizedTemporalContextClass;
	CoreDefinitionsGeneralizedTemporalContextClass.description = "A generalized indicator of a dateTime or an age when an event happened.";
	CoreDefinitionsGeneralizedTemporalContextClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext";
	CoreDefinitionsGeneralizedTemporalContextClass.links = {};
	CoreDefinitionsGeneralizedTemporalContextClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedTemporalContextPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext"});
		}
		return errors;
	}
	CoreDefinitionsGeneralizedTemporalContextClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedTemporalContextClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGeneralizedTemporalContextClass, CoreDefinitionsGeneralizedTemporalContextClass.Value, {
		get: function() { return CoreDefinitionsGeneralizedTemporalContextClass.Value; },
		set: function(newValue) { CoreDefinitionsGeneralizedTemporalContextClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting/properties/Value */
	var ConditionDefinitionsPreexistingPropertiesValueClass = classes.ConditionDefinitionsPreexistingPropertiesValue = {};
	ConditionDefinitionsPreexistingPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting/properties/Value";
	ConditionDefinitionsPreexistingPropertiesValueClass.links = {};
	ConditionDefinitionsPreexistingPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Preexisting/properties/Value"});
		}
		return errors;
	}
	ConditionDefinitionsPreexistingPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsPreexistingPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality/properties/Value */
	var ConditionDefinitionsCriticalityPropertiesValueClass = classes.ConditionDefinitionsCriticalityPropertiesValue = {};
	ConditionDefinitionsCriticalityPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality/properties/Value";
	ConditionDefinitionsCriticalityPropertiesValueClass.links = {};
	ConditionDefinitionsCriticalityPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Criticality/properties/Value"});
		}
		return errors;
	}
	ConditionDefinitionsCriticalityPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsCriticalityPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Category */
	var ConditionDefinitionsConditionAllOf1PropertiesCategoryClass = classes.ConditionDefinitionsConditionAllOf1PropertiesCategory = {};
	ConditionDefinitionsConditionAllOf1PropertiesCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Category";
	ConditionDefinitionsConditionAllOf1PropertiesCategoryClass.links = {};
	ConditionDefinitionsConditionAllOf1PropertiesCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Category"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Category"});
		}
		return errors;
	}
	ConditionDefinitionsConditionAllOf1PropertiesCategoryClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsConditionAllOf1PropertiesCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/BodySite */
	var ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass = classes.ConditionDefinitionsConditionAllOf1PropertiesBodySite = {};
	ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/BodySite";
	ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass.links = {};
	ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsBodySite.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/BodySite"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/BodySite"});
		}
		return errors;
	}
	ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsConditionAllOf1PropertiesBodySiteClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Observation */
	var ConditionDefinitionsConditionAllOf1PropertiesObservationClass = classes.ConditionDefinitionsConditionAllOf1PropertiesObservation = {};
	ConditionDefinitionsConditionAllOf1PropertiesObservationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Observation";
	ConditionDefinitionsConditionAllOf1PropertiesObservationClass.links = {};
	ConditionDefinitionsConditionAllOf1PropertiesObservationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsObservation.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Observation"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/condition#/definitions/Condition/allOf/1/properties/Observation"});
		}
		return errors;
	}
	ConditionDefinitionsConditionAllOf1PropertiesObservationClass.validate = function (value) {
		var missing = {};
		var errors = ConditionDefinitionsConditionAllOf1PropertiesObservationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value */
	var ObservationDefinitionsPanelMembersPropertiesValueClass = classes.ObservationDefinitionsPanelMembersPropertiesValue = {};
	ObservationDefinitionsPanelMembersPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value";
	ObservationDefinitionsPanelMembersPropertiesValueClass.links = {};
	ObservationDefinitionsPanelMembersPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembersPropertiesValueItems.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText/properties/Value */
	var CoreDefinitionsDisplayTextPropertiesValueClass = classes.CoreDefinitionsDisplayTextPropertiesValue = {};
	CoreDefinitionsDisplayTextPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText/properties/Value";
	CoreDefinitionsDisplayTextPropertiesValueClass.links = {};
	CoreDefinitionsDisplayTextPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/DisplayText/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsDisplayTextPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDisplayTextPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding */
	var CoreDefinitionsCodingClass = classes.CoreDefinitionsCoding = function CoreDefinitionsCodingClass(value) {
		if (!(this instanceof CoreDefinitionsCodingClass)) return new CoreDefinitionsCodingClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.CodeSystem !== "undefined") {
			this.CodeSystem = value.CodeSystem;
		}
		if (this.CodeSystem && !Array.isArray(this.CodeSystem) && this.CodeSystem) {
			this.CodeSystem = new classes.CoreDefinitionsCodeSystem(this.CodeSystem);
		}
		if (typeof value.CodeSystemVersion !== "undefined") {
			this.CodeSystemVersion = value.CodeSystemVersion;
		}
		if (this.CodeSystemVersion && !Array.isArray(this.CodeSystemVersion) && this.CodeSystemVersion) {
			this.CodeSystemVersion = new classes.CoreDefinitionsCodeSystemVersion(this.CodeSystemVersion);
		}
		if (typeof value.DisplayText !== "undefined") {
			this.DisplayText = value.DisplayText;
		}
		if (this.DisplayText && !Array.isArray(this.DisplayText) && this.DisplayText) {
			this.DisplayText = new classes.CoreDefinitionsDisplayText(this.DisplayText);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodingClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodingClass.prototype.constructor = CoreDefinitionsCodingClass;
	CoreDefinitionsCodingClass.description = "Coding of a concept, drawn from a controlled vocabulary. Includes the vocabulary and version, if applicable. May include a display text, and a descriptor expressing the intended interpretation of the code.\nConcepts: http://ncimeta.nci.nih.gov:C0805701";
	CoreDefinitionsCodingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding";
	CoreDefinitionsCodingClass.links = {};
	CoreDefinitionsCodingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodingPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			}
			if ("CodeSystem" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeSystem.validationErrors(value.CodeSystem, dataPath + "/CodeSystem", missing));
			}
			if ("CodeSystemVersion" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeSystemVersion.validationErrors(value.CodeSystemVersion, dataPath + "/CodeSystemVersion", missing));
			}
			if ("DisplayText" in value) {
				errors = errors.concat(classes.CoreDefinitionsDisplayText.validationErrors(value.DisplayText, dataPath + "/DisplayText", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding"});
		}
		return errors;
	}
	CoreDefinitionsCodingClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodingClass, CoreDefinitionsCodingClass.Value, {
		get: function() { return CoreDefinitionsCodingClass.Value; },
		set: function(newValue) { CoreDefinitionsCodingClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodingClass, CoreDefinitionsCodingClass.CodeSystem, {
		get: function() { return CoreDefinitionsCodingClass.CodeSystem; },
		set: function(newValue) { CoreDefinitionsCodingClass.CodeSystem = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodingClass, CoreDefinitionsCodingClass.CodeSystemVersion, {
		get: function() { return CoreDefinitionsCodingClass.CodeSystemVersion; },
		set: function(newValue) { CoreDefinitionsCodingClass.CodeSystemVersion = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsCodingClass, CoreDefinitionsCodingClass.DisplayText, {
		get: function() { return CoreDefinitionsCodingClass.DisplayText; },
		set: function(newValue) { CoreDefinitionsCodingClass.DisplayText = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value */
	var ObservationDefinitionsObservationComponentPropertiesValueClass = classes.ObservationDefinitionsObservationComponentPropertiesValue = function ObservationDefinitionsObservationComponentPropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationComponentPropertiesValueClass)) return new ObservationDefinitionsObservationComponentPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationComponentPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationComponentPropertiesValueClass.prototype.constructor = ObservationDefinitionsObservationComponentPropertiesValueClass;
	ObservationDefinitionsObservationComponentPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value";
	ObservationDefinitionsObservationComponentPropertiesValueClass.links = {};
	ObservationDefinitionsObservationComponentPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf2.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf3.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[3] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsRange.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[4] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsRatio.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[5] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf6.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[6] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf7.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[7] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[8] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/ReferenceRange */
	var ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass = classes.ObservationDefinitionsObservationComponentPropertiesReferenceRange = {};
	ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/ReferenceRange";
	ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass.links = {};
	ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsReferenceRange.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/ReferenceRange"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/ReferenceRange"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesReferenceRangeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value */
	var CoreDefinitionsReasonPropertiesValueClass = classes.CoreDefinitionsReasonPropertiesValue = function CoreDefinitionsReasonPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsReasonPropertiesValueClass)) return new CoreDefinitionsReasonPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsReasonPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsReasonPropertiesValueClass.prototype.constructor = CoreDefinitionsReasonPropertiesValueClass;
	CoreDefinitionsReasonPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value";
	CoreDefinitionsReasonPropertiesValueClass.links = {};
	CoreDefinitionsReasonPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValueAnyOf1.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value */
	var ObservationDefinitionsAssociatedStudyPropertiesValueClass = classes.ObservationDefinitionsAssociatedStudyPropertiesValue = function ObservationDefinitionsAssociatedStudyPropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsAssociatedStudyPropertiesValueClass)) return new ObservationDefinitionsAssociatedStudyPropertiesValueClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.prototype.constructor = ObservationDefinitionsAssociatedStudyPropertiesValueClass;
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value";
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.links = {};
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsAssociatedStudyPropertiesValueClass, ObservationDefinitionsAssociatedStudyPropertiesValueClass.ShrId, {
		get: function() { return ObservationDefinitionsAssociatedStudyPropertiesValueClass.ShrId; },
		set: function(newValue) { ObservationDefinitionsAssociatedStudyPropertiesValueClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsAssociatedStudyPropertiesValueClass, ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryType, {
		get: function() { return ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryType; },
		set: function(newValue) { ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsAssociatedStudyPropertiesValueClass, ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryId, {
		get: function() { return ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryId; },
		set: function(newValue) { ObservationDefinitionsAssociatedStudyPropertiesValueClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value */
	var BaseDefinitionsStatusPropertiesValueClass = classes.BaseDefinitionsStatusPropertiesValue = function BaseDefinitionsStatusPropertiesValueClass(value) {
		if (!(this instanceof BaseDefinitionsStatusPropertiesValueClass)) return new BaseDefinitionsStatusPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsStatusPropertiesValueClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsStatusPropertiesValueClass.prototype.constructor = BaseDefinitionsStatusPropertiesValueClass;
	BaseDefinitionsStatusPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value";
	BaseDefinitionsStatusPropertiesValueClass.links = {};
	BaseDefinitionsStatusPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.BaseDefinitionsStatusPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCoding.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	BaseDefinitionsStatusPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier/properties/Value */
	var BaseDefinitionsAssertionNegationModifierPropertiesValueClass = classes.BaseDefinitionsAssertionNegationModifierPropertiesValue = {};
	BaseDefinitionsAssertionNegationModifierPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier/properties/Value";
	BaseDefinitionsAssertionNegationModifierPropertiesValueClass.links = {};
	BaseDefinitionsAssertionNegationModifierPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssertionNegationModifier/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsAssertionNegationModifierPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssertionNegationModifierPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment/properties/Value */
	var CoreDefinitionsCommentPropertiesValueClass = classes.CoreDefinitionsCommentPropertiesValue = {};
	CoreDefinitionsCommentPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment/properties/Value";
	CoreDefinitionsCommentPropertiesValueClass.links = {};
	CoreDefinitionsCommentPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Comment/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCommentPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCommentPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier */
	var BaseDefinitionsNonOccurrenceModifierClass = classes.BaseDefinitionsNonOccurrenceModifier = function BaseDefinitionsNonOccurrenceModifierClass(value) {
		if (!(this instanceof BaseDefinitionsNonOccurrenceModifierClass)) return new BaseDefinitionsNonOccurrenceModifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (this.Reason && !Array.isArray(this.Reason) && this.Reason) {
			this.Reason = new classes.CoreDefinitionsReason(this.Reason);
		}
		
		superclass.apply(this, arguments);
	};
	BaseDefinitionsNonOccurrenceModifierClass.prototype = Object.create(superclass.prototype);
	BaseDefinitionsNonOccurrenceModifierClass.prototype.constructor = BaseDefinitionsNonOccurrenceModifierClass;
	BaseDefinitionsNonOccurrenceModifierClass.description = "When true, indicates either that the event or action documented in the entry did not occur. For example, if immunization is not given, the NonOccurrenceModifier=true will indicate this.\r\nWhen applied to a recommendation, the modifier indicates the action mentioned in the topic should not take place. For example, a request to NOT elevate the head of a bed using the code for elevating the bed, and setting ProhibitedModifier to true. Other examples include do not ambulate, do not flush NG tube, do not take blood pressure on a certain arm, etc. If the SpecificType contains negation and ProhibitedModifier is true, that will reinforce the prohibition, and should not be interpreted as a double negative that equals a positive.";
	BaseDefinitionsNonOccurrenceModifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier";
	BaseDefinitionsNonOccurrenceModifierClass.links = {};
	BaseDefinitionsNonOccurrenceModifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier"});
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.CoreDefinitionsReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier"});
		}
		return errors;
	}
	BaseDefinitionsNonOccurrenceModifierClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNonOccurrenceModifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(BaseDefinitionsNonOccurrenceModifierClass, BaseDefinitionsNonOccurrenceModifierClass.Value, {
		get: function() { return BaseDefinitionsNonOccurrenceModifierClass.Value; },
		set: function(newValue) { BaseDefinitionsNonOccurrenceModifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(BaseDefinitionsNonOccurrenceModifierClass, BaseDefinitionsNonOccurrenceModifierClass.Reason, {
		get: function() { return BaseDefinitionsNonOccurrenceModifierClass.Reason; },
		set: function(newValue) { BaseDefinitionsNonOccurrenceModifierClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime */
	var CoreDefinitionsOccurrenceTimeClass = classes.CoreDefinitionsOccurrenceTime = function CoreDefinitionsOccurrenceTimeClass(value) {
		if (!(this instanceof CoreDefinitionsOccurrenceTimeClass)) return new CoreDefinitionsOccurrenceTimeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsOccurrenceTimePropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsOccurrenceTimeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsOccurrenceTimeClass.prototype.constructor = CoreDefinitionsOccurrenceTimeClass;
	CoreDefinitionsOccurrenceTimeClass.description = "The point in time or span of time in which something happens.";
	CoreDefinitionsOccurrenceTimeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime";
	CoreDefinitionsOccurrenceTimeClass.links = {};
	CoreDefinitionsOccurrenceTimeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsOccurrenceTimePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime"});
		}
		return errors;
	}
	CoreDefinitionsOccurrenceTimeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOccurrenceTimeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsOccurrenceTimeClass, CoreDefinitionsOccurrenceTimeClass.Value, {
		get: function() { return CoreDefinitionsOccurrenceTimeClass.Value; },
		set: function(newValue) { CoreDefinitionsOccurrenceTimeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Category */
	var BaseDefinitionsActionPropertiesCategoryClass = classes.BaseDefinitionsActionPropertiesCategory = {};
	BaseDefinitionsActionPropertiesCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Category";
	BaseDefinitionsActionPropertiesCategoryClass.links = {};
	BaseDefinitionsActionPropertiesCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Category"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Category"});
		}
		return errors;
	}
	BaseDefinitionsActionPropertiesCategoryClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionPropertiesCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Reason */
	var BaseDefinitionsActionPropertiesReasonClass = classes.BaseDefinitionsActionPropertiesReason = {};
	BaseDefinitionsActionPropertiesReasonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Reason";
	BaseDefinitionsActionPropertiesReasonClass.links = {};
	BaseDefinitionsActionPropertiesReasonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsReason.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Reason"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Reason"});
		}
		return errors;
	}
	BaseDefinitionsActionPropertiesReasonClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionPropertiesReasonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Participant */
	var BaseDefinitionsActionPropertiesParticipantClass = classes.BaseDefinitionsActionPropertiesParticipant = {};
	BaseDefinitionsActionPropertiesParticipantClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Participant";
	BaseDefinitionsActionPropertiesParticipantClass.links = {};
	BaseDefinitionsActionPropertiesParticipantClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsParticipant.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Participant"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Action/properties/Participant"});
		}
		return errors;
	}
	BaseDefinitionsActionPropertiesParticipantClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsActionPropertiesParticipantClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value */
	var ObservationDefinitionsObservationAllOf2PropertiesValueClass = classes.ObservationDefinitionsObservationAllOf2PropertiesValue = function ObservationDefinitionsObservationAllOf2PropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationAllOf2PropertiesValueClass)) return new ObservationDefinitionsObservationAllOf2PropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.prototype.constructor = ObservationDefinitionsObservationAllOf2PropertiesValueClass;
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value";
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[3] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsRange.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[4] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsRatio.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[5] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[6] = errors;
		errors = [];
		errors = errors.concat(classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[7] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[8] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/NonOccurrenceModifier */
	var ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass = classes.ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifier = function ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass)) return new ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.prototype.constructor = ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass;
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/NonOccurrenceModifier";
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesNonOccurrenceModifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Category */
	var ObservationDefinitionsObservationAllOf2PropertiesCategoryClass = classes.ObservationDefinitionsObservationAllOf2PropertiesCategory = {};
	ObservationDefinitionsObservationAllOf2PropertiesCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Category";
	ObservationDefinitionsObservationAllOf2PropertiesCategoryClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Category"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Category"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesCategoryClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ObservationQualifier */
	var ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass = classes.ObservationDefinitionsObservationAllOf2PropertiesObservationQualifier = {};
	ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ObservationQualifier";
	ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsObservationQualifier.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ObservationQualifier"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ObservationQualifier"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesObservationQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ReferenceRange */
	var ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass = classes.ObservationDefinitionsObservationAllOf2PropertiesReferenceRange = {};
	ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ReferenceRange";
	ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsReferenceRange.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ReferenceRange"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/ReferenceRange"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesReferenceRangeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Participant */
	var ObservationDefinitionsObservationAllOf2PropertiesParticipantClass = classes.ObservationDefinitionsObservationAllOf2PropertiesParticipant = {};
	ObservationDefinitionsObservationAllOf2PropertiesParticipantClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Participant";
	ObservationDefinitionsObservationAllOf2PropertiesParticipantClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesParticipantClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsParticipant.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Participant"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Participant"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesParticipantClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesParticipantClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Setting */
	var ObservationDefinitionsObservationAllOf2PropertiesSettingClass = classes.ObservationDefinitionsObservationAllOf2PropertiesSetting = {};
	ObservationDefinitionsObservationAllOf2PropertiesSettingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Setting";
	ObservationDefinitionsObservationAllOf2PropertiesSettingClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesSettingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsSetting.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Setting"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Setting"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesSettingClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesSettingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Location */
	var ObservationDefinitionsObservationAllOf2PropertiesLocationClass = classes.ObservationDefinitionsObservationAllOf2PropertiesLocation = {};
	ObservationDefinitionsObservationAllOf2PropertiesLocationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Location";
	ObservationDefinitionsObservationAllOf2PropertiesLocationClass.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesLocationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsLocation.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Location"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Location"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesLocationClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesLocationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0 */
	var AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class = classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0 = function AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class)) return new AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.prototype.constructor = AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class;
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0";
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.links = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class, AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.ShrId, {
		get: function() { return AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.ShrId; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class, AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryType, {
		get: function() { return AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryType; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class, AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryId, {
		get: function() { return AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryId; },
		set: function(newValue) { AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0Class.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary/properties/Value */
	var CoreDefinitionsSummaryPropertiesValueClass = classes.CoreDefinitionsSummaryPropertiesValue = {};
	CoreDefinitionsSummaryPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary/properties/Value";
	CoreDefinitionsSummaryPropertiesValueClass.links = {};
	CoreDefinitionsSummaryPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Summary/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsSummaryPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsSummaryPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Category */
	var AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass = classes.AssessmentDefinitionsAssessmentAllOf2PropertiesCategory = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Category";
	AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass.links = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.BaseDefinitionsCategory.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Category"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Category"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2PropertiesCategoryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentFocus */
	var AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass = classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocus = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentFocus";
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass.links = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentFocus.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentFocus"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentFocus"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentFocusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentResult */
	var AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass = classes.AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResult = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentResult";
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass.links = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.AssessmentDefinitionsAssessmentResult.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentResult"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/AssessmentResult"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2PropertiesAssessmentResultClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Evidence */
	var AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass = classes.AssessmentDefinitionsAssessmentAllOf2PropertiesEvidence = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Evidence";
	AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass.links = {};
	AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ObservationDefinitionsEvidence.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Evidence"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/Assessment/allOf/2/properties/Evidence"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentAllOf2PropertiesEvidenceClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent */
	var AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass = classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEvent = function AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass)) return new AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.prototype.constructor = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass;
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent";
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.links = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass, AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.ShrId, {
		get: function() { return AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.ShrId; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass, AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryType, {
		get: function() { return AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryType; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass, AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryId, {
		get: function() { return AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryId; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseReactionAttribution */
	var AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass = classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttribution = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseReactionAttribution";
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass.links = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttribution.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseReactionAttribution"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseReactionAttribution"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseReactionAttributionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0 */
	var ObservationDefinitionsEvidencePropertiesValueAnyOf0Class = classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0 = function ObservationDefinitionsEvidencePropertiesValueAnyOf0Class(value) {
		if (!(this instanceof ObservationDefinitionsEvidencePropertiesValueAnyOf0Class)) return new ObservationDefinitionsEvidencePropertiesValueAnyOf0Class(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.prototype.constructor = ObservationDefinitionsEvidencePropertiesValueAnyOf0Class;
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0";
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.links = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0"});
		}
		return errors;
	}
	ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsEvidencePropertiesValueAnyOf0Class, ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.ShrId, {
		get: function() { return ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.ShrId; },
		set: function(newValue) { ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsEvidencePropertiesValueAnyOf0Class, ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryType, {
		get: function() { return ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryType; },
		set: function(newValue) { ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsEvidencePropertiesValueAnyOf0Class, ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryId, {
		get: function() { return ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryId; },
		set: function(newValue) { ObservationDefinitionsEvidencePropertiesValueAnyOf0Class.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/ShrId */
	var BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass = classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrId = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/ShrId";
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass.links = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/ShrId"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectPropertiesValuePropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryType */
	var BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass = classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryType = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryType";
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass.links = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryType"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryId */
	var BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass = classes.BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryId = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryId";
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass.links = {};
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/FocalSubject/properties/Value/properties/EntryId"});
		}
		return errors;
	}
	BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsFocalSubjectPropertiesValuePropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier/properties/Value */
	var BaseDefinitionsNarrativeQualifierPropertiesValueClass = classes.BaseDefinitionsNarrativeQualifierPropertiesValue = {};
	BaseDefinitionsNarrativeQualifierPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier/properties/Value";
	BaseDefinitionsNarrativeQualifierPropertiesValueClass.links = {};
	BaseDefinitionsNarrativeQualifierPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NarrativeQualifier/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsNarrativeQualifierPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNarrativeQualifierPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord */
	var DemographicsDefinitionsPersonOfRecordClass = classes.DemographicsDefinitionsPersonOfRecord = function DemographicsDefinitionsPersonOfRecordClass(value) {
		if (!(this instanceof DemographicsDefinitionsPersonOfRecordClass)) return new DemographicsDefinitionsPersonOfRecordClass(value);
		if (typeof value.DateOfBirth !== "undefined") {
			this.DateOfBirth = value.DateOfBirth;
		}
		if (this.DateOfBirth && !Array.isArray(this.DateOfBirth) && this.DateOfBirth) {
			this.DateOfBirth = new classes.ActorDefinitionsDateOfBirth(this.DateOfBirth);
		}
		if (typeof value.PlaceOfBirth !== "undefined") {
			this.PlaceOfBirth = value.PlaceOfBirth;
		}
		if (this.PlaceOfBirth && !Array.isArray(this.PlaceOfBirth) && this.PlaceOfBirth) {
			this.PlaceOfBirth = new classes.DemographicsDefinitionsPlaceOfBirth(this.PlaceOfBirth);
		}
		if (typeof value.MultipleBirth !== "undefined") {
			this.MultipleBirth = value.MultipleBirth;
		}
		if (this.MultipleBirth && !Array.isArray(this.MultipleBirth) && this.MultipleBirth) {
			this.MultipleBirth = new classes.DemographicsDefinitionsMultipleBirth(this.MultipleBirth);
		}
		if (typeof value.BirthSex !== "undefined") {
			this.BirthSex = value.BirthSex;
		}
		if (this.BirthSex && !Array.isArray(this.BirthSex) && this.BirthSex) {
			this.BirthSex = new classes.DemographicsDefinitionsBirthSex(this.BirthSex);
		}
		if (typeof value.AdministrativeGender !== "undefined") {
			this.AdministrativeGender = value.AdministrativeGender;
		}
		if (this.AdministrativeGender && !Array.isArray(this.AdministrativeGender) && this.AdministrativeGender) {
			this.AdministrativeGender = new classes.ActorDefinitionsAdministrativeGender(this.AdministrativeGender);
		}
		if (typeof value.Race !== "undefined") {
			this.Race = value.Race;
		}
		if (this.Race && !Array.isArray(this.Race) && this.Race) {
			this.Race = new classes.DemographicsDefinitionsRace(this.Race);
		}
		if (typeof value.Ethnicity !== "undefined") {
			this.Ethnicity = value.Ethnicity;
		}
		if (this.Ethnicity && !Array.isArray(this.Ethnicity) && this.Ethnicity) {
			this.Ethnicity = new classes.DemographicsDefinitionsEthnicity(this.Ethnicity);
		}
		if (typeof value.MaritalStatus !== "undefined") {
			this.MaritalStatus = value.MaritalStatus;
		}
		if (this.MaritalStatus && !Array.isArray(this.MaritalStatus) && this.MaritalStatus) {
			this.MaritalStatus = new classes.DemographicsDefinitionsMaritalStatus(this.MaritalStatus);
		}
		if (typeof value.MothersMaidenName !== "undefined") {
			this.MothersMaidenName = value.MothersMaidenName;
		}
		if (this.MothersMaidenName && !Array.isArray(this.MothersMaidenName) && this.MothersMaidenName) {
			this.MothersMaidenName = new classes.DemographicsDefinitionsMothersMaidenName(this.MothersMaidenName);
		}
		if (typeof value.FathersName !== "undefined") {
			this.FathersName = value.FathersName;
		}
		if (this.FathersName && !Array.isArray(this.FathersName) && this.FathersName) {
			this.FathersName = new classes.DemographicsDefinitionsFathersName(this.FathersName);
		}
		if (typeof value.SocialSecurityNumber !== "undefined") {
			this.SocialSecurityNumber = value.SocialSecurityNumber;
		}
		if (this.SocialSecurityNumber && !Array.isArray(this.SocialSecurityNumber) && this.SocialSecurityNumber) {
			this.SocialSecurityNumber = new classes.DemographicsDefinitionsSocialSecurityNumber(this.SocialSecurityNumber);
		}
		if (typeof value.DriversLicenseNumber !== "undefined") {
			this.DriversLicenseNumber = value.DriversLicenseNumber;
		}
		if (typeof value.PassportNumber !== "undefined") {
			this.PassportNumber = value.PassportNumber;
		}
		if (typeof value.AddressUsed !== "undefined") {
			this.AddressUsed = value.AddressUsed;
		}
		if (typeof value.Telecom !== "undefined") {
			this.Telecom = value.Telecom;
		}
		if (typeof value.LanguageUsed !== "undefined") {
			this.LanguageUsed = value.LanguageUsed;
		}
		if (typeof value.MedicalInterpreterNeeded !== "undefined") {
			this.MedicalInterpreterNeeded = value.MedicalInterpreterNeeded;
		}
		if (this.MedicalInterpreterNeeded && !Array.isArray(this.MedicalInterpreterNeeded) && this.MedicalInterpreterNeeded) {
			this.MedicalInterpreterNeeded = new classes.DemographicsDefinitionsMedicalInterpreterNeeded(this.MedicalInterpreterNeeded);
		}
		if (typeof value.FamilialRelationship !== "undefined") {
			this.FamilialRelationship = value.FamilialRelationship;
		}
		
		ActorDefinitionsPersonClass.apply(this, arguments);
	};
	DemographicsDefinitionsPersonOfRecordClass.prototype = Object.create(ActorDefinitionsPersonClass.prototype);
	DemographicsDefinitionsPersonOfRecordClass.prototype.constructor = DemographicsDefinitionsPersonOfRecordClass;
	DemographicsDefinitionsPersonOfRecordClass.description = "Extended demographic information about the subject of this SHR.\nConcepts: http://ncimeta.nci.nih.gov:C1299487,http://loinc.org:54125-0";
	DemographicsDefinitionsPersonOfRecordClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord";
	DemographicsDefinitionsPersonOfRecordClass.links = {};
	DemographicsDefinitionsPersonOfRecordClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ActorDefinitionsPerson.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.DateOfBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.DateOfBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.DateOfBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.PlaceOfBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.PlaceOfBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.PlaceOfBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.MultipleBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.MultipleBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.MultipleBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.BirthSex, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.BirthSex; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.BirthSex = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.AdministrativeGender, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.AdministrativeGender; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.AdministrativeGender = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.Race, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.Race; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.Race = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.Ethnicity, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.Ethnicity; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.Ethnicity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.MaritalStatus, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.MaritalStatus; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.MaritalStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.MothersMaidenName, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.MothersMaidenName; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.MothersMaidenName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.FathersName, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.FathersName; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.FathersName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.SocialSecurityNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.SocialSecurityNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.SocialSecurityNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.DriversLicenseNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.DriversLicenseNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.DriversLicenseNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.PassportNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.PassportNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.PassportNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.AddressUsed, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.AddressUsed; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.AddressUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.Telecom, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.Telecom; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.Telecom = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.LanguageUsed, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.LanguageUsed; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.LanguageUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.MedicalInterpreterNeeded, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.MedicalInterpreterNeeded; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.MedicalInterpreterNeeded = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordClass, DemographicsDefinitionsPersonOfRecordClass.FamilialRelationship, {
		get: function() { return DemographicsDefinitionsPersonOfRecordClass.FamilialRelationship; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordClass.FamilialRelationship = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner */
	var ActorDefinitionsPractitionerClass = classes.ActorDefinitionsPractitioner = function ActorDefinitionsPractitionerClass(value) {
		if (!(this instanceof ActorDefinitionsPractitionerClass)) return new ActorDefinitionsPractitionerClass(value);
		if (typeof value.HumanName !== "undefined") {
			this.HumanName = value.HumanName;
		}
		if (typeof value.Affiliation !== "undefined") {
			this.Affiliation = value.Affiliation;
		}
		if (typeof value.NationalProviderIdentifier !== "undefined") {
			this.NationalProviderIdentifier = value.NationalProviderIdentifier;
		}
		if (this.NationalProviderIdentifier && !Array.isArray(this.NationalProviderIdentifier) && this.NationalProviderIdentifier) {
			this.NationalProviderIdentifier = new classes.ActorDefinitionsNationalProviderIdentifier(this.NationalProviderIdentifier);
		}
		if (typeof value.MedicalSpecialty !== "undefined") {
			this.MedicalSpecialty = value.MedicalSpecialty;
		}
		
		ActorDefinitionsPersonClass.apply(this, arguments);
	};
	ActorDefinitionsPractitionerClass.prototype = Object.create(ActorDefinitionsPersonClass.prototype);
	ActorDefinitionsPractitionerClass.prototype.constructor = ActorDefinitionsPractitionerClass;
	ActorDefinitionsPractitionerClass.description = "A person who practices a healing art.\nConcepts: http://ncimeta.nci.nih.gov:C2220264";
	ActorDefinitionsPractitionerClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner";
	ActorDefinitionsPractitionerClass.links = {};
	ActorDefinitionsPractitionerClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ActorDefinitionsPerson.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ActorDefinitionsPractitionerAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ActorDefinitionsPractitionerClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPractitionerClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsPractitionerClass, ActorDefinitionsPractitionerClass.HumanName, {
		get: function() { return ActorDefinitionsPractitionerClass.HumanName; },
		set: function(newValue) { ActorDefinitionsPractitionerClass.HumanName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerClass, ActorDefinitionsPractitionerClass.Affiliation, {
		get: function() { return ActorDefinitionsPractitionerClass.Affiliation; },
		set: function(newValue) { ActorDefinitionsPractitionerClass.Affiliation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerClass, ActorDefinitionsPractitionerClass.NationalProviderIdentifier, {
		get: function() { return ActorDefinitionsPractitionerClass.NationalProviderIdentifier; },
		set: function(newValue) { ActorDefinitionsPractitionerClass.NationalProviderIdentifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerClass, ActorDefinitionsPractitionerClass.MedicalSpecialty, {
		get: function() { return ActorDefinitionsPractitionerClass.MedicalSpecialty; },
		set: function(newValue) { ActorDefinitionsPractitionerClass.MedicalSpecialty = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson */
	var ActorDefinitionsRelatedPersonClass = classes.ActorDefinitionsRelatedPerson = function ActorDefinitionsRelatedPersonClass(value) {
		if (!(this instanceof ActorDefinitionsRelatedPersonClass)) return new ActorDefinitionsRelatedPersonClass(value);
		
		ActorDefinitionsPersonClass.apply(this, arguments);
	};
	ActorDefinitionsRelatedPersonClass.prototype = Object.create(ActorDefinitionsPersonClass.prototype);
	ActorDefinitionsRelatedPersonClass.prototype.constructor = ActorDefinitionsRelatedPersonClass;
	ActorDefinitionsRelatedPersonClass.description = "A person, other than a practitioner or the patient (the person of record) who is relevant to the health or social situation of the subject.";
	ActorDefinitionsRelatedPersonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson";
	ActorDefinitionsRelatedPersonClass.links = {};
	ActorDefinitionsRelatedPersonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.ActorDefinitionsPerson.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.ActorDefinitionsRelatedPersonAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ActorDefinitionsRelatedPersonClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsRelatedPersonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/ShrId */
	var BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass = classes.BaseDefinitionsAuthorPropertiesValuePropertiesShrId = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/ShrId";
	BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass.links = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/ShrId"});
		}
		return errors;
	}
	BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorPropertiesValuePropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryType */
	var BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass = classes.BaseDefinitionsAuthorPropertiesValuePropertiesEntryType = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryType";
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass.links = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryType"});
		}
		return errors;
	}
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorPropertiesValuePropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryId */
	var BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass = classes.BaseDefinitionsAuthorPropertiesValuePropertiesEntryId = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryId";
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass.links = {};
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Author/properties/Value/properties/EntryId"});
		}
		return errors;
	}
	BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAuthorPropertiesValuePropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/ShrId */
	var BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass = classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrId = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/ShrId";
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass.links = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/ShrId"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryType */
	var BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass = classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryType = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryType";
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass.links = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryType"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryId */
	var BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass = classes.BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryId = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryId";
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass.links = {};
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/AssociatedEncounter/properties/Value/properties/EntryId"});
		}
		return errors;
	}
	BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsAssociatedEncounterPropertiesValuePropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType/properties/Value */
	var BaseDefinitionsEntryTypePropertiesValueClass = classes.BaseDefinitionsEntryTypePropertiesValue = {};
	BaseDefinitionsEntryTypePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType/properties/Value";
	BaseDefinitionsEntryTypePropertiesValueClass.links = {};
	BaseDefinitionsEntryTypePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/EntryType/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsEntryTypePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsEntryTypePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext/properties/Value */
	var CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass = classes.CoreDefinitionsGeneralizedTemporalContextPropertiesValue = function CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass)) return new CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.prototype.constructor = CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass;
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext/properties/Value";
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.links = {};
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGeneralizedDateTime.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGeneralizedAge.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGestationalTemporalContext.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedTemporalContext/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedTemporalContextPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items */
	var ObservationDefinitionsPanelMembersPropertiesValueItemsClass = classes.ObservationDefinitionsPanelMembersPropertiesValueItems = function ObservationDefinitionsPanelMembersPropertiesValueItemsClass(value) {
		if (!(this instanceof ObservationDefinitionsPanelMembersPropertiesValueItemsClass)) return new ObservationDefinitionsPanelMembersPropertiesValueItemsClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.prototype.constructor = ObservationDefinitionsPanelMembersPropertiesValueItemsClass;
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items";
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.links = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersPropertiesValueItemsClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersPropertiesValueItemsClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsPanelMembersPropertiesValueItemsClass, ObservationDefinitionsPanelMembersPropertiesValueItemsClass.ShrId, {
		get: function() { return ObservationDefinitionsPanelMembersPropertiesValueItemsClass.ShrId; },
		set: function(newValue) { ObservationDefinitionsPanelMembersPropertiesValueItemsClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsPanelMembersPropertiesValueItemsClass, ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryType, {
		get: function() { return ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryType; },
		set: function(newValue) { ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ObservationDefinitionsPanelMembersPropertiesValueItemsClass, ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryId, {
		get: function() { return ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryId; },
		set: function(newValue) { ObservationDefinitionsPanelMembersPropertiesValueItemsClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem */
	var CoreDefinitionsCodeSystemClass = classes.CoreDefinitionsCodeSystem = function CoreDefinitionsCodeSystemClass(value) {
		if (!(this instanceof CoreDefinitionsCodeSystemClass)) return new CoreDefinitionsCodeSystemClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodeSystemClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodeSystemClass.prototype.constructor = CoreDefinitionsCodeSystemClass;
	CoreDefinitionsCodeSystemClass.description = "A formal terminology system.";
	CoreDefinitionsCodeSystemClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem";
	CoreDefinitionsCodeSystemClass.links = {};
	CoreDefinitionsCodeSystemClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeSystemPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem"});
		}
		return errors;
	}
	CoreDefinitionsCodeSystemClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeSystemClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodeSystemClass, CoreDefinitionsCodeSystemClass.Value, {
		get: function() { return CoreDefinitionsCodeSystemClass.Value; },
		set: function(newValue) { CoreDefinitionsCodeSystemClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion */
	var CoreDefinitionsCodeSystemVersionClass = classes.CoreDefinitionsCodeSystemVersion = function CoreDefinitionsCodeSystemVersionClass(value) {
		if (!(this instanceof CoreDefinitionsCodeSystemVersionClass)) return new CoreDefinitionsCodeSystemVersionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCodeSystemVersionClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCodeSystemVersionClass.prototype.constructor = CoreDefinitionsCodeSystemVersionClass;
	CoreDefinitionsCodeSystemVersionClass.description = "The version of the vocabulary being used, if applicable.";
	CoreDefinitionsCodeSystemVersionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion";
	CoreDefinitionsCodeSystemVersionClass.links = {};
	CoreDefinitionsCodeSystemVersionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeSystemVersionPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion"});
		}
		return errors;
	}
	CoreDefinitionsCodeSystemVersionClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeSystemVersionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCodeSystemVersionClass, CoreDefinitionsCodeSystemVersionClass.Value, {
		get: function() { return CoreDefinitionsCodeSystemVersionClass.Value; },
		set: function(newValue) { CoreDefinitionsCodeSystemVersionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding/properties/Value */
	var CoreDefinitionsCodingPropertiesValueClass = classes.CoreDefinitionsCodingPropertiesValue = {};
	CoreDefinitionsCodingPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding/properties/Value";
	CoreDefinitionsCodingPropertiesValueClass.links = {};
	CoreDefinitionsCodingPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Coding/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCodingPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodingPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/2 */
	var ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class = classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf2 = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/2";
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class.links = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/2"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/2"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesValueAnyOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/3 */
	var ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class = classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf3 = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/3";
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class.links = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/3"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/3"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/3"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesValueAnyOf3Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Range */
	var CoreDefinitionsRangeClass = classes.CoreDefinitionsRange = function CoreDefinitionsRangeClass(value) {
		if (!(this instanceof CoreDefinitionsRangeClass)) return new CoreDefinitionsRangeClass(value);
		if (typeof value.LowerBound !== "undefined") {
			this.LowerBound = value.LowerBound;
		}
		if (this.LowerBound && !Array.isArray(this.LowerBound) && this.LowerBound) {
			this.LowerBound = new classes.CoreDefinitionsLowerBound(this.LowerBound);
		}
		if (typeof value.UpperBound !== "undefined") {
			this.UpperBound = value.UpperBound;
		}
		if (this.UpperBound && !Array.isArray(this.UpperBound) && this.UpperBound) {
			this.UpperBound = new classes.CoreDefinitionsUpperBound(this.UpperBound);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsRangeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsRangeClass.prototype.constructor = CoreDefinitionsRangeClass;
	CoreDefinitionsRangeClass.description = "An interval defined by a quantitative upper and/or lower bound. One of the two bounds must be specified, and the lower bound must be less than the upper bound.";
	CoreDefinitionsRangeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Range";
	CoreDefinitionsRangeClass.links = {};
	CoreDefinitionsRangeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Range"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Range"});
		} else if (typeof value === "object") {
			if ("LowerBound" in value) {
				errors = errors.concat(classes.CoreDefinitionsLowerBound.validationErrors(value.LowerBound, dataPath + "/LowerBound", missing));
			}
			if ("UpperBound" in value) {
				errors = errors.concat(classes.CoreDefinitionsUpperBound.validationErrors(value.UpperBound, dataPath + "/UpperBound", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Range"});
		}
		return errors;
	}
	CoreDefinitionsRangeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsRangeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsRangeClass, CoreDefinitionsRangeClass.LowerBound, {
		get: function() { return CoreDefinitionsRangeClass.LowerBound; },
		set: function(newValue) { CoreDefinitionsRangeClass.LowerBound = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsRangeClass, CoreDefinitionsRangeClass.UpperBound, {
		get: function() { return CoreDefinitionsRangeClass.UpperBound; },
		set: function(newValue) { CoreDefinitionsRangeClass.UpperBound = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio */
	var CoreDefinitionsRatioClass = classes.CoreDefinitionsRatio = function CoreDefinitionsRatioClass(value) {
		if (!(this instanceof CoreDefinitionsRatioClass)) return new CoreDefinitionsRatioClass(value);
		if (typeof value.Numerator !== "undefined") {
			this.Numerator = value.Numerator;
		}
		if (this.Numerator && !Array.isArray(this.Numerator)) {
			this.Numerator = new classes.CoreDefinitionsNumerator(this.Numerator);
		}
		if (typeof value.Denominator !== "undefined") {
			this.Denominator = value.Denominator;
		}
		if (this.Denominator && !Array.isArray(this.Denominator)) {
			this.Denominator = new classes.CoreDefinitionsDenominator(this.Denominator);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsRatioClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsRatioClass.prototype.constructor = CoreDefinitionsRatioClass;
	CoreDefinitionsRatioClass.description = "A unit of measurement for the quotient of the amount of one entity to another.\nConcepts: http://ncimeta.nci.nih.gov:C0456603";
	CoreDefinitionsRatioClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio";
	CoreDefinitionsRatioClass.links = {};
	CoreDefinitionsRatioClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio"});
		} else if (typeof value === "object") {
			if ("Numerator" in value) {
				errors = errors.concat(classes.CoreDefinitionsNumerator.validationErrors(value.Numerator, dataPath + "/Numerator", missing));
			} else {
				errors.push({code: 302, params: {key: "Numerator"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio"});
			}
			if ("Denominator" in value) {
				errors = errors.concat(classes.CoreDefinitionsDenominator.validationErrors(value.Denominator, dataPath + "/Denominator", missing));
			} else {
				errors.push({code: 302, params: {key: "Denominator"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Ratio"});
		}
		return errors;
	}
	CoreDefinitionsRatioClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsRatioClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsRatioClass, CoreDefinitionsRatioClass.Numerator, {
		get: function() { return CoreDefinitionsRatioClass.Numerator; },
		set: function(newValue) { CoreDefinitionsRatioClass.Numerator = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsRatioClass, CoreDefinitionsRatioClass.Denominator, {
		get: function() { return CoreDefinitionsRatioClass.Denominator; },
		set: function(newValue) { CoreDefinitionsRatioClass.Denominator = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/6 */
	var ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class = classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf6 = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/6";
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class.links = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/6"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/6"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/6"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesValueAnyOf6Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/7 */
	var ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class = classes.ObservationDefinitionsObservationComponentPropertiesValueAnyOf7 = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/7";
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class.links = {};
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/7"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/7"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationComponent/properties/Value/anyOf/7"});
		}
		return errors;
	}
	ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationComponentPropertiesValueAnyOf7Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriod */
	var CoreDefinitionsTimePeriodClass = classes.CoreDefinitionsTimePeriod = function CoreDefinitionsTimePeriodClass(value) {
		if (!(this instanceof CoreDefinitionsTimePeriodClass)) return new CoreDefinitionsTimePeriodClass(value);
		if (typeof value.TimePeriodStart !== "undefined") {
			this.TimePeriodStart = value.TimePeriodStart;
		}
		if (this.TimePeriodStart && !Array.isArray(this.TimePeriodStart) && this.TimePeriodStart) {
			this.TimePeriodStart = new classes.CoreDefinitionsTimePeriodStart(this.TimePeriodStart);
		}
		if (typeof value.TimePeriodEnd !== "undefined") {
			this.TimePeriodEnd = value.TimePeriodEnd;
		}
		if (this.TimePeriodEnd && !Array.isArray(this.TimePeriodEnd) && this.TimePeriodEnd) {
			this.TimePeriodEnd = new classes.CoreDefinitionsTimePeriodEnd(this.TimePeriodEnd);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTimePeriodClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTimePeriodClass.prototype.constructor = CoreDefinitionsTimePeriodClass;
	CoreDefinitionsTimePeriodClass.description = "A period of time defined by a start and end time, date, or year.\nConcepts: http://ncimeta.nci.nih.gov:C1948053";
	CoreDefinitionsTimePeriodClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriod";
	CoreDefinitionsTimePeriodClass.links = {};
	CoreDefinitionsTimePeriodClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriod"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriod"});
		} else if (typeof value === "object") {
			if ("TimePeriodStart" in value) {
				errors = errors.concat(classes.CoreDefinitionsTimePeriodStart.validationErrors(value.TimePeriodStart, dataPath + "/TimePeriodStart", missing));
			}
			if ("TimePeriodEnd" in value) {
				errors = errors.concat(classes.CoreDefinitionsTimePeriodEnd.validationErrors(value.TimePeriodEnd, dataPath + "/TimePeriodEnd", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriod"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsTimePeriodClass, CoreDefinitionsTimePeriodClass.TimePeriodStart, {
		get: function() { return CoreDefinitionsTimePeriodClass.TimePeriodStart; },
		set: function(newValue) { CoreDefinitionsTimePeriodClass.TimePeriodStart = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsTimePeriodClass, CoreDefinitionsTimePeriodClass.TimePeriodEnd, {
		get: function() { return CoreDefinitionsTimePeriodClass.TimePeriodEnd; },
		set: function(newValue) { CoreDefinitionsTimePeriodClass.TimePeriodEnd = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange */
	var ObservationDefinitionsReferenceRangeClass = classes.ObservationDefinitionsReferenceRange = function ObservationDefinitionsReferenceRangeClass(value) {
		if (!(this instanceof ObservationDefinitionsReferenceRangeClass)) return new ObservationDefinitionsReferenceRangeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ObservationDefinitionsReferenceRangePropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsReferenceRangeClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsReferenceRangeClass.prototype.constructor = ObservationDefinitionsReferenceRangeClass;
	ObservationDefinitionsReferenceRangeClass.description = "The usual or acceptable range for a test result.\nConcepts: http://ncimeta.nci.nih.gov:C0883335";
	ObservationDefinitionsReferenceRangeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange";
	ObservationDefinitionsReferenceRangeClass.links = {};
	ObservationDefinitionsReferenceRangeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ObservationDefinitionsReferenceRangePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange"});
		}
		return errors;
	}
	ObservationDefinitionsReferenceRangeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsReferenceRangeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsReferenceRangeClass, ObservationDefinitionsReferenceRangeClass.Value, {
		get: function() { return ObservationDefinitionsReferenceRangeClass.Value; },
		set: function(newValue) { ObservationDefinitionsReferenceRangeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0 */
	var CoreDefinitionsReasonPropertiesValueAnyOf0Class = classes.CoreDefinitionsReasonPropertiesValueAnyOf0 = function CoreDefinitionsReasonPropertiesValueAnyOf0Class(value) {
		if (!(this instanceof CoreDefinitionsReasonPropertiesValueAnyOf0Class)) return new CoreDefinitionsReasonPropertiesValueAnyOf0Class(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.prototype.constructor = CoreDefinitionsReasonPropertiesValueAnyOf0Class;
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0";
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.links = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0"});
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsReasonPropertiesValueAnyOf0Class, CoreDefinitionsReasonPropertiesValueAnyOf0Class.ShrId, {
		get: function() { return CoreDefinitionsReasonPropertiesValueAnyOf0Class.ShrId; },
		set: function(newValue) { CoreDefinitionsReasonPropertiesValueAnyOf0Class.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsReasonPropertiesValueAnyOf0Class, CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryType, {
		get: function() { return CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryType; },
		set: function(newValue) { CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsReasonPropertiesValueAnyOf0Class, CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryId, {
		get: function() { return CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryId; },
		set: function(newValue) { CoreDefinitionsReasonPropertiesValueAnyOf0Class.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/1 */
	var CoreDefinitionsReasonPropertiesValueAnyOf1Class = classes.CoreDefinitionsReasonPropertiesValueAnyOf1 = {};
	CoreDefinitionsReasonPropertiesValueAnyOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/1";
	CoreDefinitionsReasonPropertiesValueAnyOf1Class.links = {};
	CoreDefinitionsReasonPropertiesValueAnyOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/1"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/1"});
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueAnyOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueAnyOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/ShrId */
	var ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass = classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrId = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/ShrId";
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass.links = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/ShrId"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryType */
	var ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass = classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryType = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryType";
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass.links = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryType"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryId */
	var ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass = classes.ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryId = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryId";
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass.links = {};
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/AssociatedStudy/properties/Value/properties/EntryId"});
		}
		return errors;
	}
	ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsAssociatedStudyPropertiesValuePropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value/anyOf/0 */
	var BaseDefinitionsStatusPropertiesValueAnyOf0Class = classes.BaseDefinitionsStatusPropertiesValueAnyOf0 = {};
	BaseDefinitionsStatusPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value/anyOf/0";
	BaseDefinitionsStatusPropertiesValueAnyOf0Class.links = {};
	BaseDefinitionsStatusPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/Status/properties/Value/anyOf/0"});
		}
		return errors;
	}
	BaseDefinitionsStatusPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsStatusPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier/properties/Value */
	var BaseDefinitionsNonOccurrenceModifierPropertiesValueClass = classes.BaseDefinitionsNonOccurrenceModifierPropertiesValue = {};
	BaseDefinitionsNonOccurrenceModifierPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier/properties/Value";
	BaseDefinitionsNonOccurrenceModifierPropertiesValueClass.links = {};
	BaseDefinitionsNonOccurrenceModifierPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/base#/definitions/NonOccurrenceModifier/properties/Value"});
		}
		return errors;
	}
	BaseDefinitionsNonOccurrenceModifierPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = BaseDefinitionsNonOccurrenceModifierPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value */
	var CoreDefinitionsOccurrenceTimePropertiesValueClass = classes.CoreDefinitionsOccurrenceTimePropertiesValue = function CoreDefinitionsOccurrenceTimePropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsOccurrenceTimePropertiesValueClass)) return new CoreDefinitionsOccurrenceTimePropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsOccurrenceTimePropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsOccurrenceTimePropertiesValueClass.prototype.constructor = CoreDefinitionsOccurrenceTimePropertiesValueClass;
	CoreDefinitionsOccurrenceTimePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value";
	CoreDefinitionsOccurrenceTimePropertiesValueClass.links = {};
	CoreDefinitionsOccurrenceTimePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsOccurrenceTimePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOccurrenceTimePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant */
	var ActorDefinitionsParticipantClass = classes.ActorDefinitionsParticipant = function ActorDefinitionsParticipantClass(value) {
		if (!(this instanceof ActorDefinitionsParticipantClass)) return new ActorDefinitionsParticipantClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ActorDefinitionsParticipantPropertiesValue(this.Value);
		}
		if (typeof value.ParticipationType !== "undefined") {
			this.ParticipationType = value.ParticipationType;
		}
		if (this.ParticipationType && !Array.isArray(this.ParticipationType) && this.ParticipationType) {
			this.ParticipationType = new classes.ActorDefinitionsParticipationType(this.ParticipationType);
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && this.NonOccurrenceModifier) {
			this.NonOccurrenceModifier = new classes.BaseDefinitionsNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		if (typeof value.Reason !== "undefined") {
			this.Reason = value.Reason;
		}
		if (this.Reason && !Array.isArray(this.Reason) && this.Reason) {
			this.Reason = new classes.CoreDefinitionsReason(this.Reason);
		}
		if (typeof value.OccurrenceTime !== "undefined") {
			this.OccurrenceTime = value.OccurrenceTime;
		}
		if (this.OccurrenceTime && !Array.isArray(this.OccurrenceTime) && this.OccurrenceTime) {
			this.OccurrenceTime = new classes.CoreDefinitionsOccurrenceTime(this.OccurrenceTime);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsParticipantClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsParticipantClass.prototype.constructor = ActorDefinitionsParticipantClass;
	ActorDefinitionsParticipantClass.description = "A statement about an actor who did (or did not) participate in a certain task or activity. Unlike a HealthcareInvolvement which continues over period of time, the participant is associated with doing or not doing a specific task, such admitting a patient, performing a procedure, or taking a measurement.\nConcepts: http://ncimeta.nci.nih.gov:C1550369";
	ActorDefinitionsParticipantClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant";
	ActorDefinitionsParticipantClass.links = {};
	ActorDefinitionsParticipantClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsParticipantPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant"});
			}
			if ("ParticipationType" in value) {
				errors = errors.concat(classes.ActorDefinitionsParticipationType.validationErrors(value.ParticipationType, dataPath + "/ParticipationType", missing));
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
			if ("Reason" in value) {
				errors = errors.concat(classes.CoreDefinitionsReason.validationErrors(value.Reason, dataPath + "/Reason", missing));
			}
			if ("OccurrenceTime" in value) {
				errors = errors.concat(classes.CoreDefinitionsOccurrenceTime.validationErrors(value.OccurrenceTime, dataPath + "/OccurrenceTime", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant"});
		}
		return errors;
	}
	ActorDefinitionsParticipantClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsParticipantClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsParticipantClass, ActorDefinitionsParticipantClass.Value, {
		get: function() { return ActorDefinitionsParticipantClass.Value; },
		set: function(newValue) { ActorDefinitionsParticipantClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsParticipantClass, ActorDefinitionsParticipantClass.ParticipationType, {
		get: function() { return ActorDefinitionsParticipantClass.ParticipationType; },
		set: function(newValue) { ActorDefinitionsParticipantClass.ParticipationType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsParticipantClass, ActorDefinitionsParticipantClass.NonOccurrenceModifier, {
		get: function() { return ActorDefinitionsParticipantClass.NonOccurrenceModifier; },
		set: function(newValue) { ActorDefinitionsParticipantClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsParticipantClass, ActorDefinitionsParticipantClass.Reason, {
		get: function() { return ActorDefinitionsParticipantClass.Reason; },
		set: function(newValue) { ActorDefinitionsParticipantClass.Reason = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsParticipantClass, ActorDefinitionsParticipantClass.OccurrenceTime, {
		get: function() { return ActorDefinitionsParticipantClass.OccurrenceTime; },
		set: function(newValue) { ActorDefinitionsParticipantClass.OccurrenceTime = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/2 */
	var ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class = classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2 = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/2";
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/2"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/2"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/3 */
	var ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class = classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3 = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/3";
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/3"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/3"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/3"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf3Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/6 */
	var ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class = classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6 = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/6";
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/6"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/6"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/6"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf6Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/7 */
	var ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class = classes.ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7 = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/7";
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class.links = {};
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/7"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/7"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Observation/allOf/2/properties/Value/anyOf/7"});
		}
		return errors;
	}
	ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationAllOf2PropertiesValueAnyOf7Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier */
	var ObservationDefinitionsObservationQualifierClass = classes.ObservationDefinitionsObservationQualifier = function ObservationDefinitionsObservationQualifierClass(value) {
		if (!(this instanceof ObservationDefinitionsObservationQualifierClass)) return new ObservationDefinitionsObservationQualifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsObservationQualifierClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsObservationQualifierClass.prototype.constructor = ObservationDefinitionsObservationQualifierClass;
	ObservationDefinitionsObservationQualifierClass.description = "A description of the conditions or context of an observation, for example, under sedation, fasting or post-exercise. Body position and body site are also qualifiers, but handled separately. A qualifier cannot modify the measurement type; for example, a fasting blood sugar is still a blood sugar.\nConcepts: http://ncimeta.nci.nih.gov:C1443279";
	ObservationDefinitionsObservationQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier";
	ObservationDefinitionsObservationQualifierClass.links = {};
	ObservationDefinitionsObservationQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ObservationQualifier"});
		}
		return errors;
	}
	ObservationDefinitionsObservationQualifierClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsObservationQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ObservationDefinitionsObservationQualifierClass, ObservationDefinitionsObservationQualifierClass.Value, {
		get: function() { return ObservationDefinitionsObservationQualifierClass.Value; },
		set: function(newValue) { ObservationDefinitionsObservationQualifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting */
	var CoreDefinitionsSettingClass = classes.CoreDefinitionsSetting = function CoreDefinitionsSettingClass(value) {
		if (!(this instanceof CoreDefinitionsSettingClass)) return new CoreDefinitionsSettingClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsSettingClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsSettingClass.prototype.constructor = CoreDefinitionsSettingClass;
	CoreDefinitionsSettingClass.description = "Description of the place or type of surroundings where something is positioned or where an event takes place.";
	CoreDefinitionsSettingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting";
	CoreDefinitionsSettingClass.links = {};
	CoreDefinitionsSettingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Setting"});
		}
		return errors;
	}
	CoreDefinitionsSettingClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsSettingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsSettingClass, CoreDefinitionsSettingClass.Value, {
		get: function() { return CoreDefinitionsSettingClass.Value; },
		set: function(newValue) { CoreDefinitionsSettingClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location */
	var CoreDefinitionsLocationClass = classes.CoreDefinitionsLocation = function CoreDefinitionsLocationClass(value) {
		if (!(this instanceof CoreDefinitionsLocationClass)) return new CoreDefinitionsLocationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsLocationPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLocationClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLocationClass.prototype.constructor = CoreDefinitionsLocationClass;
	CoreDefinitionsLocationClass.description = "A position, site, or point in space where something can be found.\nConcepts: http://ncimeta.nci.nih.gov:C0450429";
	CoreDefinitionsLocationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location";
	CoreDefinitionsLocationClass.links = {};
	CoreDefinitionsLocationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsLocationPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location"});
		}
		return errors;
	}
	CoreDefinitionsLocationClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLocationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLocationClass, CoreDefinitionsLocationClass.Value, {
		get: function() { return CoreDefinitionsLocationClass.Value; },
		set: function(newValue) { CoreDefinitionsLocationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/ShrId */
	var AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass = classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrId = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/ShrId";
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass.links = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/ShrId"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryType */
	var AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass = classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryType = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryType";
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass.links = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryType"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryId */
	var AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass = classes.AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryId = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryId";
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass.links = {};
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentFocus/properties/Value/anyOf/0/properties/EntryId"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentFocusPropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult */
	var AssessmentDefinitionsAssessmentResultClass = classes.AssessmentDefinitionsAssessmentResult = function AssessmentDefinitionsAssessmentResultClass(value) {
		if (!(this instanceof AssessmentDefinitionsAssessmentResultClass)) return new AssessmentDefinitionsAssessmentResultClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.AssertionNegationModifier !== "undefined") {
			this.AssertionNegationModifier = value.AssertionNegationModifier;
		}
		if (this.AssertionNegationModifier && !Array.isArray(this.AssertionNegationModifier) && this.AssertionNegationModifier) {
			this.AssertionNegationModifier = new classes.BaseDefinitionsAssertionNegationModifier(this.AssertionNegationModifier);
		}
		if (typeof value.Certainty !== "undefined") {
			this.Certainty = value.Certainty;
		}
		if (this.Certainty && !Array.isArray(this.Certainty) && this.Certainty) {
			this.Certainty = new classes.CoreDefinitionsCertainty(this.Certainty);
		}
		
		superclass.apply(this, arguments);
	};
	AssessmentDefinitionsAssessmentResultClass.prototype = Object.create(superclass.prototype);
	AssessmentDefinitionsAssessmentResultClass.prototype.constructor = AssessmentDefinitionsAssessmentResultClass;
	AssessmentDefinitionsAssessmentResultClass.description = "A statement of judgment or opinion, often the outcome, finding, or conclusion of the investigation or analysis.";
	AssessmentDefinitionsAssessmentResultClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult";
	AssessmentDefinitionsAssessmentResultClass.links = {};
	AssessmentDefinitionsAssessmentResultClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult"});
			}
			if ("AssertionNegationModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsAssertionNegationModifier.validationErrors(value.AssertionNegationModifier, dataPath + "/AssertionNegationModifier", missing));
			}
			if ("Certainty" in value) {
				errors = errors.concat(classes.CoreDefinitionsCertainty.validationErrors(value.Certainty, dataPath + "/Certainty", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/assessment#/definitions/AssessmentResult"});
		}
		return errors;
	}
	AssessmentDefinitionsAssessmentResultClass.validate = function (value) {
		var missing = {};
		var errors = AssessmentDefinitionsAssessmentResultClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AssessmentDefinitionsAssessmentResultClass, AssessmentDefinitionsAssessmentResultClass.Value, {
		get: function() { return AssessmentDefinitionsAssessmentResultClass.Value; },
		set: function(newValue) { AssessmentDefinitionsAssessmentResultClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentResultClass, AssessmentDefinitionsAssessmentResultClass.AssertionNegationModifier, {
		get: function() { return AssessmentDefinitionsAssessmentResultClass.AssertionNegationModifier; },
		set: function(newValue) { AssessmentDefinitionsAssessmentResultClass.AssertionNegationModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AssessmentDefinitionsAssessmentResultClass, AssessmentDefinitionsAssessmentResultClass.Certainty, {
		get: function() { return AssessmentDefinitionsAssessmentResultClass.Certainty; },
		set: function(newValue) { AssessmentDefinitionsAssessmentResultClass.Certainty = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/ShrId */
	var AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass = classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrId = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/ShrId";
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass.links = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/ShrId"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryType */
	var AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass = classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryType = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryType";
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass.links = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryType"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryId */
	var AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass = classes.AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryId = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryId";
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass.links = {};
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReaction/allOf/1/properties/AdverseEvent/properties/EntryId"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAllOf1PropertiesAdverseEventPropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution */
	var AdverseDefinitionsAdverseReactionAttributionClass = classes.AdverseDefinitionsAdverseReactionAttribution = function AdverseDefinitionsAdverseReactionAttributionClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAttributionClass)) return new AdverseDefinitionsAdverseReactionAttributionClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && this.Value) {
			this.Value = new classes.AdverseDefinitionsAdverseReactionAttributionPropertiesValue(this.Value);
		}
		if (typeof value.Certainty !== "undefined") {
			this.Certainty = value.Certainty;
		}
		if (this.Certainty && !Array.isArray(this.Certainty) && this.Certainty) {
			this.Certainty = new classes.CoreDefinitionsCertainty(this.Certainty);
		}
		
		BaseDefinitionsEntryClass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAttributionClass.prototype = Object.create(BaseDefinitionsEntryClass.prototype);
	AdverseDefinitionsAdverseReactionAttributionClass.prototype.constructor = AdverseDefinitionsAdverseReactionAttributionClass;
	AdverseDefinitionsAdverseReactionAttributionClass.description = "If an adverse reaction to treatment, a possible cause of the adverse reaction (either known or theorized). There can be more than one possible cause.\nConcepts: Adverse Event Attribution to Product or Procedure (http://ncimeta.nci.nih.gov:C1510821)";
	AdverseDefinitionsAdverseReactionAttributionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution";
	AdverseDefinitionsAdverseReactionAttributionClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.BaseDefinitionsEntry.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttributionAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionClass, AdverseDefinitionsAdverseReactionAttributionClass.Value, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionClass.Value; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionClass, AdverseDefinitionsAdverseReactionAttributionClass.Certainty, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionClass.Certainty; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionClass.Certainty = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/ShrId */
	var ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass = classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrId = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/ShrId";
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass.links = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/ShrId"});
		}
		return errors;
	}
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryType */
	var ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass = classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryType = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryType";
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass.links = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryType"});
		}
		return errors;
	}
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryId */
	var ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass = classes.ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryId = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryId";
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass.links = {};
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/Evidence/properties/Value/anyOf/0/properties/EntryId"});
		}
		return errors;
	}
	ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsEvidencePropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth */
	var ActorDefinitionsDateOfBirthClass = classes.ActorDefinitionsDateOfBirth = function ActorDefinitionsDateOfBirthClass(value) {
		if (!(this instanceof ActorDefinitionsDateOfBirthClass)) return new ActorDefinitionsDateOfBirthClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.ActorDefinitionsDateOfBirthPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsDateOfBirthClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsDateOfBirthClass.prototype.constructor = ActorDefinitionsDateOfBirthClass;
	ActorDefinitionsDateOfBirthClass.description = "A date of birth or approximate year or period (year or date range), if estimated.\nConcepts: http://ncimeta.nci.nih.gov:C2919018,http://loinc.org:21112-8";
	ActorDefinitionsDateOfBirthClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth";
	ActorDefinitionsDateOfBirthClass.links = {};
	ActorDefinitionsDateOfBirthClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsDateOfBirthPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth"});
		}
		return errors;
	}
	ActorDefinitionsDateOfBirthClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDateOfBirthClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsDateOfBirthClass, ActorDefinitionsDateOfBirthClass.Value, {
		get: function() { return ActorDefinitionsDateOfBirthClass.Value; },
		set: function(newValue) { ActorDefinitionsDateOfBirthClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth */
	var DemographicsDefinitionsPlaceOfBirthClass = classes.DemographicsDefinitionsPlaceOfBirth = function DemographicsDefinitionsPlaceOfBirthClass(value) {
		if (!(this instanceof DemographicsDefinitionsPlaceOfBirthClass)) return new DemographicsDefinitionsPlaceOfBirthClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsGeopoliticalLocation(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsPlaceOfBirthClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsPlaceOfBirthClass.prototype.constructor = DemographicsDefinitionsPlaceOfBirthClass;
	DemographicsDefinitionsPlaceOfBirthClass.description = "The location of a birth event. There may be multiple entries, but a person has only one place of birth.\nConcepts: http://ncimeta.nci.nih.gov:C0032040";
	DemographicsDefinitionsPlaceOfBirthClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth";
	DemographicsDefinitionsPlaceOfBirthClass.links = {};
	DemographicsDefinitionsPlaceOfBirthClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeopoliticalLocation.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PlaceOfBirth"});
		}
		return errors;
	}
	DemographicsDefinitionsPlaceOfBirthClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPlaceOfBirthClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsPlaceOfBirthClass, DemographicsDefinitionsPlaceOfBirthClass.Value, {
		get: function() { return DemographicsDefinitionsPlaceOfBirthClass.Value; },
		set: function(newValue) { DemographicsDefinitionsPlaceOfBirthClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth */
	var DemographicsDefinitionsMultipleBirthClass = classes.DemographicsDefinitionsMultipleBirth = function DemographicsDefinitionsMultipleBirthClass(value) {
		if (!(this instanceof DemographicsDefinitionsMultipleBirthClass)) return new DemographicsDefinitionsMultipleBirthClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.MultipleBirthOrder !== "undefined") {
			this.MultipleBirthOrder = value.MultipleBirthOrder;
		}
		if (this.MultipleBirthOrder && !Array.isArray(this.MultipleBirthOrder) && this.MultipleBirthOrder) {
			this.MultipleBirthOrder = new classes.DemographicsDefinitionsMultipleBirthOrder(this.MultipleBirthOrder);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsMultipleBirthClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsMultipleBirthClass.prototype.constructor = DemographicsDefinitionsMultipleBirthClass;
	DemographicsDefinitionsMultipleBirthClass.description = "Indication if the person was part of a multiple birth event.\nConcepts: http://ncimeta.nci.nih.gov:C0026753";
	DemographicsDefinitionsMultipleBirthClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth";
	DemographicsDefinitionsMultipleBirthClass.links = {};
	DemographicsDefinitionsMultipleBirthClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMultipleBirthPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth"});
			}
			if ("MultipleBirthOrder" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMultipleBirthOrder.validationErrors(value.MultipleBirthOrder, dataPath + "/MultipleBirthOrder", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth"});
		}
		return errors;
	}
	DemographicsDefinitionsMultipleBirthClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMultipleBirthClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsMultipleBirthClass, DemographicsDefinitionsMultipleBirthClass.Value, {
		get: function() { return DemographicsDefinitionsMultipleBirthClass.Value; },
		set: function(newValue) { DemographicsDefinitionsMultipleBirthClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsMultipleBirthClass, DemographicsDefinitionsMultipleBirthClass.MultipleBirthOrder, {
		get: function() { return DemographicsDefinitionsMultipleBirthClass.MultipleBirthOrder; },
		set: function(newValue) { DemographicsDefinitionsMultipleBirthClass.MultipleBirthOrder = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex */
	var DemographicsDefinitionsBirthSexClass = classes.DemographicsDefinitionsBirthSex = function DemographicsDefinitionsBirthSexClass(value) {
		if (!(this instanceof DemographicsDefinitionsBirthSexClass)) return new DemographicsDefinitionsBirthSexClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsBirthSexClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsBirthSexClass.prototype.constructor = DemographicsDefinitionsBirthSexClass;
	DemographicsDefinitionsBirthSexClass.description = "Administrative sex assigned at birth and recorded on birth certificate.\nConcepts: http://ncimeta.nci.nih.gov:C4086849";
	DemographicsDefinitionsBirthSexClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex";
	DemographicsDefinitionsBirthSexClass.links = {};
	DemographicsDefinitionsBirthSexClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/BirthSex"});
		}
		return errors;
	}
	DemographicsDefinitionsBirthSexClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsBirthSexClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsBirthSexClass, DemographicsDefinitionsBirthSexClass.Value, {
		get: function() { return DemographicsDefinitionsBirthSexClass.Value; },
		set: function(newValue) { DemographicsDefinitionsBirthSexClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender */
	var ActorDefinitionsAdministrativeGenderClass = classes.ActorDefinitionsAdministrativeGender = function ActorDefinitionsAdministrativeGenderClass(value) {
		if (!(this instanceof ActorDefinitionsAdministrativeGenderClass)) return new ActorDefinitionsAdministrativeGenderClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsAdministrativeGenderClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsAdministrativeGenderClass.prototype.constructor = ActorDefinitionsAdministrativeGenderClass;
	ActorDefinitionsAdministrativeGenderClass.description = "A gender classification used for administrative purposes. Administrative gender is not necessarily the same as a biological description or a gender identity. This attribute does not include terms related to clinical gender.\nConcepts: http://ncimeta.nci.nih.gov:C1550327";
	ActorDefinitionsAdministrativeGenderClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender";
	ActorDefinitionsAdministrativeGenderClass.links = {};
	ActorDefinitionsAdministrativeGenderClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsAdministrativeGenderPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender"});
		}
		return errors;
	}
	ActorDefinitionsAdministrativeGenderClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAdministrativeGenderClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsAdministrativeGenderClass, ActorDefinitionsAdministrativeGenderClass.Value, {
		get: function() { return ActorDefinitionsAdministrativeGenderClass.Value; },
		set: function(newValue) { ActorDefinitionsAdministrativeGenderClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race */
	var DemographicsDefinitionsRaceClass = classes.DemographicsDefinitionsRace = function DemographicsDefinitionsRaceClass(value) {
		if (!(this instanceof DemographicsDefinitionsRaceClass)) return new DemographicsDefinitionsRaceClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.RaceDetail !== "undefined") {
			this.RaceDetail = value.RaceDetail;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsRaceClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsRaceClass.prototype.constructor = DemographicsDefinitionsRaceClass;
	DemographicsDefinitionsRaceClass.description = "Subjective association of a person with a named category of humans sharing common history, traits, place of family origin, nationality, tribe, or other inherited background.\nConcepts: http://ncimeta.nci.nih.gov:C0034510";
	DemographicsDefinitionsRaceClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race";
	DemographicsDefinitionsRaceClass.links = {};
	DemographicsDefinitionsRaceClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race"});
			}
			if ("RaceDetail" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsRacePropertiesRaceDetail.validationErrors(value.RaceDetail, dataPath + "/RaceDetail", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race"});
		}
		return errors;
	}
	DemographicsDefinitionsRaceClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsRaceClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsRaceClass, DemographicsDefinitionsRaceClass.Value, {
		get: function() { return DemographicsDefinitionsRaceClass.Value; },
		set: function(newValue) { DemographicsDefinitionsRaceClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsRaceClass, DemographicsDefinitionsRaceClass.RaceDetail, {
		get: function() { return DemographicsDefinitionsRaceClass.RaceDetail; },
		set: function(newValue) { DemographicsDefinitionsRaceClass.RaceDetail = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity */
	var DemographicsDefinitionsEthnicityClass = classes.DemographicsDefinitionsEthnicity = function DemographicsDefinitionsEthnicityClass(value) {
		if (!(this instanceof DemographicsDefinitionsEthnicityClass)) return new DemographicsDefinitionsEthnicityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.EthnicityDetail !== "undefined") {
			this.EthnicityDetail = value.EthnicityDetail;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsEthnicityClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsEthnicityClass.prototype.constructor = DemographicsDefinitionsEthnicityClass;
	DemographicsDefinitionsEthnicityClass.description = "Indicator of Hispanic or Latino origin.\nConcepts: http://ncimeta.nci.nih.gov:C0015031";
	DemographicsDefinitionsEthnicityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity";
	DemographicsDefinitionsEthnicityClass.links = {};
	DemographicsDefinitionsEthnicityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity"});
			}
			if ("EthnicityDetail" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsEthnicityPropertiesEthnicityDetail.validationErrors(value.EthnicityDetail, dataPath + "/EthnicityDetail", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity"});
		}
		return errors;
	}
	DemographicsDefinitionsEthnicityClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsEthnicityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsEthnicityClass, DemographicsDefinitionsEthnicityClass.Value, {
		get: function() { return DemographicsDefinitionsEthnicityClass.Value; },
		set: function(newValue) { DemographicsDefinitionsEthnicityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsEthnicityClass, DemographicsDefinitionsEthnicityClass.EthnicityDetail, {
		get: function() { return DemographicsDefinitionsEthnicityClass.EthnicityDetail; },
		set: function(newValue) { DemographicsDefinitionsEthnicityClass.EthnicityDetail = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus */
	var DemographicsDefinitionsMaritalStatusClass = classes.DemographicsDefinitionsMaritalStatus = function DemographicsDefinitionsMaritalStatusClass(value) {
		if (!(this instanceof DemographicsDefinitionsMaritalStatusClass)) return new DemographicsDefinitionsMaritalStatusClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsMaritalStatusClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsMaritalStatusClass.prototype.constructor = DemographicsDefinitionsMaritalStatusClass;
	DemographicsDefinitionsMaritalStatusClass.description = "The most recent marital status of a person.\nConcepts: http://ncimeta.nci.nih.gov:C0024819";
	DemographicsDefinitionsMaritalStatusClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus";
	DemographicsDefinitionsMaritalStatusClass.links = {};
	DemographicsDefinitionsMaritalStatusClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MaritalStatus"});
		}
		return errors;
	}
	DemographicsDefinitionsMaritalStatusClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMaritalStatusClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsMaritalStatusClass, DemographicsDefinitionsMaritalStatusClass.Value, {
		get: function() { return DemographicsDefinitionsMaritalStatusClass.Value; },
		set: function(newValue) { DemographicsDefinitionsMaritalStatusClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName */
	var DemographicsDefinitionsMothersMaidenNameClass = classes.DemographicsDefinitionsMothersMaidenName = function DemographicsDefinitionsMothersMaidenNameClass(value) {
		if (!(this instanceof DemographicsDefinitionsMothersMaidenNameClass)) return new DemographicsDefinitionsMothersMaidenNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsHumanName(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsMothersMaidenNameClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsMothersMaidenNameClass.prototype.constructor = DemographicsDefinitionsMothersMaidenNameClass;
	DemographicsDefinitionsMothersMaidenNameClass.description = "The name of the mother as it was or likely to have been recorded on the birth certificate of the subject. This is most likely the name prior to marriage of the mother (aka the maiden name).\nConcepts: http://ncimeta.nci.nih.gov:C0806887";
	DemographicsDefinitionsMothersMaidenNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName";
	DemographicsDefinitionsMothersMaidenNameClass.links = {};
	DemographicsDefinitionsMothersMaidenNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanName.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MothersMaidenName"});
		}
		return errors;
	}
	DemographicsDefinitionsMothersMaidenNameClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMothersMaidenNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsMothersMaidenNameClass, DemographicsDefinitionsMothersMaidenNameClass.Value, {
		get: function() { return DemographicsDefinitionsMothersMaidenNameClass.Value; },
		set: function(newValue) { DemographicsDefinitionsMothersMaidenNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName */
	var DemographicsDefinitionsFathersNameClass = classes.DemographicsDefinitionsFathersName = function DemographicsDefinitionsFathersNameClass(value) {
		if (!(this instanceof DemographicsDefinitionsFathersNameClass)) return new DemographicsDefinitionsFathersNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsHumanName(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsFathersNameClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsFathersNameClass.prototype.constructor = DemographicsDefinitionsFathersNameClass;
	DemographicsDefinitionsFathersNameClass.description = "The name of the father as it was or likely to have been recorded on the birth certificate of the subject; most likely the name of the father at the time of birth of the subject.";
	DemographicsDefinitionsFathersNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName";
	DemographicsDefinitionsFathersNameClass.links = {};
	DemographicsDefinitionsFathersNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanName.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FathersName"});
		}
		return errors;
	}
	DemographicsDefinitionsFathersNameClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsFathersNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsFathersNameClass, DemographicsDefinitionsFathersNameClass.Value, {
		get: function() { return DemographicsDefinitionsFathersNameClass.Value; },
		set: function(newValue) { DemographicsDefinitionsFathersNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber */
	var DemographicsDefinitionsSocialSecurityNumberClass = classes.DemographicsDefinitionsSocialSecurityNumber = function DemographicsDefinitionsSocialSecurityNumberClass(value) {
		if (!(this instanceof DemographicsDefinitionsSocialSecurityNumberClass)) return new DemographicsDefinitionsSocialSecurityNumberClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsSocialSecurityNumberClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsSocialSecurityNumberClass.prototype.constructor = DemographicsDefinitionsSocialSecurityNumberClass;
	DemographicsDefinitionsSocialSecurityNumberClass.description = "A US social security number (SSN).\nConcepts: http://ncimeta.nci.nih.gov:C1301821";
	DemographicsDefinitionsSocialSecurityNumberClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber";
	DemographicsDefinitionsSocialSecurityNumberClass.links = {};
	DemographicsDefinitionsSocialSecurityNumberClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsSocialSecurityNumberPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber"});
		}
		return errors;
	}
	DemographicsDefinitionsSocialSecurityNumberClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsSocialSecurityNumberClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsSocialSecurityNumberClass, DemographicsDefinitionsSocialSecurityNumberClass.Value, {
		get: function() { return DemographicsDefinitionsSocialSecurityNumberClass.Value; },
		set: function(newValue) { DemographicsDefinitionsSocialSecurityNumberClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded */
	var DemographicsDefinitionsMedicalInterpreterNeededClass = classes.DemographicsDefinitionsMedicalInterpreterNeeded = function DemographicsDefinitionsMedicalInterpreterNeededClass(value) {
		if (!(this instanceof DemographicsDefinitionsMedicalInterpreterNeededClass)) return new DemographicsDefinitionsMedicalInterpreterNeededClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.Language !== "undefined") {
			this.Language = value.Language;
		}
		if (this.Language && !Array.isArray(this.Language)) {
			this.Language = new classes.BaseDefinitionsLanguage(this.Language);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsMedicalInterpreterNeededClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsMedicalInterpreterNeededClass.prototype.constructor = DemographicsDefinitionsMedicalInterpreterNeededClass;
	DemographicsDefinitionsMedicalInterpreterNeededClass.description = "Whether the subject requires an interpreter to communicate with an English-speaking provider.\nConcepts: http://ncimeta.nci.nih.gov:C1442531";
	DemographicsDefinitionsMedicalInterpreterNeededClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded";
	DemographicsDefinitionsMedicalInterpreterNeededClass.links = {};
	DemographicsDefinitionsMedicalInterpreterNeededClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMedicalInterpreterNeededPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded"});
			}
			if ("Language" in value) {
				errors = errors.concat(classes.BaseDefinitionsLanguage.validationErrors(value.Language, dataPath + "/Language", missing));
			} else {
				errors.push({code: 302, params: {key: "Language"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded"});
		}
		return errors;
	}
	DemographicsDefinitionsMedicalInterpreterNeededClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMedicalInterpreterNeededClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsMedicalInterpreterNeededClass, DemographicsDefinitionsMedicalInterpreterNeededClass.Value, {
		get: function() { return DemographicsDefinitionsMedicalInterpreterNeededClass.Value; },
		set: function(newValue) { DemographicsDefinitionsMedicalInterpreterNeededClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsMedicalInterpreterNeededClass, DemographicsDefinitionsMedicalInterpreterNeededClass.Language, {
		get: function() { return DemographicsDefinitionsMedicalInterpreterNeededClass.Language; },
		set: function(newValue) { DemographicsDefinitionsMedicalInterpreterNeededClass.Language = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person */
	var ActorDefinitionsPersonClass = classes.ActorDefinitionsPerson = function ActorDefinitionsPersonClass(value) {
		if (!(this instanceof ActorDefinitionsPersonClass)) return new ActorDefinitionsPersonClass(value);
		if (typeof value.HumanName !== "undefined") {
			this.HumanName = value.HumanName;
		}
		if (typeof value.AnonymizedFlag !== "undefined") {
			this.AnonymizedFlag = value.AnonymizedFlag;
		}
		if (this.AnonymizedFlag && !Array.isArray(this.AnonymizedFlag) && this.AnonymizedFlag) {
			this.AnonymizedFlag = new classes.ActorDefinitionsAnonymizedFlag(this.AnonymizedFlag);
		}
		if (typeof value.FictionalPersonFlag !== "undefined") {
			this.FictionalPersonFlag = value.FictionalPersonFlag;
		}
		if (this.FictionalPersonFlag && !Array.isArray(this.FictionalPersonFlag) && this.FictionalPersonFlag) {
			this.FictionalPersonFlag = new classes.ActorDefinitionsFictionalPersonFlag(this.FictionalPersonFlag);
		}
		if (typeof value.DateOfBirth !== "undefined") {
			this.DateOfBirth = value.DateOfBirth;
		}
		if (this.DateOfBirth && !Array.isArray(this.DateOfBirth) && this.DateOfBirth) {
			this.DateOfBirth = new classes.ActorDefinitionsDateOfBirth(this.DateOfBirth);
		}
		if (typeof value.AdministrativeGender !== "undefined") {
			this.AdministrativeGender = value.AdministrativeGender;
		}
		if (this.AdministrativeGender && !Array.isArray(this.AdministrativeGender) && this.AdministrativeGender) {
			this.AdministrativeGender = new classes.ActorDefinitionsAdministrativeGender(this.AdministrativeGender);
		}
		if (typeof value.AddressUsed !== "undefined") {
			this.AddressUsed = value.AddressUsed;
		}
		if (typeof value.Telecom !== "undefined") {
			this.Telecom = value.Telecom;
		}
		if (typeof value.LanguageUsed !== "undefined") {
			this.LanguageUsed = value.LanguageUsed;
		}
		if (typeof value.Deceased !== "undefined") {
			this.Deceased = value.Deceased;
		}
		if (this.Deceased && !Array.isArray(this.Deceased) && this.Deceased) {
			this.Deceased = new classes.ActorDefinitionsDeceased(this.Deceased);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsPersonClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsPersonClass.prototype.constructor = ActorDefinitionsPersonClass;
	ActorDefinitionsPersonClass.description = "A person. In practical terms, people relevant to the health or social situation of the subject (including the person of record).\nConcepts: http://ncimeta.nci.nih.gov:C0027361";
	ActorDefinitionsPersonClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person";
	ActorDefinitionsPersonClass.links = {};
	ActorDefinitionsPersonClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person"});
		} else if (typeof value === "object") {
			if ("HumanName" in value) {
				errors = errors.concat(classes.ActorDefinitionsPersonPropertiesHumanName.validationErrors(value.HumanName, dataPath + "/HumanName", missing));
			}
			if ("AnonymizedFlag" in value) {
				errors = errors.concat(classes.ActorDefinitionsAnonymizedFlag.validationErrors(value.AnonymizedFlag, dataPath + "/AnonymizedFlag", missing));
			}
			if ("FictionalPersonFlag" in value) {
				errors = errors.concat(classes.ActorDefinitionsFictionalPersonFlag.validationErrors(value.FictionalPersonFlag, dataPath + "/FictionalPersonFlag", missing));
			}
			if ("DateOfBirth" in value) {
				errors = errors.concat(classes.ActorDefinitionsDateOfBirth.validationErrors(value.DateOfBirth, dataPath + "/DateOfBirth", missing));
			}
			if ("AdministrativeGender" in value) {
				errors = errors.concat(classes.ActorDefinitionsAdministrativeGender.validationErrors(value.AdministrativeGender, dataPath + "/AdministrativeGender", missing));
			}
			if ("AddressUsed" in value) {
				errors = errors.concat(classes.ActorDefinitionsPersonPropertiesAddressUsed.validationErrors(value.AddressUsed, dataPath + "/AddressUsed", missing));
			}
			if ("Telecom" in value) {
				errors = errors.concat(classes.ActorDefinitionsPersonPropertiesTelecom.validationErrors(value.Telecom, dataPath + "/Telecom", missing));
			}
			if ("LanguageUsed" in value) {
				errors = errors.concat(classes.ActorDefinitionsPersonPropertiesLanguageUsed.validationErrors(value.LanguageUsed, dataPath + "/LanguageUsed", missing));
			}
			if ("Deceased" in value) {
				errors = errors.concat(classes.ActorDefinitionsDeceased.validationErrors(value.Deceased, dataPath + "/Deceased", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person"});
		}
		return errors;
	}
	ActorDefinitionsPersonClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPersonClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.HumanName, {
		get: function() { return ActorDefinitionsPersonClass.HumanName; },
		set: function(newValue) { ActorDefinitionsPersonClass.HumanName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.AnonymizedFlag, {
		get: function() { return ActorDefinitionsPersonClass.AnonymizedFlag; },
		set: function(newValue) { ActorDefinitionsPersonClass.AnonymizedFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.FictionalPersonFlag, {
		get: function() { return ActorDefinitionsPersonClass.FictionalPersonFlag; },
		set: function(newValue) { ActorDefinitionsPersonClass.FictionalPersonFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.DateOfBirth, {
		get: function() { return ActorDefinitionsPersonClass.DateOfBirth; },
		set: function(newValue) { ActorDefinitionsPersonClass.DateOfBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.AdministrativeGender, {
		get: function() { return ActorDefinitionsPersonClass.AdministrativeGender; },
		set: function(newValue) { ActorDefinitionsPersonClass.AdministrativeGender = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.AddressUsed, {
		get: function() { return ActorDefinitionsPersonClass.AddressUsed; },
		set: function(newValue) { ActorDefinitionsPersonClass.AddressUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.Telecom, {
		get: function() { return ActorDefinitionsPersonClass.Telecom; },
		set: function(newValue) { ActorDefinitionsPersonClass.Telecom = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.LanguageUsed, {
		get: function() { return ActorDefinitionsPersonClass.LanguageUsed; },
		set: function(newValue) { ActorDefinitionsPersonClass.LanguageUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPersonClass, ActorDefinitionsPersonClass.Deceased, {
		get: function() { return ActorDefinitionsPersonClass.Deceased; },
		set: function(newValue) { ActorDefinitionsPersonClass.Deceased = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2 */
	var DemographicsDefinitionsPersonOfRecordAllOf2Class = classes.DemographicsDefinitionsPersonOfRecordAllOf2 = function DemographicsDefinitionsPersonOfRecordAllOf2Class(value) {
		if (!(this instanceof DemographicsDefinitionsPersonOfRecordAllOf2Class)) return new DemographicsDefinitionsPersonOfRecordAllOf2Class(value);
		if (typeof value.DateOfBirth !== "undefined") {
			this.DateOfBirth = value.DateOfBirth;
		}
		if (this.DateOfBirth && !Array.isArray(this.DateOfBirth)) {
			this.DateOfBirth = new classes.ActorDefinitionsDateOfBirth(this.DateOfBirth);
		}
		if (typeof value.PlaceOfBirth !== "undefined") {
			this.PlaceOfBirth = value.PlaceOfBirth;
		}
		if (this.PlaceOfBirth && !Array.isArray(this.PlaceOfBirth)) {
			this.PlaceOfBirth = new classes.DemographicsDefinitionsPlaceOfBirth(this.PlaceOfBirth);
		}
		if (typeof value.MultipleBirth !== "undefined") {
			this.MultipleBirth = value.MultipleBirth;
		}
		if (this.MultipleBirth && !Array.isArray(this.MultipleBirth) && this.MultipleBirth) {
			this.MultipleBirth = new classes.DemographicsDefinitionsMultipleBirth(this.MultipleBirth);
		}
		if (typeof value.BirthSex !== "undefined") {
			this.BirthSex = value.BirthSex;
		}
		if (this.BirthSex && !Array.isArray(this.BirthSex)) {
			this.BirthSex = new classes.DemographicsDefinitionsBirthSex(this.BirthSex);
		}
		if (typeof value.AdministrativeGender !== "undefined") {
			this.AdministrativeGender = value.AdministrativeGender;
		}
		if (this.AdministrativeGender && !Array.isArray(this.AdministrativeGender)) {
			this.AdministrativeGender = new classes.ActorDefinitionsAdministrativeGender(this.AdministrativeGender);
		}
		if (typeof value.Race !== "undefined") {
			this.Race = value.Race;
		}
		if (this.Race && !Array.isArray(this.Race)) {
			this.Race = new classes.DemographicsDefinitionsRace(this.Race);
		}
		if (typeof value.Ethnicity !== "undefined") {
			this.Ethnicity = value.Ethnicity;
		}
		if (this.Ethnicity && !Array.isArray(this.Ethnicity)) {
			this.Ethnicity = new classes.DemographicsDefinitionsEthnicity(this.Ethnicity);
		}
		if (typeof value.MaritalStatus !== "undefined") {
			this.MaritalStatus = value.MaritalStatus;
		}
		if (this.MaritalStatus && !Array.isArray(this.MaritalStatus)) {
			this.MaritalStatus = new classes.DemographicsDefinitionsMaritalStatus(this.MaritalStatus);
		}
		if (typeof value.MothersMaidenName !== "undefined") {
			this.MothersMaidenName = value.MothersMaidenName;
		}
		if (this.MothersMaidenName && !Array.isArray(this.MothersMaidenName)) {
			this.MothersMaidenName = new classes.DemographicsDefinitionsMothersMaidenName(this.MothersMaidenName);
		}
		if (typeof value.FathersName !== "undefined") {
			this.FathersName = value.FathersName;
		}
		if (this.FathersName && !Array.isArray(this.FathersName)) {
			this.FathersName = new classes.DemographicsDefinitionsFathersName(this.FathersName);
		}
		if (typeof value.SocialSecurityNumber !== "undefined") {
			this.SocialSecurityNumber = value.SocialSecurityNumber;
		}
		if (this.SocialSecurityNumber && !Array.isArray(this.SocialSecurityNumber) && this.SocialSecurityNumber) {
			this.SocialSecurityNumber = new classes.DemographicsDefinitionsSocialSecurityNumber(this.SocialSecurityNumber);
		}
		if (typeof value.DriversLicenseNumber !== "undefined") {
			this.DriversLicenseNumber = value.DriversLicenseNumber;
		}
		if (typeof value.PassportNumber !== "undefined") {
			this.PassportNumber = value.PassportNumber;
		}
		if (typeof value.AddressUsed !== "undefined") {
			this.AddressUsed = value.AddressUsed;
		}
		if (typeof value.Telecom !== "undefined") {
			this.Telecom = value.Telecom;
		}
		if (typeof value.LanguageUsed !== "undefined") {
			this.LanguageUsed = value.LanguageUsed;
		}
		if (typeof value.MedicalInterpreterNeeded !== "undefined") {
			this.MedicalInterpreterNeeded = value.MedicalInterpreterNeeded;
		}
		if (this.MedicalInterpreterNeeded && !Array.isArray(this.MedicalInterpreterNeeded) && this.MedicalInterpreterNeeded) {
			this.MedicalInterpreterNeeded = new classes.DemographicsDefinitionsMedicalInterpreterNeeded(this.MedicalInterpreterNeeded);
		}
		if (typeof value.FamilialRelationship !== "undefined") {
			this.FamilialRelationship = value.FamilialRelationship;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsPersonOfRecordAllOf2Class.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsPersonOfRecordAllOf2Class.prototype.constructor = DemographicsDefinitionsPersonOfRecordAllOf2Class;
	DemographicsDefinitionsPersonOfRecordAllOf2Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2";
	DemographicsDefinitionsPersonOfRecordAllOf2Class.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
		} else if (typeof value === "object") {
			if ("DateOfBirth" in value) {
				errors = errors.concat(classes.ActorDefinitionsDateOfBirth.validationErrors(value.DateOfBirth, dataPath + "/DateOfBirth", missing));
			} else {
				errors.push({code: 302, params: {key: "DateOfBirth"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("PlaceOfBirth" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPlaceOfBirth.validationErrors(value.PlaceOfBirth, dataPath + "/PlaceOfBirth", missing));
			} else {
				errors.push({code: 302, params: {key: "PlaceOfBirth"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("MultipleBirth" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMultipleBirth.validationErrors(value.MultipleBirth, dataPath + "/MultipleBirth", missing));
			}
			if ("BirthSex" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsBirthSex.validationErrors(value.BirthSex, dataPath + "/BirthSex", missing));
			} else {
				errors.push({code: 302, params: {key: "BirthSex"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("AdministrativeGender" in value) {
				errors = errors.concat(classes.ActorDefinitionsAdministrativeGender.validationErrors(value.AdministrativeGender, dataPath + "/AdministrativeGender", missing));
			} else {
				errors.push({code: 302, params: {key: "AdministrativeGender"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("Race" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsRace.validationErrors(value.Race, dataPath + "/Race", missing));
			} else {
				errors.push({code: 302, params: {key: "Race"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("Ethnicity" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsEthnicity.validationErrors(value.Ethnicity, dataPath + "/Ethnicity", missing));
			} else {
				errors.push({code: 302, params: {key: "Ethnicity"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("MaritalStatus" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMaritalStatus.validationErrors(value.MaritalStatus, dataPath + "/MaritalStatus", missing));
			} else {
				errors.push({code: 302, params: {key: "MaritalStatus"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("MothersMaidenName" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMothersMaidenName.validationErrors(value.MothersMaidenName, dataPath + "/MothersMaidenName", missing));
			} else {
				errors.push({code: 302, params: {key: "MothersMaidenName"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("FathersName" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsFathersName.validationErrors(value.FathersName, dataPath + "/FathersName", missing));
			} else {
				errors.push({code: 302, params: {key: "FathersName"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("SocialSecurityNumber" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsSocialSecurityNumber.validationErrors(value.SocialSecurityNumber, dataPath + "/SocialSecurityNumber", missing));
			}
			if ("DriversLicenseNumber" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumber.validationErrors(value.DriversLicenseNumber, dataPath + "/DriversLicenseNumber", missing));
			}
			if ("PassportNumber" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumber.validationErrors(value.PassportNumber, dataPath + "/PassportNumber", missing));
			}
			if ("AddressUsed" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsed.validationErrors(value.AddressUsed, dataPath + "/AddressUsed", missing));
			} else {
				errors.push({code: 302, params: {key: "AddressUsed"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("Telecom" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecom.validationErrors(value.Telecom, dataPath + "/Telecom", missing));
			} else {
				errors.push({code: 302, params: {key: "Telecom"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("LanguageUsed" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsed.validationErrors(value.LanguageUsed, dataPath + "/LanguageUsed", missing));
			} else {
				errors.push({code: 302, params: {key: "LanguageUsed"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
			}
			if ("MedicalInterpreterNeeded" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMedicalInterpreterNeeded.validationErrors(value.MedicalInterpreterNeeded, dataPath + "/MedicalInterpreterNeeded", missing));
			}
			if ("FamilialRelationship" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationship.validationErrors(value.FamilialRelationship, dataPath + "/FamilialRelationship", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2Class.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.DateOfBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.DateOfBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.DateOfBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.PlaceOfBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.PlaceOfBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.PlaceOfBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.MultipleBirth, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.MultipleBirth; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.MultipleBirth = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.BirthSex, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.BirthSex; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.BirthSex = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.AdministrativeGender, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.AdministrativeGender; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.AdministrativeGender = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.Race, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.Race; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.Race = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.Ethnicity, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.Ethnicity; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.Ethnicity = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.MaritalStatus, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.MaritalStatus; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.MaritalStatus = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.MothersMaidenName, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.MothersMaidenName; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.MothersMaidenName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.FathersName, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.FathersName; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.FathersName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.SocialSecurityNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.SocialSecurityNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.SocialSecurityNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.DriversLicenseNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.DriversLicenseNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.DriversLicenseNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.PassportNumber, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.PassportNumber; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.PassportNumber = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.AddressUsed, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.AddressUsed; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.AddressUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.Telecom, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.Telecom; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.Telecom = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.LanguageUsed, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.LanguageUsed; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.LanguageUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.MedicalInterpreterNeeded, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.MedicalInterpreterNeeded; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.MedicalInterpreterNeeded = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPersonOfRecordAllOf2Class, DemographicsDefinitionsPersonOfRecordAllOf2Class.FamilialRelationship, {
		get: function() { return DemographicsDefinitionsPersonOfRecordAllOf2Class.FamilialRelationship; },
		set: function(newValue) { DemographicsDefinitionsPersonOfRecordAllOf2Class.FamilialRelationship = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier */
	var ActorDefinitionsNationalProviderIdentifierClass = classes.ActorDefinitionsNationalProviderIdentifier = function ActorDefinitionsNationalProviderIdentifierClass(value) {
		if (!(this instanceof ActorDefinitionsNationalProviderIdentifierClass)) return new ActorDefinitionsNationalProviderIdentifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsOrganizationalIdentifier(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsNationalProviderIdentifierClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsNationalProviderIdentifierClass.prototype.constructor = ActorDefinitionsNationalProviderIdentifierClass;
	ActorDefinitionsNationalProviderIdentifierClass.description = "A unique 10-digit number to allow providers to identify themselves in a standard way throughout their industry.\nConcepts: http://ncimeta.nci.nih.gov:C1549728";
	ActorDefinitionsNationalProviderIdentifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier";
	ActorDefinitionsNationalProviderIdentifierClass.links = {};
	ActorDefinitionsNationalProviderIdentifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsOrganizationalIdentifier.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/NationalProviderIdentifier"});
		}
		return errors;
	}
	ActorDefinitionsNationalProviderIdentifierClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsNationalProviderIdentifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsNationalProviderIdentifierClass, ActorDefinitionsNationalProviderIdentifierClass.Value, {
		get: function() { return ActorDefinitionsNationalProviderIdentifierClass.Value; },
		set: function(newValue) { ActorDefinitionsNationalProviderIdentifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1 */
	var ActorDefinitionsPractitionerAllOf1Class = classes.ActorDefinitionsPractitionerAllOf1 = function ActorDefinitionsPractitionerAllOf1Class(value) {
		if (!(this instanceof ActorDefinitionsPractitionerAllOf1Class)) return new ActorDefinitionsPractitionerAllOf1Class(value);
		if (typeof value.HumanName !== "undefined") {
			this.HumanName = value.HumanName;
		}
		if (typeof value.Affiliation !== "undefined") {
			this.Affiliation = value.Affiliation;
		}
		if (typeof value.NationalProviderIdentifier !== "undefined") {
			this.NationalProviderIdentifier = value.NationalProviderIdentifier;
		}
		if (this.NationalProviderIdentifier && !Array.isArray(this.NationalProviderIdentifier) && this.NationalProviderIdentifier) {
			this.NationalProviderIdentifier = new classes.ActorDefinitionsNationalProviderIdentifier(this.NationalProviderIdentifier);
		}
		if (typeof value.MedicalSpecialty !== "undefined") {
			this.MedicalSpecialty = value.MedicalSpecialty;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsPractitionerAllOf1Class.prototype = Object.create(superclass.prototype);
	ActorDefinitionsPractitionerAllOf1Class.prototype.constructor = ActorDefinitionsPractitionerAllOf1Class;
	ActorDefinitionsPractitionerAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1";
	ActorDefinitionsPractitionerAllOf1Class.links = {};
	ActorDefinitionsPractitionerAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1"});
		} else if (typeof value === "object") {
			if ("HumanName" in value) {
				errors = errors.concat(classes.ActorDefinitionsPractitionerAllOf1PropertiesHumanName.validationErrors(value.HumanName, dataPath + "/HumanName", missing));
			}
			if ("Affiliation" in value) {
				errors = errors.concat(classes.ActorDefinitionsPractitionerAllOf1PropertiesAffiliation.validationErrors(value.Affiliation, dataPath + "/Affiliation", missing));
			}
			if ("NationalProviderIdentifier" in value) {
				errors = errors.concat(classes.ActorDefinitionsNationalProviderIdentifier.validationErrors(value.NationalProviderIdentifier, dataPath + "/NationalProviderIdentifier", missing));
			}
			if ("MedicalSpecialty" in value) {
				errors = errors.concat(classes.ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialty.validationErrors(value.MedicalSpecialty, dataPath + "/MedicalSpecialty", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1"});
		}
		return errors;
	}
	ActorDefinitionsPractitionerAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPractitionerAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsPractitionerAllOf1Class, ActorDefinitionsPractitionerAllOf1Class.HumanName, {
		get: function() { return ActorDefinitionsPractitionerAllOf1Class.HumanName; },
		set: function(newValue) { ActorDefinitionsPractitionerAllOf1Class.HumanName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerAllOf1Class, ActorDefinitionsPractitionerAllOf1Class.Affiliation, {
		get: function() { return ActorDefinitionsPractitionerAllOf1Class.Affiliation; },
		set: function(newValue) { ActorDefinitionsPractitionerAllOf1Class.Affiliation = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerAllOf1Class, ActorDefinitionsPractitionerAllOf1Class.NationalProviderIdentifier, {
		get: function() { return ActorDefinitionsPractitionerAllOf1Class.NationalProviderIdentifier; },
		set: function(newValue) { ActorDefinitionsPractitionerAllOf1Class.NationalProviderIdentifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsPractitionerAllOf1Class, ActorDefinitionsPractitionerAllOf1Class.MedicalSpecialty, {
		get: function() { return ActorDefinitionsPractitionerAllOf1Class.MedicalSpecialty; },
		set: function(newValue) { ActorDefinitionsPractitionerAllOf1Class.MedicalSpecialty = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson/allOf/1 */
	var ActorDefinitionsRelatedPersonAllOf1Class = classes.ActorDefinitionsRelatedPersonAllOf1 = function ActorDefinitionsRelatedPersonAllOf1Class(value) {
		if (!(this instanceof ActorDefinitionsRelatedPersonAllOf1Class)) return new ActorDefinitionsRelatedPersonAllOf1Class(value);
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsRelatedPersonAllOf1Class.prototype = Object.create(superclass.prototype);
	ActorDefinitionsRelatedPersonAllOf1Class.prototype.constructor = ActorDefinitionsRelatedPersonAllOf1Class;
	ActorDefinitionsRelatedPersonAllOf1Class.description = "Empty DataElement?";
	ActorDefinitionsRelatedPersonAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson/allOf/1";
	ActorDefinitionsRelatedPersonAllOf1Class.links = {};
	ActorDefinitionsRelatedPersonAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson/allOf/1"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/RelatedPerson/allOf/1"});
		}
		return errors;
	}
	ActorDefinitionsRelatedPersonAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsRelatedPersonAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime */
	var CoreDefinitionsGeneralizedDateTimeClass = classes.CoreDefinitionsGeneralizedDateTime = function CoreDefinitionsGeneralizedDateTimeClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedDateTimeClass)) return new CoreDefinitionsGeneralizedDateTimeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsGeneralizedDateTimePropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedDateTimeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedDateTimeClass.prototype.constructor = CoreDefinitionsGeneralizedDateTimeClass;
	CoreDefinitionsGeneralizedDateTimeClass.description = "A point in time, specified qualitatively or quantitatively.";
	CoreDefinitionsGeneralizedDateTimeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime";
	CoreDefinitionsGeneralizedDateTimeClass.links = {};
	CoreDefinitionsGeneralizedDateTimeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedDateTimePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime"});
		}
		return errors;
	}
	CoreDefinitionsGeneralizedDateTimeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedDateTimeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGeneralizedDateTimeClass, CoreDefinitionsGeneralizedDateTimeClass.Value, {
		get: function() { return CoreDefinitionsGeneralizedDateTimeClass.Value; },
		set: function(newValue) { CoreDefinitionsGeneralizedDateTimeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge */
	var CoreDefinitionsGeneralizedAgeClass = classes.CoreDefinitionsGeneralizedAge = function CoreDefinitionsGeneralizedAgeClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedAgeClass)) return new CoreDefinitionsGeneralizedAgeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsGeneralizedAgePropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedAgeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedAgeClass.prototype.constructor = CoreDefinitionsGeneralizedAgeClass;
	CoreDefinitionsGeneralizedAgeClass.description = "Qualitative or quantitative, exact or inexact description of age.";
	CoreDefinitionsGeneralizedAgeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge";
	CoreDefinitionsGeneralizedAgeClass.links = {};
	CoreDefinitionsGeneralizedAgeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedAgePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge"});
		}
		return errors;
	}
	CoreDefinitionsGeneralizedAgeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedAgeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGeneralizedAgeClass, CoreDefinitionsGeneralizedAgeClass.Value, {
		get: function() { return CoreDefinitionsGeneralizedAgeClass.Value; },
		set: function(newValue) { CoreDefinitionsGeneralizedAgeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext */
	var CoreDefinitionsGestationalTemporalContextClass = classes.CoreDefinitionsGestationalTemporalContext = function CoreDefinitionsGestationalTemporalContextClass(value) {
		if (!(this instanceof CoreDefinitionsGestationalTemporalContextClass)) return new CoreDefinitionsGestationalTemporalContextClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsGestationalTemporalContextPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGestationalTemporalContextClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGestationalTemporalContextClass.prototype.constructor = CoreDefinitionsGestationalTemporalContextClass;
	CoreDefinitionsGestationalTemporalContextClass.description = "A named gestational time period, or a gestational age.";
	CoreDefinitionsGestationalTemporalContextClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext";
	CoreDefinitionsGestationalTemporalContextClass.links = {};
	CoreDefinitionsGestationalTemporalContextClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGestationalTemporalContextPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext"});
		}
		return errors;
	}
	CoreDefinitionsGestationalTemporalContextClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGestationalTemporalContextClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGestationalTemporalContextClass, CoreDefinitionsGestationalTemporalContextClass.Value, {
		get: function() { return CoreDefinitionsGestationalTemporalContextClass.Value; },
		set: function(newValue) { CoreDefinitionsGestationalTemporalContextClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/ShrId */
	var ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass = classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrId = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/ShrId";
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass.links = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/ShrId"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryType */
	var ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass = classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryType = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryType";
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass.links = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryType"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryId */
	var ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass = classes.ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryId = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryId";
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass.links = {};
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/PanelMembers/properties/Value/items/properties/EntryId"});
		}
		return errors;
	}
	ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsPanelMembersPropertiesValueItemsPropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem/properties/Value */
	var CoreDefinitionsCodeSystemPropertiesValueClass = classes.CoreDefinitionsCodeSystemPropertiesValue = {};
	CoreDefinitionsCodeSystemPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem/properties/Value";
	CoreDefinitionsCodeSystemPropertiesValueClass.links = {};
	CoreDefinitionsCodeSystemPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystem/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCodeSystemPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeSystemPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion/properties/Value */
	var CoreDefinitionsCodeSystemVersionPropertiesValueClass = classes.CoreDefinitionsCodeSystemVersionPropertiesValue = {};
	CoreDefinitionsCodeSystemVersionPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion/properties/Value";
	CoreDefinitionsCodeSystemVersionPropertiesValueClass.links = {};
	CoreDefinitionsCodeSystemVersionPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/CodeSystemVersion/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCodeSystemVersionPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCodeSystemVersionPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound */
	var CoreDefinitionsLowerBoundClass = classes.CoreDefinitionsLowerBound = function CoreDefinitionsLowerBoundClass(value) {
		if (!(this instanceof CoreDefinitionsLowerBoundClass)) return new CoreDefinitionsLowerBoundClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		if (typeof value.BoundType !== "undefined") {
			this.BoundType = value.BoundType;
		}
		if (this.BoundType && !Array.isArray(this.BoundType)) {
			this.BoundType = new classes.CoreDefinitionsBoundType(this.BoundType);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLowerBoundClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLowerBoundClass.prototype.constructor = CoreDefinitionsLowerBoundClass;
	CoreDefinitionsLowerBoundClass.description = "The lower limit on a quantitative value";
	CoreDefinitionsLowerBoundClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound";
	CoreDefinitionsLowerBoundClass.links = {};
	CoreDefinitionsLowerBoundClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound"});
			}
			if ("BoundType" in value) {
				errors = errors.concat(classes.CoreDefinitionsBoundType.validationErrors(value.BoundType, dataPath + "/BoundType", missing));
			} else {
				errors.push({code: 302, params: {key: "BoundType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerBound"});
		}
		return errors;
	}
	CoreDefinitionsLowerBoundClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLowerBoundClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLowerBoundClass, CoreDefinitionsLowerBoundClass.Value, {
		get: function() { return CoreDefinitionsLowerBoundClass.Value; },
		set: function(newValue) { CoreDefinitionsLowerBoundClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsLowerBoundClass, CoreDefinitionsLowerBoundClass.BoundType, {
		get: function() { return CoreDefinitionsLowerBoundClass.BoundType; },
		set: function(newValue) { CoreDefinitionsLowerBoundClass.BoundType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound */
	var CoreDefinitionsUpperBoundClass = classes.CoreDefinitionsUpperBound = function CoreDefinitionsUpperBoundClass(value) {
		if (!(this instanceof CoreDefinitionsUpperBoundClass)) return new CoreDefinitionsUpperBoundClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		if (typeof value.BoundType !== "undefined") {
			this.BoundType = value.BoundType;
		}
		if (this.BoundType && !Array.isArray(this.BoundType)) {
			this.BoundType = new classes.CoreDefinitionsBoundType(this.BoundType);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsUpperBoundClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsUpperBoundClass.prototype.constructor = CoreDefinitionsUpperBoundClass;
	CoreDefinitionsUpperBoundClass.description = "The upper limit on a quantitative value.";
	CoreDefinitionsUpperBoundClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound";
	CoreDefinitionsUpperBoundClass.links = {};
	CoreDefinitionsUpperBoundClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound"});
			}
			if ("BoundType" in value) {
				errors = errors.concat(classes.CoreDefinitionsBoundType.validationErrors(value.BoundType, dataPath + "/BoundType", missing));
			} else {
				errors.push({code: 302, params: {key: "BoundType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperBound"});
		}
		return errors;
	}
	CoreDefinitionsUpperBoundClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsUpperBoundClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsUpperBoundClass, CoreDefinitionsUpperBoundClass.Value, {
		get: function() { return CoreDefinitionsUpperBoundClass.Value; },
		set: function(newValue) { CoreDefinitionsUpperBoundClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsUpperBoundClass, CoreDefinitionsUpperBoundClass.BoundType, {
		get: function() { return CoreDefinitionsUpperBoundClass.BoundType; },
		set: function(newValue) { CoreDefinitionsUpperBoundClass.BoundType = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator */
	var CoreDefinitionsNumeratorClass = classes.CoreDefinitionsNumerator = function CoreDefinitionsNumeratorClass(value) {
		if (!(this instanceof CoreDefinitionsNumeratorClass)) return new CoreDefinitionsNumeratorClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsNumeratorClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsNumeratorClass.prototype.constructor = CoreDefinitionsNumeratorClass;
	CoreDefinitionsNumeratorClass.description = "The dividend of a fraction.\nConcepts: http://ncimeta.nci.nih.gov:C2825219";
	CoreDefinitionsNumeratorClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator";
	CoreDefinitionsNumeratorClass.links = {};
	CoreDefinitionsNumeratorClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Numerator"});
		}
		return errors;
	}
	CoreDefinitionsNumeratorClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsNumeratorClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsNumeratorClass, CoreDefinitionsNumeratorClass.Value, {
		get: function() { return CoreDefinitionsNumeratorClass.Value; },
		set: function(newValue) { CoreDefinitionsNumeratorClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator */
	var CoreDefinitionsDenominatorClass = classes.CoreDefinitionsDenominator = function CoreDefinitionsDenominatorClass(value) {
		if (!(this instanceof CoreDefinitionsDenominatorClass)) return new CoreDefinitionsDenominatorClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsQuantity(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDenominatorClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDenominatorClass.prototype.constructor = CoreDefinitionsDenominatorClass;
	CoreDefinitionsDenominatorClass.description = "The divisor of a fraction.\nConcepts: http://ncimeta.nci.nih.gov:C2825218";
	CoreDefinitionsDenominatorClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator";
	CoreDefinitionsDenominatorClass.links = {};
	CoreDefinitionsDenominatorClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Denominator"});
		}
		return errors;
	}
	CoreDefinitionsDenominatorClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDenominatorClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDenominatorClass, CoreDefinitionsDenominatorClass.Value, {
		get: function() { return CoreDefinitionsDenominatorClass.Value; },
		set: function(newValue) { CoreDefinitionsDenominatorClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart */
	var CoreDefinitionsTimePeriodStartClass = classes.CoreDefinitionsTimePeriodStart = function CoreDefinitionsTimePeriodStartClass(value) {
		if (!(this instanceof CoreDefinitionsTimePeriodStartClass)) return new CoreDefinitionsTimePeriodStartClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsTimePeriodStartPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTimePeriodStartClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTimePeriodStartClass.prototype.constructor = CoreDefinitionsTimePeriodStartClass;
	CoreDefinitionsTimePeriodStartClass.description = "The time at which something is to take effect, start, or did start.\nConcepts: http://ncimeta.nci.nih.gov:C1301880";
	CoreDefinitionsTimePeriodStartClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart";
	CoreDefinitionsTimePeriodStartClass.links = {};
	CoreDefinitionsTimePeriodStartClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsTimePeriodStartPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodStartClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodStartClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsTimePeriodStartClass, CoreDefinitionsTimePeriodStartClass.Value, {
		get: function() { return CoreDefinitionsTimePeriodStartClass.Value; },
		set: function(newValue) { CoreDefinitionsTimePeriodStartClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd */
	var CoreDefinitionsTimePeriodEndClass = classes.CoreDefinitionsTimePeriodEnd = function CoreDefinitionsTimePeriodEndClass(value) {
		if (!(this instanceof CoreDefinitionsTimePeriodEndClass)) return new CoreDefinitionsTimePeriodEndClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsTimePeriodEndPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTimePeriodEndClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTimePeriodEndClass.prototype.constructor = CoreDefinitionsTimePeriodEndClass;
	CoreDefinitionsTimePeriodEndClass.description = "The time at which something is to end or did end.\nConcepts: http://ncimeta.nci.nih.gov:C1522314";
	CoreDefinitionsTimePeriodEndClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd";
	CoreDefinitionsTimePeriodEndClass.links = {};
	CoreDefinitionsTimePeriodEndClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsTimePeriodEndPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodEndClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodEndClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsTimePeriodEndClass, CoreDefinitionsTimePeriodEndClass.Value, {
		get: function() { return CoreDefinitionsTimePeriodEndClass.Value; },
		set: function(newValue) { CoreDefinitionsTimePeriodEndClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange/properties/Value */
	var ObservationDefinitionsReferenceRangePropertiesValueClass = classes.ObservationDefinitionsReferenceRangePropertiesValue = function ObservationDefinitionsReferenceRangePropertiesValueClass(value) {
		if (!(this instanceof ObservationDefinitionsReferenceRangePropertiesValueClass)) return new ObservationDefinitionsReferenceRangePropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ObservationDefinitionsReferenceRangePropertiesValueClass.prototype = Object.create(superclass.prototype);
	ObservationDefinitionsReferenceRangePropertiesValueClass.prototype.constructor = ObservationDefinitionsReferenceRangePropertiesValueClass;
	ObservationDefinitionsReferenceRangePropertiesValueClass.description = "TBD: Range";
	ObservationDefinitionsReferenceRangePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/observation#/definitions/ReferenceRange/properties/Value";
	ObservationDefinitionsReferenceRangePropertiesValueClass.links = {};
	ObservationDefinitionsReferenceRangePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ObservationDefinitionsReferenceRangePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ObservationDefinitionsReferenceRangePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/ShrId */
	var CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass = classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrId = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/ShrId";
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass.links = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/ShrId"});
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryType */
	var CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass = classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryType = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryType";
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass.links = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryType"});
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryId */
	var CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass = classes.CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryId = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryId";
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass.links = {};
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Reason/properties/Value/anyOf/0/properties/EntryId"});
		}
		return errors;
	}
	CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsReasonPropertiesValueAnyOf0PropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/0 */
	var CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class = classes.CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0 = {};
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/0";
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class.links = {};
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/0"});
		}
		return errors;
	}
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOccurrenceTimePropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/1 */
	var CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class = classes.CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1 = {};
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/1";
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class.links = {};
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/1"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OccurrenceTime/properties/Value/anyOf/1"});
		}
		return errors;
	}
	CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOccurrenceTimePropertiesValueAnyOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant/properties/Value */
	var ActorDefinitionsParticipantPropertiesValueClass = classes.ActorDefinitionsParticipantPropertiesValue = function ActorDefinitionsParticipantPropertiesValueClass(value) {
		if (!(this instanceof ActorDefinitionsParticipantPropertiesValueClass)) return new ActorDefinitionsParticipantPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsParticipantPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsParticipantPropertiesValueClass.prototype.constructor = ActorDefinitionsParticipantPropertiesValueClass;
	ActorDefinitionsParticipantPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant/properties/Value";
	ActorDefinitionsParticipantPropertiesValueClass.links = {};
	ActorDefinitionsParticipantPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.DemographicsDefinitionsPersonOfRecord.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.ActorDefinitionsPractitioner.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.ActorDefinitionsRelatedPerson.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Participant/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ActorDefinitionsParticipantPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsParticipantPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType */
	var ActorDefinitionsParticipationTypeClass = classes.ActorDefinitionsParticipationType = function ActorDefinitionsParticipationTypeClass(value) {
		if (!(this instanceof ActorDefinitionsParticipationTypeClass)) return new ActorDefinitionsParticipationTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsParticipationTypeClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsParticipationTypeClass.prototype.constructor = ActorDefinitionsParticipationTypeClass;
	ActorDefinitionsParticipationTypeClass.description = "The detail of how the performer engaged in the task, for example, as the attending physician, surgical assistant, etc.\nConcepts: http://ncimeta.nci.nih.gov:C1553854";
	ActorDefinitionsParticipationTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType";
	ActorDefinitionsParticipationTypeClass.links = {};
	ActorDefinitionsParticipationTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ParticipationType"});
		}
		return errors;
	}
	ActorDefinitionsParticipationTypeClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsParticipationTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsParticipationTypeClass, ActorDefinitionsParticipationTypeClass.Value, {
		get: function() { return ActorDefinitionsParticipationTypeClass.Value; },
		set: function(newValue) { ActorDefinitionsParticipationTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location/properties/Value */
	var CoreDefinitionsLocationPropertiesValueClass = classes.CoreDefinitionsLocationPropertiesValue = function CoreDefinitionsLocationPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsLocationPropertiesValueClass)) return new CoreDefinitionsLocationPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLocationPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLocationPropertiesValueClass.prototype.constructor = CoreDefinitionsLocationPropertiesValueClass;
	CoreDefinitionsLocationPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location/properties/Value";
	CoreDefinitionsLocationPropertiesValueClass.links = {};
	CoreDefinitionsLocationPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsAddress.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGeoposition.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGeopoliticalLocation.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Location/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsLocationPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLocationPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty */
	var CoreDefinitionsCertaintyClass = classes.CoreDefinitionsCertainty = function CoreDefinitionsCertaintyClass(value) {
		if (!(this instanceof CoreDefinitionsCertaintyClass)) return new CoreDefinitionsCertaintyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCertaintyClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCertaintyClass.prototype.constructor = CoreDefinitionsCertaintyClass;
	CoreDefinitionsCertaintyClass.description = "The degree of confidence in a conclusion or assertion.";
	CoreDefinitionsCertaintyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty";
	CoreDefinitionsCertaintyClass.links = {};
	CoreDefinitionsCertaintyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Certainty"});
		}
		return errors;
	}
	CoreDefinitionsCertaintyClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCertaintyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCertaintyClass, CoreDefinitionsCertaintyClass.Value, {
		get: function() { return CoreDefinitionsCertaintyClass.Value; },
		set: function(newValue) { CoreDefinitionsCertaintyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/properties/Value */
	var AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass = classes.AdverseDefinitionsAdverseReactionAttributionPropertiesValue = function AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass)) return new AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.prototype.constructor = AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass;
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.description = "Missing schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/properties/Value";
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/properties/Value";
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (missing) {
			(missing[dataPath] = missing[dataPath] || []).push("http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/properties/Value");
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1 */
	var AdverseDefinitionsAdverseReactionAttributionAllOf1Class = classes.AdverseDefinitionsAdverseReactionAttributionAllOf1 = function AdverseDefinitionsAdverseReactionAttributionAllOf1Class(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAttributionAllOf1Class)) return new AdverseDefinitionsAdverseReactionAttributionAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValue(this.Value);
		}
		if (typeof value.Certainty !== "undefined") {
			this.Certainty = value.Certainty;
		}
		if (this.Certainty && !Array.isArray(this.Certainty)) {
			this.Certainty = new classes.CoreDefinitionsCertainty(this.Certainty);
		}
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.prototype.constructor = AdverseDefinitionsAdverseReactionAttributionAllOf1Class;
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1";
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.links = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1"});
			}
			if ("Certainty" in value) {
				errors = errors.concat(classes.CoreDefinitionsCertainty.validationErrors(value.Certainty, dataPath + "/Certainty", missing));
			} else {
				errors.push({code: 302, params: {key: "Certainty"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionAllOf1Class, AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Value, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Value; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionAllOf1Class, AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Certainty, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Certainty; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionAllOf1Class.Certainty = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value */
	var ActorDefinitionsDateOfBirthPropertiesValueClass = classes.ActorDefinitionsDateOfBirthPropertiesValue = function ActorDefinitionsDateOfBirthPropertiesValueClass(value) {
		if (!(this instanceof ActorDefinitionsDateOfBirthPropertiesValueClass)) return new ActorDefinitionsDateOfBirthPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsDateOfBirthPropertiesValueClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsDateOfBirthPropertiesValueClass.prototype.constructor = ActorDefinitionsDateOfBirthPropertiesValueClass;
	ActorDefinitionsDateOfBirthPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value";
	ActorDefinitionsDateOfBirthPropertiesValueClass.links = {};
	ActorDefinitionsDateOfBirthPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.ActorDefinitionsDateOfBirthPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	ActorDefinitionsDateOfBirthPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDateOfBirthPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation */
	var CoreDefinitionsGeopoliticalLocationClass = classes.CoreDefinitionsGeopoliticalLocation = function CoreDefinitionsGeopoliticalLocationClass(value) {
		if (!(this instanceof CoreDefinitionsGeopoliticalLocationClass)) return new CoreDefinitionsGeopoliticalLocationClass(value);
		
		CoreDefinitionsAddressClass.apply(this, arguments);
	};
	CoreDefinitionsGeopoliticalLocationClass.prototype = Object.create(CoreDefinitionsAddressClass.prototype);
	CoreDefinitionsGeopoliticalLocationClass.prototype.constructor = CoreDefinitionsGeopoliticalLocationClass;
	CoreDefinitionsGeopoliticalLocationClass.description = "The countries of the world and major geopolitical subregions, such as US states.\nConcepts: http://ncimeta.nci.nih.gov:C0017446";
	CoreDefinitionsGeopoliticalLocationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation";
	CoreDefinitionsGeopoliticalLocationClass.links = {};
	CoreDefinitionsGeopoliticalLocationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsAddress.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsGeopoliticalLocationAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGeopoliticalLocationClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeopoliticalLocationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder */
	var DemographicsDefinitionsMultipleBirthOrderClass = classes.DemographicsDefinitionsMultipleBirthOrder = function DemographicsDefinitionsMultipleBirthOrderClass(value) {
		if (!(this instanceof DemographicsDefinitionsMultipleBirthOrderClass)) return new DemographicsDefinitionsMultipleBirthOrderClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsMultipleBirthOrderClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsMultipleBirthOrderClass.prototype.constructor = DemographicsDefinitionsMultipleBirthOrderClass;
	DemographicsDefinitionsMultipleBirthOrderClass.description = "Order of birth of the person in multiple birth event (if part of multiple birth).\nConcepts: http://loinc.org:73771-8";
	DemographicsDefinitionsMultipleBirthOrderClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder";
	DemographicsDefinitionsMultipleBirthOrderClass.links = {};
	DemographicsDefinitionsMultipleBirthOrderClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsMultipleBirthOrderPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder"});
		}
		return errors;
	}
	DemographicsDefinitionsMultipleBirthOrderClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMultipleBirthOrderClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsMultipleBirthOrderClass, DemographicsDefinitionsMultipleBirthOrderClass.Value, {
		get: function() { return DemographicsDefinitionsMultipleBirthOrderClass.Value; },
		set: function(newValue) { DemographicsDefinitionsMultipleBirthOrderClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth/properties/Value */
	var DemographicsDefinitionsMultipleBirthPropertiesValueClass = classes.DemographicsDefinitionsMultipleBirthPropertiesValue = {};
	DemographicsDefinitionsMultipleBirthPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth/properties/Value";
	DemographicsDefinitionsMultipleBirthPropertiesValueClass.links = {};
	DemographicsDefinitionsMultipleBirthPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirth/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsMultipleBirthPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMultipleBirthPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender/properties/Value */
	var ActorDefinitionsAdministrativeGenderPropertiesValueClass = classes.ActorDefinitionsAdministrativeGenderPropertiesValue = {};
	ActorDefinitionsAdministrativeGenderPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender/properties/Value";
	ActorDefinitionsAdministrativeGenderPropertiesValueClass.links = {};
	ActorDefinitionsAdministrativeGenderPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AdministrativeGender/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsAdministrativeGenderPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAdministrativeGenderPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race/properties/RaceDetail */
	var DemographicsDefinitionsRacePropertiesRaceDetailClass = classes.DemographicsDefinitionsRacePropertiesRaceDetail = {};
	DemographicsDefinitionsRacePropertiesRaceDetailClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race/properties/RaceDetail";
	DemographicsDefinitionsRacePropertiesRaceDetailClass.links = {};
	DemographicsDefinitionsRacePropertiesRaceDetailClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsRaceDetail.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race/properties/RaceDetail"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Race/properties/RaceDetail"});
		}
		return errors;
	}
	DemographicsDefinitionsRacePropertiesRaceDetailClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsRacePropertiesRaceDetailClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity/properties/EthnicityDetail */
	var DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass = classes.DemographicsDefinitionsEthnicityPropertiesEthnicityDetail = {};
	DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity/properties/EthnicityDetail";
	DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass.links = {};
	DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsEthnicityDetail.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity/properties/EthnicityDetail"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Ethnicity/properties/EthnicityDetail"});
		}
		return errors;
	}
	DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsEthnicityPropertiesEthnicityDetailClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName */
	var CoreDefinitionsHumanNameClass = classes.CoreDefinitionsHumanName = function CoreDefinitionsHumanNameClass(value) {
		if (!(this instanceof CoreDefinitionsHumanNameClass)) return new CoreDefinitionsHumanNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.HumanNamePrefix !== "undefined") {
			this.HumanNamePrefix = value.HumanNamePrefix;
		}
		if (this.HumanNamePrefix && !Array.isArray(this.HumanNamePrefix) && this.HumanNamePrefix) {
			this.HumanNamePrefix = new classes.CoreDefinitionsHumanNamePrefix(this.HumanNamePrefix);
		}
		if (typeof value.GivenName !== "undefined") {
			this.GivenName = value.GivenName;
		}
		if (typeof value.FamilyName !== "undefined") {
			this.FamilyName = value.FamilyName;
		}
		if (this.FamilyName && !Array.isArray(this.FamilyName) && this.FamilyName) {
			this.FamilyName = new classes.CoreDefinitionsFamilyName(this.FamilyName);
		}
		if (typeof value.HumanNameSuffix !== "undefined") {
			this.HumanNameSuffix = value.HumanNameSuffix;
		}
		if (typeof value.HumanNameUse !== "undefined") {
			this.HumanNameUse = value.HumanNameUse;
		}
		if (this.HumanNameUse && !Array.isArray(this.HumanNameUse) && this.HumanNameUse) {
			this.HumanNameUse = new classes.CoreDefinitionsHumanNameUse(this.HumanNameUse);
		}
		if (typeof value.EffectiveTimePeriod !== "undefined") {
			this.EffectiveTimePeriod = value.EffectiveTimePeriod;
		}
		if (this.EffectiveTimePeriod && !Array.isArray(this.EffectiveTimePeriod) && typeof this.EffectiveTimePeriod === "object") {
			this.EffectiveTimePeriod = new classes.CoreDefinitionsEffectiveTimePeriod(this.EffectiveTimePeriod);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsHumanNameClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsHumanNameClass.prototype.constructor = CoreDefinitionsHumanNameClass;
	CoreDefinitionsHumanNameClass.description = "A name used by a human being, written as it would be typically expressed. May include a breakdown of the various elements of the name (family name, given name, etc.).\nConcepts: http://ncimeta.nci.nih.gov:C1547383";
	CoreDefinitionsHumanNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName";
	CoreDefinitionsHumanNameClass.links = {};
	CoreDefinitionsHumanNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNamePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName"});
			}
			if ("HumanNamePrefix" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNamePrefix.validationErrors(value.HumanNamePrefix, dataPath + "/HumanNamePrefix", missing));
			}
			if ("GivenName" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNamePropertiesGivenName.validationErrors(value.GivenName, dataPath + "/GivenName", missing));
			}
			if ("FamilyName" in value) {
				errors = errors.concat(classes.CoreDefinitionsFamilyName.validationErrors(value.FamilyName, dataPath + "/FamilyName", missing));
			}
			if ("HumanNameSuffix" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNamePropertiesHumanNameSuffix.validationErrors(value.HumanNameSuffix, dataPath + "/HumanNameSuffix", missing));
			}
			if ("HumanNameUse" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNameUse.validationErrors(value.HumanNameUse, dataPath + "/HumanNameUse", missing));
			}
			if ("EffectiveTimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriod.validationErrors(value.EffectiveTimePeriod, dataPath + "/EffectiveTimePeriod", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName"});
		}
		return errors;
	}
	CoreDefinitionsHumanNameClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.Value, {
		get: function() { return CoreDefinitionsHumanNameClass.Value; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.HumanNamePrefix, {
		get: function() { return CoreDefinitionsHumanNameClass.HumanNamePrefix; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.HumanNamePrefix = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.GivenName, {
		get: function() { return CoreDefinitionsHumanNameClass.GivenName; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.GivenName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.FamilyName, {
		get: function() { return CoreDefinitionsHumanNameClass.FamilyName; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.FamilyName = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.HumanNameSuffix, {
		get: function() { return CoreDefinitionsHumanNameClass.HumanNameSuffix; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.HumanNameSuffix = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.HumanNameUse, {
		get: function() { return CoreDefinitionsHumanNameClass.HumanNameUse; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.HumanNameUse = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsHumanNameClass, CoreDefinitionsHumanNameClass.EffectiveTimePeriod, {
		get: function() { return CoreDefinitionsHumanNameClass.EffectiveTimePeriod; },
		set: function(newValue) { CoreDefinitionsHumanNameClass.EffectiveTimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber/properties/Value */
	var DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass = classes.DemographicsDefinitionsSocialSecurityNumberPropertiesValue = {};
	DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber/properties/Value";
	DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass.links = {};
	DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/SocialSecurityNumber/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsSocialSecurityNumberPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded/properties/Value */
	var DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass = classes.DemographicsDefinitionsMedicalInterpreterNeededPropertiesValue = {};
	DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded/properties/Value";
	DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass.links = {};
	DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MedicalInterpreterNeeded/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMedicalInterpreterNeededPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag */
	var ActorDefinitionsAnonymizedFlagClass = classes.ActorDefinitionsAnonymizedFlag = function ActorDefinitionsAnonymizedFlagClass(value) {
		if (!(this instanceof ActorDefinitionsAnonymizedFlagClass)) return new ActorDefinitionsAnonymizedFlagClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsAnonymizedFlagClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsAnonymizedFlagClass.prototype.constructor = ActorDefinitionsAnonymizedFlagClass;
	ActorDefinitionsAnonymizedFlagClass.description = "Flag indicating if personally identifiable information has been withheld or disguised.\nConcepts: http://ncimeta.nci.nih.gov:C3858751";
	ActorDefinitionsAnonymizedFlagClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag";
	ActorDefinitionsAnonymizedFlagClass.links = {};
	ActorDefinitionsAnonymizedFlagClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsAnonymizedFlagPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag"});
		}
		return errors;
	}
	ActorDefinitionsAnonymizedFlagClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAnonymizedFlagClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsAnonymizedFlagClass, ActorDefinitionsAnonymizedFlagClass.Value, {
		get: function() { return ActorDefinitionsAnonymizedFlagClass.Value; },
		set: function(newValue) { ActorDefinitionsAnonymizedFlagClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag */
	var ActorDefinitionsFictionalPersonFlagClass = classes.ActorDefinitionsFictionalPersonFlag = function ActorDefinitionsFictionalPersonFlagClass(value) {
		if (!(this instanceof ActorDefinitionsFictionalPersonFlagClass)) return new ActorDefinitionsFictionalPersonFlagClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsFictionalPersonFlagClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsFictionalPersonFlagClass.prototype.constructor = ActorDefinitionsFictionalPersonFlagClass;
	ActorDefinitionsFictionalPersonFlagClass.description = "Flag indicating if this record represents a fictional (synthetic, not real) person.\nConcepts: http://ncimeta.nci.nih.gov:C0887933";
	ActorDefinitionsFictionalPersonFlagClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag";
	ActorDefinitionsFictionalPersonFlagClass.links = {};
	ActorDefinitionsFictionalPersonFlagClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsFictionalPersonFlagPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag"});
		}
		return errors;
	}
	ActorDefinitionsFictionalPersonFlagClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsFictionalPersonFlagClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsFictionalPersonFlagClass, ActorDefinitionsFictionalPersonFlagClass.Value, {
		get: function() { return ActorDefinitionsFictionalPersonFlagClass.Value; },
		set: function(newValue) { ActorDefinitionsFictionalPersonFlagClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased */
	var ActorDefinitionsDeceasedClass = classes.ActorDefinitionsDeceased = function ActorDefinitionsDeceasedClass(value) {
		if (!(this instanceof ActorDefinitionsDeceasedClass)) return new ActorDefinitionsDeceasedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.DateOfDeath !== "undefined") {
			this.DateOfDeath = value.DateOfDeath;
		}
		if (this.DateOfDeath && !Array.isArray(this.DateOfDeath) && this.DateOfDeath) {
			this.DateOfDeath = new classes.ActorDefinitionsDateOfDeath(this.DateOfDeath);
		}
		if (typeof value.AgeAtDeath !== "undefined") {
			this.AgeAtDeath = value.AgeAtDeath;
		}
		if (this.AgeAtDeath && !Array.isArray(this.AgeAtDeath) && this.AgeAtDeath) {
			this.AgeAtDeath = new classes.ActorDefinitionsAgeAtDeath(this.AgeAtDeath);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsDeceasedClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsDeceasedClass.prototype.constructor = ActorDefinitionsDeceasedClass;
	ActorDefinitionsDeceasedClass.description = "An indication that the person is no longer living, given by a date, time of death, or a boolean value which, when true, indicates the person is deceased.\nConcepts: http://ncimeta.nci.nih.gov:C0011065";
	ActorDefinitionsDeceasedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased";
	ActorDefinitionsDeceasedClass.links = {};
	ActorDefinitionsDeceasedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsDeceasedPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased"});
			}
			if ("DateOfDeath" in value) {
				errors = errors.concat(classes.ActorDefinitionsDateOfDeath.validationErrors(value.DateOfDeath, dataPath + "/DateOfDeath", missing));
			}
			if ("AgeAtDeath" in value) {
				errors = errors.concat(classes.ActorDefinitionsAgeAtDeath.validationErrors(value.AgeAtDeath, dataPath + "/AgeAtDeath", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased"});
		}
		return errors;
	}
	ActorDefinitionsDeceasedClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDeceasedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsDeceasedClass, ActorDefinitionsDeceasedClass.Value, {
		get: function() { return ActorDefinitionsDeceasedClass.Value; },
		set: function(newValue) { ActorDefinitionsDeceasedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsDeceasedClass, ActorDefinitionsDeceasedClass.DateOfDeath, {
		get: function() { return ActorDefinitionsDeceasedClass.DateOfDeath; },
		set: function(newValue) { ActorDefinitionsDeceasedClass.DateOfDeath = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsDeceasedClass, ActorDefinitionsDeceasedClass.AgeAtDeath, {
		get: function() { return ActorDefinitionsDeceasedClass.AgeAtDeath; },
		set: function(newValue) { ActorDefinitionsDeceasedClass.AgeAtDeath = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/HumanName */
	var ActorDefinitionsPersonPropertiesHumanNameClass = classes.ActorDefinitionsPersonPropertiesHumanName = {};
	ActorDefinitionsPersonPropertiesHumanNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/HumanName";
	ActorDefinitionsPersonPropertiesHumanNameClass.links = {};
	ActorDefinitionsPersonPropertiesHumanNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsHumanName.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/HumanName"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/HumanName"});
		}
		return errors;
	}
	ActorDefinitionsPersonPropertiesHumanNameClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPersonPropertiesHumanNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/AddressUsed */
	var ActorDefinitionsPersonPropertiesAddressUsedClass = classes.ActorDefinitionsPersonPropertiesAddressUsed = {};
	ActorDefinitionsPersonPropertiesAddressUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/AddressUsed";
	ActorDefinitionsPersonPropertiesAddressUsedClass.links = {};
	ActorDefinitionsPersonPropertiesAddressUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUsed.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/AddressUsed"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/AddressUsed"});
		}
		return errors;
	}
	ActorDefinitionsPersonPropertiesAddressUsedClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPersonPropertiesAddressUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/Telecom */
	var ActorDefinitionsPersonPropertiesTelecomClass = classes.ActorDefinitionsPersonPropertiesTelecom = {};
	ActorDefinitionsPersonPropertiesTelecomClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/Telecom";
	ActorDefinitionsPersonPropertiesTelecomClass.links = {};
	ActorDefinitionsPersonPropertiesTelecomClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecom.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/Telecom"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/Telecom"});
		}
		return errors;
	}
	ActorDefinitionsPersonPropertiesTelecomClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPersonPropertiesTelecomClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/LanguageUsed */
	var ActorDefinitionsPersonPropertiesLanguageUsedClass = classes.ActorDefinitionsPersonPropertiesLanguageUsed = {};
	ActorDefinitionsPersonPropertiesLanguageUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/LanguageUsed";
	ActorDefinitionsPersonPropertiesLanguageUsedClass.links = {};
	ActorDefinitionsPersonPropertiesLanguageUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsLanguageUsed.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/LanguageUsed"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Person/properties/LanguageUsed"});
		}
		return errors;
	}
	ActorDefinitionsPersonPropertiesLanguageUsedClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPersonPropertiesLanguageUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/DriversLicenseNumber */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumber = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/DriversLicenseNumber";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsDriversLicenseNumber.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/DriversLicenseNumber"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/DriversLicenseNumber"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesDriversLicenseNumberClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/PassportNumber */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumber = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/PassportNumber";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsPassportNumber.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/PassportNumber"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/PassportNumber"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesPassportNumberClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/AddressUsed */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsed = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/AddressUsed";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length < 1) {
				errors.push({code: 400, params: {length: value.length, minimum: 1}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/AddressUsed"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUsed.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/AddressUsed"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/AddressUsed"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesAddressUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/Telecom */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecom = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/Telecom";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length < 1) {
				errors.push({code: 400, params: {length: value.length, minimum: 1}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/Telecom"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecom.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/Telecom"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/Telecom"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesTelecomClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/LanguageUsed */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsed = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/LanguageUsed";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length < 1) {
				errors.push({code: 400, params: {length: value.length, minimum: 1}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/LanguageUsed"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsLanguageUsed.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/LanguageUsed"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/LanguageUsed"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesLanguageUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/FamilialRelationship */
	var DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass = classes.DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationship = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/FamilialRelationship";
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass.links = {};
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsFamilialRelationship.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/FamilialRelationship"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PersonOfRecord/allOf/2/properties/FamilialRelationship"});
		}
		return errors;
	}
	DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPersonOfRecordAllOf2PropertiesFamilialRelationshipClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier */
	var CoreDefinitionsOrganizationalIdentifierClass = classes.CoreDefinitionsOrganizationalIdentifier = function CoreDefinitionsOrganizationalIdentifierClass(value) {
		if (!(this instanceof CoreDefinitionsOrganizationalIdentifierClass)) return new CoreDefinitionsOrganizationalIdentifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.TimePeriod !== "undefined") {
			this.TimePeriod = value.TimePeriod;
		}
		if (this.TimePeriod && !Array.isArray(this.TimePeriod) && this.TimePeriod) {
			this.TimePeriod = new classes.CoreDefinitionsTimePeriod(this.TimePeriod);
		}
		if (typeof value.Organization !== "undefined") {
			this.Organization = value.Organization;
		}
		if (this.Organization && !Array.isArray(this.Organization) && this.Organization) {
			this.Organization = new classes.ActorDefinitionsOrganization(this.Organization);
		}
		
		CoreDefinitionsIdentifierClass.apply(this, arguments);
	};
	CoreDefinitionsOrganizationalIdentifierClass.prototype = Object.create(CoreDefinitionsIdentifierClass.prototype);
	CoreDefinitionsOrganizationalIdentifierClass.prototype.constructor = CoreDefinitionsOrganizationalIdentifierClass;
	CoreDefinitionsOrganizationalIdentifierClass.description = "Unique identifier of something or someone, assigned by an organization, and potentially effective for only a limited time period.";
	CoreDefinitionsOrganizationalIdentifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier";
	CoreDefinitionsOrganizationalIdentifierClass.links = {};
	CoreDefinitionsOrganizationalIdentifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsIdentifier.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsOrganizationalIdentifierAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsOrganizationalIdentifierClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOrganizationalIdentifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierClass, CoreDefinitionsOrganizationalIdentifierClass.Value, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierClass.Value; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierClass, CoreDefinitionsOrganizationalIdentifierClass.TimePeriod, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierClass.TimePeriod; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierClass.TimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierClass, CoreDefinitionsOrganizationalIdentifierClass.Organization, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierClass.Organization; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierClass.Organization = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/HumanName */
	var ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass = classes.ActorDefinitionsPractitionerAllOf1PropertiesHumanName = {};
	ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/HumanName";
	ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass.links = {};
	ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsHumanName.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/HumanName"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/HumanName"});
		}
		return errors;
	}
	ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPractitionerAllOf1PropertiesHumanNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/Affiliation */
	var ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass = classes.ActorDefinitionsPractitionerAllOf1PropertiesAffiliation = {};
	ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/Affiliation";
	ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass.links = {};
	ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsAffiliation.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/Affiliation"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/Affiliation"});
		}
		return errors;
	}
	ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPractitionerAllOf1PropertiesAffiliationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/MedicalSpecialty */
	var ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass = classes.ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialty = {};
	ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/MedicalSpecialty";
	ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass.links = {};
	ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsMedicalSpecialty.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/MedicalSpecialty"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Practitioner/allOf/1/properties/MedicalSpecialty"});
		}
		return errors;
	}
	ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsPractitionerAllOf1PropertiesMedicalSpecialtyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value */
	var CoreDefinitionsGeneralizedDateTimePropertiesValueClass = classes.CoreDefinitionsGeneralizedDateTimePropertiesValue = function CoreDefinitionsGeneralizedDateTimePropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedDateTimePropertiesValueClass)) return new CoreDefinitionsGeneralizedDateTimePropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.prototype.constructor = CoreDefinitionsGeneralizedDateTimePropertiesValueClass;
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value";
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.links = {};
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsQualitativeDateTime.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGeneralizedDateTimePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedDateTimePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge/properties/Value */
	var CoreDefinitionsGeneralizedAgePropertiesValueClass = classes.CoreDefinitionsGeneralizedAgePropertiesValue = function CoreDefinitionsGeneralizedAgePropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsGeneralizedAgePropertiesValueClass)) return new CoreDefinitionsGeneralizedAgePropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeneralizedAgePropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeneralizedAgePropertiesValueClass.prototype.constructor = CoreDefinitionsGeneralizedAgePropertiesValueClass;
	CoreDefinitionsGeneralizedAgePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge/properties/Value";
	CoreDefinitionsGeneralizedAgePropertiesValueClass.links = {};
	CoreDefinitionsGeneralizedAgePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsAge.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsAgeRange.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsAgeGroup.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[2] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedAge/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGeneralizedAgePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedAgePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext/properties/Value */
	var CoreDefinitionsGestationalTemporalContextPropertiesValueClass = classes.CoreDefinitionsGestationalTemporalContextPropertiesValue = function CoreDefinitionsGestationalTemporalContextPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsGestationalTemporalContextPropertiesValueClass)) return new CoreDefinitionsGestationalTemporalContextPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.prototype.constructor = CoreDefinitionsGestationalTemporalContextPropertiesValueClass;
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext/properties/Value";
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.links = {};
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGestationalAge.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsGestationalTimePeriod.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTemporalContext/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGestationalTemporalContextPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGestationalTemporalContextPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType */
	var CoreDefinitionsBoundTypeClass = classes.CoreDefinitionsBoundType = function CoreDefinitionsBoundTypeClass(value) {
		if (!(this instanceof CoreDefinitionsBoundTypeClass)) return new CoreDefinitionsBoundTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsBoundTypeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsBoundTypeClass.prototype.constructor = CoreDefinitionsBoundTypeClass;
	CoreDefinitionsBoundTypeClass.description = "Indicates the actual value is lt (<) or lte (<=) the given value.";
	CoreDefinitionsBoundTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType";
	CoreDefinitionsBoundTypeClass.links = {};
	CoreDefinitionsBoundTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsBoundTypePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType"});
		}
		return errors;
	}
	CoreDefinitionsBoundTypeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsBoundTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsBoundTypeClass, CoreDefinitionsBoundTypeClass.Value, {
		get: function() { return CoreDefinitionsBoundTypeClass.Value; },
		set: function(newValue) { CoreDefinitionsBoundTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value */
	var CoreDefinitionsTimePeriodStartPropertiesValueClass = classes.CoreDefinitionsTimePeriodStartPropertiesValue = function CoreDefinitionsTimePeriodStartPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsTimePeriodStartPropertiesValueClass)) return new CoreDefinitionsTimePeriodStartPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTimePeriodStartPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTimePeriodStartPropertiesValueClass.prototype.constructor = CoreDefinitionsTimePeriodStartPropertiesValueClass;
	CoreDefinitionsTimePeriodStartPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value";
	CoreDefinitionsTimePeriodStartPropertiesValueClass.links = {};
	CoreDefinitionsTimePeriodStartPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsTimePeriodStartPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodStartPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value */
	var CoreDefinitionsTimePeriodEndPropertiesValueClass = classes.CoreDefinitionsTimePeriodEndPropertiesValue = function CoreDefinitionsTimePeriodEndPropertiesValueClass(value) {
		if (!(this instanceof CoreDefinitionsTimePeriodEndPropertiesValueClass)) return new CoreDefinitionsTimePeriodEndPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsTimePeriodEndPropertiesValueClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsTimePeriodEndPropertiesValueClass.prototype.constructor = CoreDefinitionsTimePeriodEndPropertiesValueClass;
	CoreDefinitionsTimePeriodEndPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value";
	CoreDefinitionsTimePeriodEndPropertiesValueClass.links = {};
	CoreDefinitionsTimePeriodEndPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsTimePeriodEndPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodEndPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address */
	var CoreDefinitionsAddressClass = classes.CoreDefinitionsAddress = function CoreDefinitionsAddressClass(value) {
		if (!(this instanceof CoreDefinitionsAddressClass)) return new CoreDefinitionsAddressClass(value);
		if (typeof value.AddressLine !== "undefined") {
			this.AddressLine = value.AddressLine;
		}
		if (typeof value.City !== "undefined") {
			this.City = value.City;
		}
		if (this.City && !Array.isArray(this.City) && this.City) {
			this.City = new classes.CoreDefinitionsCity(this.City);
		}
		if (typeof value.County !== "undefined") {
			this.County = value.County;
		}
		if (this.County && !Array.isArray(this.County) && this.County) {
			this.County = new classes.CoreDefinitionsCounty(this.County);
		}
		if (typeof value.State !== "undefined") {
			this.State = value.State;
		}
		if (this.State && !Array.isArray(this.State) && this.State) {
			this.State = new classes.CoreDefinitionsState(this.State);
		}
		if (typeof value.PostalCode !== "undefined") {
			this.PostalCode = value.PostalCode;
		}
		if (this.PostalCode && !Array.isArray(this.PostalCode) && this.PostalCode) {
			this.PostalCode = new classes.CoreDefinitionsPostalCode(this.PostalCode);
		}
		if (typeof value.Country !== "undefined") {
			this.Country = value.Country;
		}
		if (this.Country && !Array.isArray(this.Country)) {
			this.Country = new classes.CoreDefinitionsCountry(this.Country);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAddressClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAddressClass.prototype.constructor = CoreDefinitionsAddressClass;
	CoreDefinitionsAddressClass.description = "An address expressed using postal conventions (as opposed to GPS or other location definition formats). This data type may be used to convey addresses for use in delivering mail as well as for visiting locations and which might not be valid for mail delivery. There are a variety of postal address formats defined around the world. (Source: HL7 FHIR).";
	CoreDefinitionsAddressClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address";
	CoreDefinitionsAddressClass.links = {};
	CoreDefinitionsAddressClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address"});
		} else if (typeof value === "object") {
			if ("AddressLine" in value) {
				errors = errors.concat(classes.CoreDefinitionsAddressPropertiesAddressLine.validationErrors(value.AddressLine, dataPath + "/AddressLine", missing));
			}
			if ("City" in value) {
				errors = errors.concat(classes.CoreDefinitionsCity.validationErrors(value.City, dataPath + "/City", missing));
			}
			if ("County" in value) {
				errors = errors.concat(classes.CoreDefinitionsCounty.validationErrors(value.County, dataPath + "/County", missing));
			}
			if ("State" in value) {
				errors = errors.concat(classes.CoreDefinitionsState.validationErrors(value.State, dataPath + "/State", missing));
			}
			if ("PostalCode" in value) {
				errors = errors.concat(classes.CoreDefinitionsPostalCode.validationErrors(value.PostalCode, dataPath + "/PostalCode", missing));
			}
			if ("Country" in value) {
				errors = errors.concat(classes.CoreDefinitionsCountry.validationErrors(value.Country, dataPath + "/Country", missing));
			} else {
				errors.push({code: 302, params: {key: "Country"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address"});
		}
		return errors;
	}
	CoreDefinitionsAddressClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAddressClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.AddressLine, {
		get: function() { return CoreDefinitionsAddressClass.AddressLine; },
		set: function(newValue) { CoreDefinitionsAddressClass.AddressLine = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.City, {
		get: function() { return CoreDefinitionsAddressClass.City; },
		set: function(newValue) { CoreDefinitionsAddressClass.City = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.County, {
		get: function() { return CoreDefinitionsAddressClass.County; },
		set: function(newValue) { CoreDefinitionsAddressClass.County = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.State, {
		get: function() { return CoreDefinitionsAddressClass.State; },
		set: function(newValue) { CoreDefinitionsAddressClass.State = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.PostalCode, {
		get: function() { return CoreDefinitionsAddressClass.PostalCode; },
		set: function(newValue) { CoreDefinitionsAddressClass.PostalCode = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAddressClass, CoreDefinitionsAddressClass.Country, {
		get: function() { return CoreDefinitionsAddressClass.Country; },
		set: function(newValue) { CoreDefinitionsAddressClass.Country = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition */
	var CoreDefinitionsGeopositionClass = classes.CoreDefinitionsGeoposition = function CoreDefinitionsGeopositionClass(value) {
		if (!(this instanceof CoreDefinitionsGeopositionClass)) return new CoreDefinitionsGeopositionClass(value);
		if (typeof value.Latitude !== "undefined") {
			this.Latitude = value.Latitude;
		}
		if (this.Latitude && !Array.isArray(this.Latitude)) {
			this.Latitude = new classes.CoreDefinitionsLatitude(this.Latitude);
		}
		if (typeof value.Longitude !== "undefined") {
			this.Longitude = value.Longitude;
		}
		if (this.Longitude && !Array.isArray(this.Longitude)) {
			this.Longitude = new classes.CoreDefinitionsLongitude(this.Longitude);
		}
		if (typeof value.Altitude !== "undefined") {
			this.Altitude = value.Altitude;
		}
		if (this.Altitude && !Array.isArray(this.Altitude) && this.Altitude) {
			this.Altitude = new classes.CoreDefinitionsAltitude(this.Altitude);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeopositionClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeopositionClass.prototype.constructor = CoreDefinitionsGeopositionClass;
	CoreDefinitionsGeopositionClass.description = "The location on the surface of the Earth, described by a latitude and longitude (and optional altitude).";
	CoreDefinitionsGeopositionClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition";
	CoreDefinitionsGeopositionClass.links = {};
	CoreDefinitionsGeopositionClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition"});
		} else if (typeof value === "object") {
			if ("Latitude" in value) {
				errors = errors.concat(classes.CoreDefinitionsLatitude.validationErrors(value.Latitude, dataPath + "/Latitude", missing));
			} else {
				errors.push({code: 302, params: {key: "Latitude"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition"});
			}
			if ("Longitude" in value) {
				errors = errors.concat(classes.CoreDefinitionsLongitude.validationErrors(value.Longitude, dataPath + "/Longitude", missing));
			} else {
				errors.push({code: 302, params: {key: "Longitude"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition"});
			}
			if ("Altitude" in value) {
				errors = errors.concat(classes.CoreDefinitionsAltitude.validationErrors(value.Altitude, dataPath + "/Altitude", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Geoposition"});
		}
		return errors;
	}
	CoreDefinitionsGeopositionClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeopositionClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGeopositionClass, CoreDefinitionsGeopositionClass.Latitude, {
		get: function() { return CoreDefinitionsGeopositionClass.Latitude; },
		set: function(newValue) { CoreDefinitionsGeopositionClass.Latitude = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsGeopositionClass, CoreDefinitionsGeopositionClass.Longitude, {
		get: function() { return CoreDefinitionsGeopositionClass.Longitude; },
		set: function(newValue) { CoreDefinitionsGeopositionClass.Longitude = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsGeopositionClass, CoreDefinitionsGeopositionClass.Altitude, {
		get: function() { return CoreDefinitionsGeopositionClass.Altitude; },
		set: function(newValue) { CoreDefinitionsGeopositionClass.Altitude = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value */
	var AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass = classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValue = function AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass(value) {
		if (!(this instanceof AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass)) return new AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass(value);
		if (typeof value.ShrId !== "undefined") {
			this.ShrId = value.ShrId;
		}
		if (typeof value.EntryType !== "undefined") {
			this.EntryType = value.EntryType;
		}
		if (typeof value.EntryId !== "undefined") {
			this.EntryId = value.EntryId;
		}
		
		superclass.apply(this, arguments);
	};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.prototype = Object.create(superclass.prototype);
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.prototype.constructor = AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass;
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value";
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
		} else if (typeof value === "object") {
			if ("ShrId" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrId.validationErrors(value.ShrId, dataPath + "/ShrId", missing));
			} else {
				errors.push({code: 302, params: {key: "ShrId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
			}
			if ("EntryType" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryType.validationErrors(value.EntryType, dataPath + "/EntryType", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
			}
			if ("EntryId" in value) {
				errors = errors.concat(classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryId.validationErrors(value.EntryId, dataPath + "/EntryId", missing));
			} else {
				errors.push({code: 302, params: {key: "EntryId"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass, AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.ShrId, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.ShrId; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.ShrId = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass, AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryType, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryType; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass, AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryId, {
		get: function() { return AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryId; },
		set: function(newValue) { AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValueClass.EntryId = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value/anyOf/0 */
	var ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class = classes.ActorDefinitionsDateOfBirthPropertiesValueAnyOf0 = {};
	ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value/anyOf/0";
	ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class.links = {};
	ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfBirth/properties/Value/anyOf/0"});
		}
		return errors;
	}
	ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDateOfBirthPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation/allOf/1 */
	var CoreDefinitionsGeopoliticalLocationAllOf1Class = classes.CoreDefinitionsGeopoliticalLocationAllOf1 = function CoreDefinitionsGeopoliticalLocationAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsGeopoliticalLocationAllOf1Class)) return new CoreDefinitionsGeopoliticalLocationAllOf1Class(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGeopoliticalLocationAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGeopoliticalLocationAllOf1Class.prototype.constructor = CoreDefinitionsGeopoliticalLocationAllOf1Class;
	CoreDefinitionsGeopoliticalLocationAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation/allOf/1";
	CoreDefinitionsGeopoliticalLocationAllOf1Class.links = {};
	CoreDefinitionsGeopoliticalLocationAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation/allOf/1"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeopoliticalLocation/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsGeopoliticalLocationAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeopoliticalLocationAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value */
	var DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass = classes.DemographicsDefinitionsMultipleBirthOrderPropertiesValue = {};
	DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value";
	DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass.links = {};
	DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "integer"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "integer"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value"});
		} else if (typeof value === "number") {
			if (value%1 !== 0) {
				errors.push({code: 0, params: {type: "number", expected: "integer"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "integer"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/MultipleBirthOrder/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsMultipleBirthOrderPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail */
	var DemographicsDefinitionsRaceDetailClass = classes.DemographicsDefinitionsRaceDetail = function DemographicsDefinitionsRaceDetailClass(value) {
		if (!(this instanceof DemographicsDefinitionsRaceDetailClass)) return new DemographicsDefinitionsRaceDetailClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.DemographicsDefinitionsRaceDetailPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsRaceDetailClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsRaceDetailClass.prototype.constructor = DemographicsDefinitionsRaceDetailClass;
	DemographicsDefinitionsRaceDetailClass.description = "Additional description of race or heritage.";
	DemographicsDefinitionsRaceDetailClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail";
	DemographicsDefinitionsRaceDetailClass.links = {};
	DemographicsDefinitionsRaceDetailClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsRaceDetailPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail"});
		}
		return errors;
	}
	DemographicsDefinitionsRaceDetailClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsRaceDetailClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsRaceDetailClass, DemographicsDefinitionsRaceDetailClass.Value, {
		get: function() { return DemographicsDefinitionsRaceDetailClass.Value; },
		set: function(newValue) { DemographicsDefinitionsRaceDetailClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail */
	var DemographicsDefinitionsEthnicityDetailClass = classes.DemographicsDefinitionsEthnicityDetail = function DemographicsDefinitionsEthnicityDetailClass(value) {
		if (!(this instanceof DemographicsDefinitionsEthnicityDetailClass)) return new DemographicsDefinitionsEthnicityDetailClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.DemographicsDefinitionsEthnicityDetailPropertiesValue(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsEthnicityDetailClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsEthnicityDetailClass.prototype.constructor = DemographicsDefinitionsEthnicityDetailClass;
	DemographicsDefinitionsEthnicityDetailClass.description = "Additional description of ethnicity.";
	DemographicsDefinitionsEthnicityDetailClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail";
	DemographicsDefinitionsEthnicityDetailClass.links = {};
	DemographicsDefinitionsEthnicityDetailClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsEthnicityDetailPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail"});
		}
		return errors;
	}
	DemographicsDefinitionsEthnicityDetailClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsEthnicityDetailClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsEthnicityDetailClass, DemographicsDefinitionsEthnicityDetailClass.Value, {
		get: function() { return DemographicsDefinitionsEthnicityDetailClass.Value; },
		set: function(newValue) { DemographicsDefinitionsEthnicityDetailClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix */
	var CoreDefinitionsHumanNamePrefixClass = classes.CoreDefinitionsHumanNamePrefix = function CoreDefinitionsHumanNamePrefixClass(value) {
		if (!(this instanceof CoreDefinitionsHumanNamePrefixClass)) return new CoreDefinitionsHumanNamePrefixClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsHumanNamePrefixClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsHumanNamePrefixClass.prototype.constructor = CoreDefinitionsHumanNamePrefixClass;
	CoreDefinitionsHumanNamePrefixClass.description = "Contains a set of honorific terms that typically appear before a person's name, for example Mr., Mrs., Dr., etc. Prefixes have a strong association to the immediately following name part. (Source: HL7 V3).\nConcepts: http://ncimeta.nci.nih.gov:C3476361";
	CoreDefinitionsHumanNamePrefixClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix";
	CoreDefinitionsHumanNamePrefixClass.links = {};
	CoreDefinitionsHumanNamePrefixClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNamePrefixPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix"});
		}
		return errors;
	}
	CoreDefinitionsHumanNamePrefixClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNamePrefixClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsHumanNamePrefixClass, CoreDefinitionsHumanNamePrefixClass.Value, {
		get: function() { return CoreDefinitionsHumanNamePrefixClass.Value; },
		set: function(newValue) { CoreDefinitionsHumanNamePrefixClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName */
	var CoreDefinitionsFamilyNameClass = classes.CoreDefinitionsFamilyName = function CoreDefinitionsFamilyNameClass(value) {
		if (!(this instanceof CoreDefinitionsFamilyNameClass)) return new CoreDefinitionsFamilyNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsFamilyNameClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsFamilyNameClass.prototype.constructor = CoreDefinitionsFamilyNameClass;
	CoreDefinitionsFamilyNameClass.description = "The portion of a person's name that reflects the genealogy of the person. In western cultures, this is the 'last' name. In eastern cultures, the family name appears before the person's given name(s). In some cultures (e.g. Eritrea) the family name of a son is the first name of his father. (Source: HL7 V3).\nConcepts: http://loinc.org:45394-4";
	CoreDefinitionsFamilyNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName";
	CoreDefinitionsFamilyNameClass.links = {};
	CoreDefinitionsFamilyNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsFamilyNamePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName"});
		}
		return errors;
	}
	CoreDefinitionsFamilyNameClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsFamilyNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsFamilyNameClass, CoreDefinitionsFamilyNameClass.Value, {
		get: function() { return CoreDefinitionsFamilyNameClass.Value; },
		set: function(newValue) { CoreDefinitionsFamilyNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse */
	var CoreDefinitionsHumanNameUseClass = classes.CoreDefinitionsHumanNameUse = function CoreDefinitionsHumanNameUseClass(value) {
		if (!(this instanceof CoreDefinitionsHumanNameUseClass)) return new CoreDefinitionsHumanNameUseClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsHumanNameUseClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsHumanNameUseClass.prototype.constructor = CoreDefinitionsHumanNameUseClass;
	CoreDefinitionsHumanNameUseClass.description = "A qualifier specifying how a human name is used by a person, such as a legal name, alias, or nickname.";
	CoreDefinitionsHumanNameUseClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse";
	CoreDefinitionsHumanNameUseClass.links = {};
	CoreDefinitionsHumanNameUseClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNameUsePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse"});
		}
		return errors;
	}
	CoreDefinitionsHumanNameUseClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNameUseClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsHumanNameUseClass, CoreDefinitionsHumanNameUseClass.Value, {
		get: function() { return CoreDefinitionsHumanNameUseClass.Value; },
		set: function(newValue) { CoreDefinitionsHumanNameUseClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod */
	var CoreDefinitionsEffectiveTimePeriodClass = classes.CoreDefinitionsEffectiveTimePeriod = function CoreDefinitionsEffectiveTimePeriodClass(value) {
		if (!(this instanceof CoreDefinitionsEffectiveTimePeriodClass)) return new CoreDefinitionsEffectiveTimePeriodClass(value);
		
		CoreDefinitionsTimePeriodClass.apply(this, arguments);
	};
	CoreDefinitionsEffectiveTimePeriodClass.prototype = Object.create(CoreDefinitionsTimePeriodClass.prototype);
	CoreDefinitionsEffectiveTimePeriodClass.prototype.constructor = CoreDefinitionsEffectiveTimePeriodClass;
	CoreDefinitionsEffectiveTimePeriodClass.description = "The date and time span for which something is active, valid, or in force.\nConcepts: http://ncimeta.nci.nih.gov:C2985763";
	CoreDefinitionsEffectiveTimePeriodClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod";
	CoreDefinitionsEffectiveTimePeriodClass.links = {};
	CoreDefinitionsEffectiveTimePeriodClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriodAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsEffectiveTimePeriodClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsEffectiveTimePeriodClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/Value */
	var CoreDefinitionsHumanNamePropertiesValueClass = classes.CoreDefinitionsHumanNamePropertiesValue = {};
	CoreDefinitionsHumanNamePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/Value";
	CoreDefinitionsHumanNamePropertiesValueClass.links = {};
	CoreDefinitionsHumanNamePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsHumanNamePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNamePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/GivenName */
	var CoreDefinitionsHumanNamePropertiesGivenNameClass = classes.CoreDefinitionsHumanNamePropertiesGivenName = {};
	CoreDefinitionsHumanNamePropertiesGivenNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/GivenName";
	CoreDefinitionsHumanNamePropertiesGivenNameClass.links = {};
	CoreDefinitionsHumanNamePropertiesGivenNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsGivenName.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/GivenName"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/GivenName"});
		}
		return errors;
	}
	CoreDefinitionsHumanNamePropertiesGivenNameClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNamePropertiesGivenNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/HumanNameSuffix */
	var CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass = classes.CoreDefinitionsHumanNamePropertiesHumanNameSuffix = {};
	CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/HumanNameSuffix";
	CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass.links = {};
	CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsHumanNameSuffix.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/HumanNameSuffix"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanName/properties/HumanNameSuffix"});
		}
		return errors;
	}
	CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNamePropertiesHumanNameSuffixClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag/properties/Value */
	var ActorDefinitionsAnonymizedFlagPropertiesValueClass = classes.ActorDefinitionsAnonymizedFlagPropertiesValue = {};
	ActorDefinitionsAnonymizedFlagPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag/properties/Value";
	ActorDefinitionsAnonymizedFlagPropertiesValueClass.links = {};
	ActorDefinitionsAnonymizedFlagPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AnonymizedFlag/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsAnonymizedFlagPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAnonymizedFlagPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag/properties/Value */
	var ActorDefinitionsFictionalPersonFlagPropertiesValueClass = classes.ActorDefinitionsFictionalPersonFlagPropertiesValue = {};
	ActorDefinitionsFictionalPersonFlagPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag/properties/Value";
	ActorDefinitionsFictionalPersonFlagPropertiesValueClass.links = {};
	ActorDefinitionsFictionalPersonFlagPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/FictionalPersonFlag/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsFictionalPersonFlagPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsFictionalPersonFlagPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath */
	var ActorDefinitionsDateOfDeathClass = classes.ActorDefinitionsDateOfDeath = function ActorDefinitionsDateOfDeathClass(value) {
		if (!(this instanceof ActorDefinitionsDateOfDeathClass)) return new ActorDefinitionsDateOfDeathClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedDateTime(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsDateOfDeathClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsDateOfDeathClass.prototype.constructor = ActorDefinitionsDateOfDeathClass;
	ActorDefinitionsDateOfDeathClass.description = "The calendar date of subject's death.\nConcepts: http://ncimeta.nci.nih.gov:C1148348";
	ActorDefinitionsDateOfDeathClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath";
	ActorDefinitionsDateOfDeathClass.links = {};
	ActorDefinitionsDateOfDeathClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedDateTime.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/DateOfDeath"});
		}
		return errors;
	}
	ActorDefinitionsDateOfDeathClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDateOfDeathClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsDateOfDeathClass, ActorDefinitionsDateOfDeathClass.Value, {
		get: function() { return ActorDefinitionsDateOfDeathClass.Value; },
		set: function(newValue) { ActorDefinitionsDateOfDeathClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath */
	var ActorDefinitionsAgeAtDeathClass = classes.ActorDefinitionsAgeAtDeath = function ActorDefinitionsAgeAtDeathClass(value) {
		if (!(this instanceof ActorDefinitionsAgeAtDeathClass)) return new ActorDefinitionsAgeAtDeathClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsGeneralizedAge(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsAgeAtDeathClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsAgeAtDeathClass.prototype.constructor = ActorDefinitionsAgeAtDeathClass;
	ActorDefinitionsAgeAtDeathClass.description = "The age, age range, or age group when the cessation of life happens.\nConcepts: http://ncimeta.nci.nih.gov:C1546180";
	ActorDefinitionsAgeAtDeathClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath";
	ActorDefinitionsAgeAtDeathClass.links = {};
	ActorDefinitionsAgeAtDeathClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGeneralizedAge.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/AgeAtDeath"});
		}
		return errors;
	}
	ActorDefinitionsAgeAtDeathClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAgeAtDeathClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsAgeAtDeathClass, ActorDefinitionsAgeAtDeathClass.Value, {
		get: function() { return ActorDefinitionsAgeAtDeathClass.Value; },
		set: function(newValue) { ActorDefinitionsAgeAtDeathClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased/properties/Value */
	var ActorDefinitionsDeceasedPropertiesValueClass = classes.ActorDefinitionsDeceasedPropertiesValue = {};
	ActorDefinitionsDeceasedPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased/properties/Value";
	ActorDefinitionsDeceasedPropertiesValueClass.links = {};
	ActorDefinitionsDeceasedPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Deceased/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsDeceasedPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsDeceasedPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed */
	var DemographicsDefinitionsAddressUsedClass = classes.DemographicsDefinitionsAddressUsed = function DemographicsDefinitionsAddressUsedClass(value) {
		if (!(this instanceof DemographicsDefinitionsAddressUsedClass)) return new DemographicsDefinitionsAddressUsedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsAddress(this.Value);
		}
		if (typeof value.AddressUse !== "undefined") {
			this.AddressUse = value.AddressUse;
		}
		if (typeof value.Setting !== "undefined") {
			this.Setting = value.Setting;
		}
		if (typeof value.EffectiveTimePeriod !== "undefined") {
			this.EffectiveTimePeriod = value.EffectiveTimePeriod;
		}
		if (this.EffectiveTimePeriod && !Array.isArray(this.EffectiveTimePeriod) && typeof this.EffectiveTimePeriod === "object") {
			this.EffectiveTimePeriod = new classes.CoreDefinitionsEffectiveTimePeriod(this.EffectiveTimePeriod);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsAddressUsedClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsAddressUsedClass.prototype.constructor = DemographicsDefinitionsAddressUsedClass;
	DemographicsDefinitionsAddressUsedClass.description = "An address used by for dwelling, work, or other purposes. May be a physical location or an address used only for deliveries, such as a PO box.\nConcepts: http://ncimeta.nci.nih.gov:C0682130";
	DemographicsDefinitionsAddressUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed";
	DemographicsDefinitionsAddressUsedClass.links = {};
	DemographicsDefinitionsAddressUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsAddress.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed"});
			}
			if ("AddressUse" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUsedPropertiesAddressUse.validationErrors(value.AddressUse, dataPath + "/AddressUse", missing));
			} else {
				errors.push({code: 302, params: {key: "AddressUse"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed"});
			}
			if ("Setting" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUsedPropertiesSetting.validationErrors(value.Setting, dataPath + "/Setting", missing));
			}
			if ("EffectiveTimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriod.validationErrors(value.EffectiveTimePeriod, dataPath + "/EffectiveTimePeriod", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed"});
		}
		return errors;
	}
	DemographicsDefinitionsAddressUsedClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsAddressUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsAddressUsedClass, DemographicsDefinitionsAddressUsedClass.Value, {
		get: function() { return DemographicsDefinitionsAddressUsedClass.Value; },
		set: function(newValue) { DemographicsDefinitionsAddressUsedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsAddressUsedClass, DemographicsDefinitionsAddressUsedClass.AddressUse, {
		get: function() { return DemographicsDefinitionsAddressUsedClass.AddressUse; },
		set: function(newValue) { DemographicsDefinitionsAddressUsedClass.AddressUse = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsAddressUsedClass, DemographicsDefinitionsAddressUsedClass.Setting, {
		get: function() { return DemographicsDefinitionsAddressUsedClass.Setting; },
		set: function(newValue) { DemographicsDefinitionsAddressUsedClass.Setting = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsAddressUsedClass, DemographicsDefinitionsAddressUsedClass.EffectiveTimePeriod, {
		get: function() { return DemographicsDefinitionsAddressUsedClass.EffectiveTimePeriod; },
		set: function(newValue) { DemographicsDefinitionsAddressUsedClass.EffectiveTimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom */
	var DemographicsDefinitionsTelecomClass = classes.DemographicsDefinitionsTelecom = function DemographicsDefinitionsTelecomClass(value) {
		if (!(this instanceof DemographicsDefinitionsTelecomClass)) return new DemographicsDefinitionsTelecomClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.DemographicsDefinitionsTelecomNumberOrAddress(this.Value);
		}
		if (typeof value.TelecomType !== "undefined") {
			this.TelecomType = value.TelecomType;
		}
		if (this.TelecomType && !Array.isArray(this.TelecomType)) {
			this.TelecomType = new classes.DemographicsDefinitionsTelecomType(this.TelecomType);
		}
		if (typeof value.TelecomTypeOther !== "undefined") {
			this.TelecomTypeOther = value.TelecomTypeOther;
		}
		if (this.TelecomTypeOther && !Array.isArray(this.TelecomTypeOther) && this.TelecomTypeOther) {
			this.TelecomTypeOther = new classes.DemographicsDefinitionsTelecomTypeOther(this.TelecomTypeOther);
		}
		if (typeof value.TelecomQualifier !== "undefined") {
			this.TelecomQualifier = value.TelecomQualifier;
		}
		if (this.TelecomQualifier && !Array.isArray(this.TelecomQualifier) && this.TelecomQualifier) {
			this.TelecomQualifier = new classes.DemographicsDefinitionsTelecomQualifier(this.TelecomQualifier);
		}
		if (typeof value.EffectiveTimePeriod !== "undefined") {
			this.EffectiveTimePeriod = value.EffectiveTimePeriod;
		}
		if (this.EffectiveTimePeriod && !Array.isArray(this.EffectiveTimePeriod) && typeof this.EffectiveTimePeriod === "object") {
			this.EffectiveTimePeriod = new classes.CoreDefinitionsEffectiveTimePeriod(this.EffectiveTimePeriod);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsTelecomClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsTelecomClass.prototype.constructor = DemographicsDefinitionsTelecomClass;
	DemographicsDefinitionsTelecomClass.description = "An electronic means of contacting an organization or individual.\nConcepts: http://ncimeta.nci.nih.gov:C2986441";
	DemographicsDefinitionsTelecomClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom";
	DemographicsDefinitionsTelecomClass.links = {};
	DemographicsDefinitionsTelecomClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomNumberOrAddress.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom"});
			}
			if ("TelecomType" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomType.validationErrors(value.TelecomType, dataPath + "/TelecomType", missing));
			} else {
				errors.push({code: 302, params: {key: "TelecomType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom"});
			}
			if ("TelecomTypeOther" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomTypeOther.validationErrors(value.TelecomTypeOther, dataPath + "/TelecomTypeOther", missing));
			}
			if ("TelecomQualifier" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomQualifier.validationErrors(value.TelecomQualifier, dataPath + "/TelecomQualifier", missing));
			}
			if ("EffectiveTimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriod.validationErrors(value.EffectiveTimePeriod, dataPath + "/EffectiveTimePeriod", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/Telecom"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsTelecomClass, DemographicsDefinitionsTelecomClass.Value, {
		get: function() { return DemographicsDefinitionsTelecomClass.Value; },
		set: function(newValue) { DemographicsDefinitionsTelecomClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsTelecomClass, DemographicsDefinitionsTelecomClass.TelecomType, {
		get: function() { return DemographicsDefinitionsTelecomClass.TelecomType; },
		set: function(newValue) { DemographicsDefinitionsTelecomClass.TelecomType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsTelecomClass, DemographicsDefinitionsTelecomClass.TelecomTypeOther, {
		get: function() { return DemographicsDefinitionsTelecomClass.TelecomTypeOther; },
		set: function(newValue) { DemographicsDefinitionsTelecomClass.TelecomTypeOther = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsTelecomClass, DemographicsDefinitionsTelecomClass.TelecomQualifier, {
		get: function() { return DemographicsDefinitionsTelecomClass.TelecomQualifier; },
		set: function(newValue) { DemographicsDefinitionsTelecomClass.TelecomQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsTelecomClass, DemographicsDefinitionsTelecomClass.EffectiveTimePeriod, {
		get: function() { return DemographicsDefinitionsTelecomClass.EffectiveTimePeriod; },
		set: function(newValue) { DemographicsDefinitionsTelecomClass.EffectiveTimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed */
	var ActorDefinitionsLanguageUsedClass = classes.ActorDefinitionsLanguageUsed = function ActorDefinitionsLanguageUsedClass(value) {
		if (!(this instanceof ActorDefinitionsLanguageUsedClass)) return new ActorDefinitionsLanguageUsedClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.BaseDefinitionsLanguage(this.Value);
		}
		if (typeof value.SpokenLanguageProficiency !== "undefined") {
			this.SpokenLanguageProficiency = value.SpokenLanguageProficiency;
		}
		if (this.SpokenLanguageProficiency && !Array.isArray(this.SpokenLanguageProficiency) && this.SpokenLanguageProficiency) {
			this.SpokenLanguageProficiency = new classes.ActorDefinitionsSpokenLanguageProficiency(this.SpokenLanguageProficiency);
		}
		if (typeof value.WrittenLanguageProficiency !== "undefined") {
			this.WrittenLanguageProficiency = value.WrittenLanguageProficiency;
		}
		if (this.WrittenLanguageProficiency && !Array.isArray(this.WrittenLanguageProficiency) && this.WrittenLanguageProficiency) {
			this.WrittenLanguageProficiency = new classes.ActorDefinitionsWrittenLanguageProficiency(this.WrittenLanguageProficiency);
		}
		if (typeof value.LanguageQualifier !== "undefined") {
			this.LanguageQualifier = value.LanguageQualifier;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsLanguageUsedClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsLanguageUsedClass.prototype.constructor = ActorDefinitionsLanguageUsedClass;
	ActorDefinitionsLanguageUsedClass.description = "Language used for communication by a human, either the subject of record, parent, or other involved person.";
	ActorDefinitionsLanguageUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed";
	ActorDefinitionsLanguageUsedClass.links = {};
	ActorDefinitionsLanguageUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.BaseDefinitionsLanguage.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed"});
			}
			if ("SpokenLanguageProficiency" in value) {
				errors = errors.concat(classes.ActorDefinitionsSpokenLanguageProficiency.validationErrors(value.SpokenLanguageProficiency, dataPath + "/SpokenLanguageProficiency", missing));
			}
			if ("WrittenLanguageProficiency" in value) {
				errors = errors.concat(classes.ActorDefinitionsWrittenLanguageProficiency.validationErrors(value.WrittenLanguageProficiency, dataPath + "/WrittenLanguageProficiency", missing));
			}
			if ("LanguageQualifier" in value) {
				errors = errors.concat(classes.ActorDefinitionsLanguageUsedPropertiesLanguageQualifier.validationErrors(value.LanguageQualifier, dataPath + "/LanguageQualifier", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed"});
		}
		return errors;
	}
	ActorDefinitionsLanguageUsedClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsLanguageUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsLanguageUsedClass, ActorDefinitionsLanguageUsedClass.Value, {
		get: function() { return ActorDefinitionsLanguageUsedClass.Value; },
		set: function(newValue) { ActorDefinitionsLanguageUsedClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsLanguageUsedClass, ActorDefinitionsLanguageUsedClass.SpokenLanguageProficiency, {
		get: function() { return ActorDefinitionsLanguageUsedClass.SpokenLanguageProficiency; },
		set: function(newValue) { ActorDefinitionsLanguageUsedClass.SpokenLanguageProficiency = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsLanguageUsedClass, ActorDefinitionsLanguageUsedClass.WrittenLanguageProficiency, {
		get: function() { return ActorDefinitionsLanguageUsedClass.WrittenLanguageProficiency; },
		set: function(newValue) { ActorDefinitionsLanguageUsedClass.WrittenLanguageProficiency = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsLanguageUsedClass, ActorDefinitionsLanguageUsedClass.LanguageQualifier, {
		get: function() { return ActorDefinitionsLanguageUsedClass.LanguageQualifier; },
		set: function(newValue) { ActorDefinitionsLanguageUsedClass.LanguageQualifier = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber */
	var DemographicsDefinitionsDriversLicenseNumberClass = classes.DemographicsDefinitionsDriversLicenseNumber = function DemographicsDefinitionsDriversLicenseNumberClass(value) {
		if (!(this instanceof DemographicsDefinitionsDriversLicenseNumberClass)) return new DemographicsDefinitionsDriversLicenseNumberClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.StateOfIssue !== "undefined") {
			this.StateOfIssue = value.StateOfIssue;
		}
		if (this.StateOfIssue && !Array.isArray(this.StateOfIssue)) {
			this.StateOfIssue = new classes.DemographicsDefinitionsStateOfIssue(this.StateOfIssue);
		}
		if (typeof value.EffectiveTimePeriod !== "undefined") {
			this.EffectiveTimePeriod = value.EffectiveTimePeriod;
		}
		if (this.EffectiveTimePeriod && !Array.isArray(this.EffectiveTimePeriod) && typeof this.EffectiveTimePeriod === "object") {
			this.EffectiveTimePeriod = new classes.CoreDefinitionsEffectiveTimePeriod(this.EffectiveTimePeriod);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsDriversLicenseNumberClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsDriversLicenseNumberClass.prototype.constructor = DemographicsDefinitionsDriversLicenseNumberClass;
	DemographicsDefinitionsDriversLicenseNumberClass.description = "Identifying information from a drivers license.";
	DemographicsDefinitionsDriversLicenseNumberClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber";
	DemographicsDefinitionsDriversLicenseNumberClass.links = {};
	DemographicsDefinitionsDriversLicenseNumberClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsDriversLicenseNumberPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber"});
			}
			if ("StateOfIssue" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsStateOfIssue.validationErrors(value.StateOfIssue, dataPath + "/StateOfIssue", missing));
			} else {
				errors.push({code: 302, params: {key: "StateOfIssue"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber"});
			}
			if ("EffectiveTimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriod.validationErrors(value.EffectiveTimePeriod, dataPath + "/EffectiveTimePeriod", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber"});
		}
		return errors;
	}
	DemographicsDefinitionsDriversLicenseNumberClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsDriversLicenseNumberClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsDriversLicenseNumberClass, DemographicsDefinitionsDriversLicenseNumberClass.Value, {
		get: function() { return DemographicsDefinitionsDriversLicenseNumberClass.Value; },
		set: function(newValue) { DemographicsDefinitionsDriversLicenseNumberClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsDriversLicenseNumberClass, DemographicsDefinitionsDriversLicenseNumberClass.StateOfIssue, {
		get: function() { return DemographicsDefinitionsDriversLicenseNumberClass.StateOfIssue; },
		set: function(newValue) { DemographicsDefinitionsDriversLicenseNumberClass.StateOfIssue = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsDriversLicenseNumberClass, DemographicsDefinitionsDriversLicenseNumberClass.EffectiveTimePeriod, {
		get: function() { return DemographicsDefinitionsDriversLicenseNumberClass.EffectiveTimePeriod; },
		set: function(newValue) { DemographicsDefinitionsDriversLicenseNumberClass.EffectiveTimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber */
	var DemographicsDefinitionsPassportNumberClass = classes.DemographicsDefinitionsPassportNumber = function DemographicsDefinitionsPassportNumberClass(value) {
		if (!(this instanceof DemographicsDefinitionsPassportNumberClass)) return new DemographicsDefinitionsPassportNumberClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.CountryOfIssue !== "undefined") {
			this.CountryOfIssue = value.CountryOfIssue;
		}
		if (this.CountryOfIssue && !Array.isArray(this.CountryOfIssue)) {
			this.CountryOfIssue = new classes.DemographicsDefinitionsCountryOfIssue(this.CountryOfIssue);
		}
		if (typeof value.EffectiveTimePeriod !== "undefined") {
			this.EffectiveTimePeriod = value.EffectiveTimePeriod;
		}
		if (this.EffectiveTimePeriod && !Array.isArray(this.EffectiveTimePeriod) && typeof this.EffectiveTimePeriod === "object") {
			this.EffectiveTimePeriod = new classes.CoreDefinitionsEffectiveTimePeriod(this.EffectiveTimePeriod);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsPassportNumberClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsPassportNumberClass.prototype.constructor = DemographicsDefinitionsPassportNumberClass;
	DemographicsDefinitionsPassportNumberClass.description = "Indicator of citizenship and identity.\nConcepts: http://ncimeta.nci.nih.gov:C1549737";
	DemographicsDefinitionsPassportNumberClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber";
	DemographicsDefinitionsPassportNumberClass.links = {};
	DemographicsDefinitionsPassportNumberClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsPassportNumberPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber"});
			}
			if ("CountryOfIssue" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsCountryOfIssue.validationErrors(value.CountryOfIssue, dataPath + "/CountryOfIssue", missing));
			} else {
				errors.push({code: 302, params: {key: "CountryOfIssue"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber"});
			}
			if ("EffectiveTimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsEffectiveTimePeriod.validationErrors(value.EffectiveTimePeriod, dataPath + "/EffectiveTimePeriod", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber"});
		}
		return errors;
	}
	DemographicsDefinitionsPassportNumberClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPassportNumberClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsPassportNumberClass, DemographicsDefinitionsPassportNumberClass.Value, {
		get: function() { return DemographicsDefinitionsPassportNumberClass.Value; },
		set: function(newValue) { DemographicsDefinitionsPassportNumberClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPassportNumberClass, DemographicsDefinitionsPassportNumberClass.CountryOfIssue, {
		get: function() { return DemographicsDefinitionsPassportNumberClass.CountryOfIssue; },
		set: function(newValue) { DemographicsDefinitionsPassportNumberClass.CountryOfIssue = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsPassportNumberClass, DemographicsDefinitionsPassportNumberClass.EffectiveTimePeriod, {
		get: function() { return DemographicsDefinitionsPassportNumberClass.EffectiveTimePeriod; },
		set: function(newValue) { DemographicsDefinitionsPassportNumberClass.EffectiveTimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship */
	var DemographicsDefinitionsFamilialRelationshipClass = classes.DemographicsDefinitionsFamilialRelationship = function DemographicsDefinitionsFamilialRelationshipClass(value) {
		if (!(this instanceof DemographicsDefinitionsFamilialRelationshipClass)) return new DemographicsDefinitionsFamilialRelationshipClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		if (typeof value.NonOccurrenceModifier !== "undefined") {
			this.NonOccurrenceModifier = value.NonOccurrenceModifier;
		}
		if (this.NonOccurrenceModifier && !Array.isArray(this.NonOccurrenceModifier) && this.NonOccurrenceModifier) {
			this.NonOccurrenceModifier = new classes.BaseDefinitionsNonOccurrenceModifier(this.NonOccurrenceModifier);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsFamilialRelationshipClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsFamilialRelationshipClass.prototype.constructor = DemographicsDefinitionsFamilialRelationshipClass;
	DemographicsDefinitionsFamilialRelationshipClass.description = "The relationship of the subject to another person in the same (extended) family. May or may not be a blood relative (determined by value). Can be used to indicate there is no relation of the given type (e.g., no siblings), using the NonOccurrenceModifier.\nConcepts: http://ncimeta.nci.nih.gov:C0015608";
	DemographicsDefinitionsFamilialRelationshipClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship";
	DemographicsDefinitionsFamilialRelationshipClass.links = {};
	DemographicsDefinitionsFamilialRelationshipClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship"});
			}
			if ("NonOccurrenceModifier" in value) {
				errors = errors.concat(classes.BaseDefinitionsNonOccurrenceModifier.validationErrors(value.NonOccurrenceModifier, dataPath + "/NonOccurrenceModifier", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/FamilialRelationship"});
		}
		return errors;
	}
	DemographicsDefinitionsFamilialRelationshipClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsFamilialRelationshipClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsFamilialRelationshipClass, DemographicsDefinitionsFamilialRelationshipClass.Value, {
		get: function() { return DemographicsDefinitionsFamilialRelationshipClass.Value; },
		set: function(newValue) { DemographicsDefinitionsFamilialRelationshipClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(DemographicsDefinitionsFamilialRelationshipClass, DemographicsDefinitionsFamilialRelationshipClass.NonOccurrenceModifier, {
		get: function() { return DemographicsDefinitionsFamilialRelationshipClass.NonOccurrenceModifier; },
		set: function(newValue) { DemographicsDefinitionsFamilialRelationshipClass.NonOccurrenceModifier = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization */
	var ActorDefinitionsOrganizationClass = classes.ActorDefinitionsOrganization = function ActorDefinitionsOrganizationClass(value) {
		if (!(this instanceof ActorDefinitionsOrganizationClass)) return new ActorDefinitionsOrganizationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.ActorDefinitionsOrganizationName(this.Value);
		}
		if (typeof value.OrganizationAlias !== "undefined") {
			this.OrganizationAlias = value.OrganizationAlias;
		}
		if (typeof value.SpecificType !== "undefined") {
			this.SpecificType = value.SpecificType;
		}
		if (this.SpecificType && !Array.isArray(this.SpecificType)) {
			this.SpecificType = new classes.CoreDefinitionsSpecificType(this.SpecificType);
		}
		if (typeof value.OrganizationIdentifyingCode !== "undefined") {
			this.OrganizationIdentifyingCode = value.OrganizationIdentifyingCode;
		}
		if (typeof value.AddressUsed !== "undefined") {
			this.AddressUsed = value.AddressUsed;
		}
		if (typeof value.Telecom !== "undefined") {
			this.Telecom = value.Telecom;
		}
		if (typeof value.ActiveFlag !== "undefined") {
			this.ActiveFlag = value.ActiveFlag;
		}
		if (this.ActiveFlag && !Array.isArray(this.ActiveFlag) && this.ActiveFlag) {
			this.ActiveFlag = new classes.ActorDefinitionsActiveFlag(this.ActiveFlag);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsOrganizationClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsOrganizationClass.prototype.constructor = ActorDefinitionsOrganizationClass;
	ActorDefinitionsOrganizationClass.description = "A social or legal structure formed by human beings.\nConcepts: http://ncimeta.nci.nih.gov:C1561598";
	ActorDefinitionsOrganizationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization";
	ActorDefinitionsOrganizationClass.links = {};
	ActorDefinitionsOrganizationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationName.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization"});
			}
			if ("OrganizationAlias" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationPropertiesOrganizationAlias.validationErrors(value.OrganizationAlias, dataPath + "/OrganizationAlias", missing));
			}
			if ("SpecificType" in value) {
				errors = errors.concat(classes.CoreDefinitionsSpecificType.validationErrors(value.SpecificType, dataPath + "/SpecificType", missing));
			} else {
				errors.push({code: 302, params: {key: "SpecificType"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization"});
			}
			if ("OrganizationIdentifyingCode" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCode.validationErrors(value.OrganizationIdentifyingCode, dataPath + "/OrganizationIdentifyingCode", missing));
			}
			if ("AddressUsed" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationPropertiesAddressUsed.validationErrors(value.AddressUsed, dataPath + "/AddressUsed", missing));
			}
			if ("Telecom" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationPropertiesTelecom.validationErrors(value.Telecom, dataPath + "/Telecom", missing));
			}
			if ("ActiveFlag" in value) {
				errors = errors.concat(classes.ActorDefinitionsActiveFlag.validationErrors(value.ActiveFlag, dataPath + "/ActiveFlag", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.Value, {
		get: function() { return ActorDefinitionsOrganizationClass.Value; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.OrganizationAlias, {
		get: function() { return ActorDefinitionsOrganizationClass.OrganizationAlias; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.OrganizationAlias = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.SpecificType, {
		get: function() { return ActorDefinitionsOrganizationClass.SpecificType; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.SpecificType = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.OrganizationIdentifyingCode, {
		get: function() { return ActorDefinitionsOrganizationClass.OrganizationIdentifyingCode; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.OrganizationIdentifyingCode = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.AddressUsed, {
		get: function() { return ActorDefinitionsOrganizationClass.AddressUsed; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.AddressUsed = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.Telecom, {
		get: function() { return ActorDefinitionsOrganizationClass.Telecom; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.Telecom = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(ActorDefinitionsOrganizationClass, ActorDefinitionsOrganizationClass.ActiveFlag, {
		get: function() { return ActorDefinitionsOrganizationClass.ActiveFlag; },
		set: function(newValue) { ActorDefinitionsOrganizationClass.ActiveFlag = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1 */
	var CoreDefinitionsOrganizationalIdentifierAllOf1Class = classes.CoreDefinitionsOrganizationalIdentifierAllOf1 = function CoreDefinitionsOrganizationalIdentifierAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsOrganizationalIdentifierAllOf1Class)) return new CoreDefinitionsOrganizationalIdentifierAllOf1Class(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (typeof value.TimePeriod !== "undefined") {
			this.TimePeriod = value.TimePeriod;
		}
		if (this.TimePeriod && !Array.isArray(this.TimePeriod) && this.TimePeriod) {
			this.TimePeriod = new classes.CoreDefinitionsTimePeriod(this.TimePeriod);
		}
		if (typeof value.Organization !== "undefined") {
			this.Organization = value.Organization;
		}
		if (this.Organization && !Array.isArray(this.Organization) && this.Organization) {
			this.Organization = new classes.ActorDefinitionsOrganization(this.Organization);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.prototype.constructor = CoreDefinitionsOrganizationalIdentifierAllOf1Class;
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1";
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.links = {};
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1"});
			}
			if ("TimePeriod" in value) {
				errors = errors.concat(classes.CoreDefinitionsTimePeriod.validationErrors(value.TimePeriod, dataPath + "/TimePeriod", missing));
			}
			if ("Organization" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganization.validationErrors(value.Organization, dataPath + "/Organization", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsOrganizationalIdentifierAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOrganizationalIdentifierAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierAllOf1Class, CoreDefinitionsOrganizationalIdentifierAllOf1Class.Value, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierAllOf1Class.Value; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierAllOf1Class.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierAllOf1Class, CoreDefinitionsOrganizationalIdentifierAllOf1Class.TimePeriod, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierAllOf1Class.TimePeriod; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierAllOf1Class.TimePeriod = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsOrganizationalIdentifierAllOf1Class, CoreDefinitionsOrganizationalIdentifierAllOf1Class.Organization, {
		get: function() { return CoreDefinitionsOrganizationalIdentifierAllOf1Class.Organization; },
		set: function(newValue) { CoreDefinitionsOrganizationalIdentifierAllOf1Class.Organization = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation */
	var ActorDefinitionsAffiliationClass = classes.ActorDefinitionsAffiliation = function ActorDefinitionsAffiliationClass(value) {
		if (!(this instanceof ActorDefinitionsAffiliationClass)) return new ActorDefinitionsAffiliationClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.ActorDefinitionsOrganization(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsAffiliationClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsAffiliationClass.prototype.constructor = ActorDefinitionsAffiliationClass;
	ActorDefinitionsAffiliationClass.description = "Membership, association, or connection to an organization.\nConcepts: http://ncimeta.nci.nih.gov:C0932026";
	ActorDefinitionsAffiliationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation";
	ActorDefinitionsAffiliationClass.links = {};
	ActorDefinitionsAffiliationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganization.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Affiliation"});
		}
		return errors;
	}
	ActorDefinitionsAffiliationClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsAffiliationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsAffiliationClass, ActorDefinitionsAffiliationClass.Value, {
		get: function() { return ActorDefinitionsAffiliationClass.Value; },
		set: function(newValue) { ActorDefinitionsAffiliationClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty */
	var ActorDefinitionsMedicalSpecialtyClass = classes.ActorDefinitionsMedicalSpecialty = function ActorDefinitionsMedicalSpecialtyClass(value) {
		if (!(this instanceof ActorDefinitionsMedicalSpecialtyClass)) return new ActorDefinitionsMedicalSpecialtyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsMedicalSpecialtyClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsMedicalSpecialtyClass.prototype.constructor = ActorDefinitionsMedicalSpecialtyClass;
	ActorDefinitionsMedicalSpecialtyClass.description = "A branch of medicine practiced by the provider.\nConcepts: http://ncimeta.nci.nih.gov:C0037778";
	ActorDefinitionsMedicalSpecialtyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty";
	ActorDefinitionsMedicalSpecialtyClass.links = {};
	ActorDefinitionsMedicalSpecialtyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/MedicalSpecialty"});
		}
		return errors;
	}
	ActorDefinitionsMedicalSpecialtyClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsMedicalSpecialtyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsMedicalSpecialtyClass, ActorDefinitionsMedicalSpecialtyClass.Value, {
		get: function() { return ActorDefinitionsMedicalSpecialtyClass.Value; },
		set: function(newValue) { ActorDefinitionsMedicalSpecialtyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value/anyOf/0 */
	var CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class = classes.CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0 = {};
	CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value/anyOf/0";
	CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class.links = {};
	CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GeneralizedDateTime/properties/Value/anyOf/0"});
		}
		return errors;
	}
	CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGeneralizedDateTimePropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime */
	var CoreDefinitionsQualitativeDateTimeClass = classes.CoreDefinitionsQualitativeDateTime = function CoreDefinitionsQualitativeDateTimeClass(value) {
		if (!(this instanceof CoreDefinitionsQualitativeDateTimeClass)) return new CoreDefinitionsQualitativeDateTimeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsQualitativeDateTimeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsQualitativeDateTimeClass.prototype.constructor = CoreDefinitionsQualitativeDateTimeClass;
	CoreDefinitionsQualitativeDateTimeClass.description = "A point in time, described qualitatively.";
	CoreDefinitionsQualitativeDateTimeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime";
	CoreDefinitionsQualitativeDateTimeClass.links = {};
	CoreDefinitionsQualitativeDateTimeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/QualitativeDateTime"});
		}
		return errors;
	}
	CoreDefinitionsQualitativeDateTimeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsQualitativeDateTimeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsQualitativeDateTimeClass, CoreDefinitionsQualitativeDateTimeClass.Value, {
		get: function() { return CoreDefinitionsQualitativeDateTimeClass.Value; },
		set: function(newValue) { CoreDefinitionsQualitativeDateTimeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age */
	var CoreDefinitionsAgeClass = classes.CoreDefinitionsAge = function CoreDefinitionsAgeClass(value) {
		if (!(this instanceof CoreDefinitionsAgeClass)) return new CoreDefinitionsAgeClass(value);
		
		CoreDefinitionsDurationClass.apply(this, arguments);
	};
	CoreDefinitionsAgeClass.prototype = Object.create(CoreDefinitionsDurationClass.prototype);
	CoreDefinitionsAgeClass.prototype.constructor = CoreDefinitionsAgeClass;
	CoreDefinitionsAgeClass.description = "How long something has existed (quantitative).\nConcepts: http://ncimeta.nci.nih.gov:C0001779";
	CoreDefinitionsAgeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age";
	CoreDefinitionsAgeClass.links = {};
	CoreDefinitionsAgeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsDuration.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsAgeAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsAgeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAgeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeRange */
	var CoreDefinitionsAgeRangeClass = classes.CoreDefinitionsAgeRange = function CoreDefinitionsAgeRangeClass(value) {
		if (!(this instanceof CoreDefinitionsAgeRangeClass)) return new CoreDefinitionsAgeRangeClass(value);
		if (typeof value.UpperAgeBound !== "undefined") {
			this.UpperAgeBound = value.UpperAgeBound;
		}
		if (this.UpperAgeBound && !Array.isArray(this.UpperAgeBound) && this.UpperAgeBound) {
			this.UpperAgeBound = new classes.CoreDefinitionsUpperAgeBound(this.UpperAgeBound);
		}
		if (typeof value.LowerAgeBound !== "undefined") {
			this.LowerAgeBound = value.LowerAgeBound;
		}
		if (this.LowerAgeBound && !Array.isArray(this.LowerAgeBound) && this.LowerAgeBound) {
			this.LowerAgeBound = new classes.CoreDefinitionsLowerAgeBound(this.LowerAgeBound);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAgeRangeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAgeRangeClass.prototype.constructor = CoreDefinitionsAgeRangeClass;
	CoreDefinitionsAgeRangeClass.description = "A quantitative range of ages. One of the two ages must be specified.";
	CoreDefinitionsAgeRangeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeRange";
	CoreDefinitionsAgeRangeClass.links = {};
	CoreDefinitionsAgeRangeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeRange"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeRange"});
		} else if (typeof value === "object") {
			if ("UpperAgeBound" in value) {
				errors = errors.concat(classes.CoreDefinitionsUpperAgeBound.validationErrors(value.UpperAgeBound, dataPath + "/UpperAgeBound", missing));
			}
			if ("LowerAgeBound" in value) {
				errors = errors.concat(classes.CoreDefinitionsLowerAgeBound.validationErrors(value.LowerAgeBound, dataPath + "/LowerAgeBound", missing));
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeRange"});
		}
		return errors;
	}
	CoreDefinitionsAgeRangeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAgeRangeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsAgeRangeClass, CoreDefinitionsAgeRangeClass.UpperAgeBound, {
		get: function() { return CoreDefinitionsAgeRangeClass.UpperAgeBound; },
		set: function(newValue) { CoreDefinitionsAgeRangeClass.UpperAgeBound = newValue; },
		enumerable: true,
		configurable: true
	});
	Object.defineProperty(CoreDefinitionsAgeRangeClass, CoreDefinitionsAgeRangeClass.LowerAgeBound, {
		get: function() { return CoreDefinitionsAgeRangeClass.LowerAgeBound; },
		set: function(newValue) { CoreDefinitionsAgeRangeClass.LowerAgeBound = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup */
	var CoreDefinitionsAgeGroupClass = classes.CoreDefinitionsAgeGroup = function CoreDefinitionsAgeGroupClass(value) {
		if (!(this instanceof CoreDefinitionsAgeGroupClass)) return new CoreDefinitionsAgeGroupClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAgeGroupClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAgeGroupClass.prototype.constructor = CoreDefinitionsAgeGroupClass;
	CoreDefinitionsAgeGroupClass.description = "Subgroups of populations based on age.\nConcepts: http://ncimeta.nci.nih.gov:C0027362";
	CoreDefinitionsAgeGroupClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup";
	CoreDefinitionsAgeGroupClass.links = {};
	CoreDefinitionsAgeGroupClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AgeGroup"});
		}
		return errors;
	}
	CoreDefinitionsAgeGroupClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAgeGroupClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsAgeGroupClass, CoreDefinitionsAgeGroupClass.Value, {
		get: function() { return CoreDefinitionsAgeGroupClass.Value; },
		set: function(newValue) { CoreDefinitionsAgeGroupClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge */
	var CoreDefinitionsGestationalAgeClass = classes.CoreDefinitionsGestationalAge = function CoreDefinitionsGestationalAgeClass(value) {
		if (!(this instanceof CoreDefinitionsGestationalAgeClass)) return new CoreDefinitionsGestationalAgeClass(value);
		
		CoreDefinitionsAgeClass.apply(this, arguments);
	};
	CoreDefinitionsGestationalAgeClass.prototype = Object.create(CoreDefinitionsAgeClass.prototype);
	CoreDefinitionsGestationalAgeClass.prototype.constructor = CoreDefinitionsGestationalAgeClass;
	CoreDefinitionsGestationalAgeClass.description = "The age of the embryo or fetus. This may be assessed by medical history, physical examination, early immunologic pregnancy tests, radiography, ultrasonography, and amniotic fluid analysis.\nConcepts: http://ncimeta.nci.nih.gov:C0017504";
	CoreDefinitionsGestationalAgeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge";
	CoreDefinitionsGestationalAgeClass.links = {};
	CoreDefinitionsGestationalAgeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsAge.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsGestationalAgeAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsGestationalAgeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGestationalAgeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod */
	var CoreDefinitionsGestationalTimePeriodClass = classes.CoreDefinitionsGestationalTimePeriod = function CoreDefinitionsGestationalTimePeriodClass(value) {
		if (!(this instanceof CoreDefinitionsGestationalTimePeriodClass)) return new CoreDefinitionsGestationalTimePeriodClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGestationalTimePeriodClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGestationalTimePeriodClass.prototype.constructor = CoreDefinitionsGestationalTimePeriodClass;
	CoreDefinitionsGestationalTimePeriodClass.description = "A time relative to a pregnancy or childbirth event.";
	CoreDefinitionsGestationalTimePeriodClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod";
	CoreDefinitionsGestationalTimePeriodClass.links = {};
	CoreDefinitionsGestationalTimePeriodClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalTimePeriod"});
		}
		return errors;
	}
	CoreDefinitionsGestationalTimePeriodClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGestationalTimePeriodClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGestationalTimePeriodClass, CoreDefinitionsGestationalTimePeriodClass.Value, {
		get: function() { return CoreDefinitionsGestationalTimePeriodClass.Value; },
		set: function(newValue) { CoreDefinitionsGestationalTimePeriodClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType/properties/Value */
	var CoreDefinitionsBoundTypePropertiesValueClass = classes.CoreDefinitionsBoundTypePropertiesValue = {};
	CoreDefinitionsBoundTypePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType/properties/Value";
	CoreDefinitionsBoundTypePropertiesValueClass.links = {};
	CoreDefinitionsBoundTypePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/BoundType/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsBoundTypePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsBoundTypePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/0 */
	var CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class = classes.CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0 = {};
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/0";
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class.links = {};
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/0"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodStartPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/1 */
	var CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class = classes.CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1 = {};
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/1";
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class.links = {};
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/1"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodStart/properties/Value/anyOf/1"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodStartPropertiesValueAnyOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/0 */
	var CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class = classes.CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0 = {};
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/0";
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class.links = {};
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/0"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/0"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/0"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodEndPropertiesValueAnyOf0Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/1 */
	var CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class = classes.CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1 = {};
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/1";
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class.links = {};
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/1"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/TimePeriodEnd/properties/Value/anyOf/1"});
		}
		return errors;
	}
	CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsTimePeriodEndPropertiesValueAnyOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City */
	var CoreDefinitionsCityClass = classes.CoreDefinitionsCity = function CoreDefinitionsCityClass(value) {
		if (!(this instanceof CoreDefinitionsCityClass)) return new CoreDefinitionsCityClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCityClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCityClass.prototype.constructor = CoreDefinitionsCityClass;
	CoreDefinitionsCityClass.description = "The name of a city, town, village or other community or delivery center. (Source: HL7 FHIR).\nConcepts: http://ncimeta.nci.nih.gov:C1555315";
	CoreDefinitionsCityClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City";
	CoreDefinitionsCityClass.links = {};
	CoreDefinitionsCityClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCityPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City"});
		}
		return errors;
	}
	CoreDefinitionsCityClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCityClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCityClass, CoreDefinitionsCityClass.Value, {
		get: function() { return CoreDefinitionsCityClass.Value; },
		set: function(newValue) { CoreDefinitionsCityClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County */
	var CoreDefinitionsCountyClass = classes.CoreDefinitionsCounty = function CoreDefinitionsCountyClass(value) {
		if (!(this instanceof CoreDefinitionsCountyClass)) return new CoreDefinitionsCountyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCountyClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCountyClass.prototype.constructor = CoreDefinitionsCountyClass;
	CoreDefinitionsCountyClass.description = "The name of the administrative area at a level below that of a state but above that of a city or town. Outside the US, a district or the equivalent. (Source: HL7 FHIR).\nConcepts: http://ncimeta.nci.nih.gov:C0079170";
	CoreDefinitionsCountyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County";
	CoreDefinitionsCountyClass.links = {};
	CoreDefinitionsCountyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCountyPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County"});
		}
		return errors;
	}
	CoreDefinitionsCountyClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCountyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCountyClass, CoreDefinitionsCountyClass.Value, {
		get: function() { return CoreDefinitionsCountyClass.Value; },
		set: function(newValue) { CoreDefinitionsCountyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State */
	var CoreDefinitionsStateClass = classes.CoreDefinitionsState = function CoreDefinitionsStateClass(value) {
		if (!(this instanceof CoreDefinitionsStateClass)) return new CoreDefinitionsStateClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsStateClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsStateClass.prototype.constructor = CoreDefinitionsStateClass;
	CoreDefinitionsStateClass.description = "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes). (Source: HL7 FHIR).\nConcepts: http://ncimeta.nci.nih.gov:C1552743";
	CoreDefinitionsStateClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State";
	CoreDefinitionsStateClass.links = {};
	CoreDefinitionsStateClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsStatePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State"});
		}
		return errors;
	}
	CoreDefinitionsStateClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsStateClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsStateClass, CoreDefinitionsStateClass.Value, {
		get: function() { return CoreDefinitionsStateClass.Value; },
		set: function(newValue) { CoreDefinitionsStateClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode */
	var CoreDefinitionsPostalCodeClass = classes.CoreDefinitionsPostalCode = function CoreDefinitionsPostalCodeClass(value) {
		if (!(this instanceof CoreDefinitionsPostalCodeClass)) return new CoreDefinitionsPostalCodeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsPostalCodeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsPostalCodeClass.prototype.constructor = CoreDefinitionsPostalCodeClass;
	CoreDefinitionsPostalCodeClass.description = "A postal code designating a region defined by the postal service.\nConcepts: http://ncimeta.nci.nih.gov:C1514254";
	CoreDefinitionsPostalCodeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode";
	CoreDefinitionsPostalCodeClass.links = {};
	CoreDefinitionsPostalCodeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsPostalCodePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode"});
		}
		return errors;
	}
	CoreDefinitionsPostalCodeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsPostalCodeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsPostalCodeClass, CoreDefinitionsPostalCodeClass.Value, {
		get: function() { return CoreDefinitionsPostalCodeClass.Value; },
		set: function(newValue) { CoreDefinitionsPostalCodeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country */
	var CoreDefinitionsCountryClass = classes.CoreDefinitionsCountry = function CoreDefinitionsCountryClass(value) {
		if (!(this instanceof CoreDefinitionsCountryClass)) return new CoreDefinitionsCountryClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsCountryClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsCountryClass.prototype.constructor = CoreDefinitionsCountryClass;
	CoreDefinitionsCountryClass.description = "Country - a nation as commonly understood or generally accepted, expressed in ISO 3166 Alpha-2 (2-letter) codes.\nConcepts: http://ncimeta.nci.nih.gov:C0454664";
	CoreDefinitionsCountryClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country";
	CoreDefinitionsCountryClass.links = {};
	CoreDefinitionsCountryClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCountryPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country"});
		}
		return errors;
	}
	CoreDefinitionsCountryClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCountryClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsCountryClass, CoreDefinitionsCountryClass.Value, {
		get: function() { return CoreDefinitionsCountryClass.Value; },
		set: function(newValue) { CoreDefinitionsCountryClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address/properties/AddressLine */
	var CoreDefinitionsAddressPropertiesAddressLineClass = classes.CoreDefinitionsAddressPropertiesAddressLine = {};
	CoreDefinitionsAddressPropertiesAddressLineClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address/properties/AddressLine";
	CoreDefinitionsAddressPropertiesAddressLineClass.links = {};
	CoreDefinitionsAddressPropertiesAddressLineClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length > 2) {
				errors.push({code: 401, params: {length: value.length, maximum: 2}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address/properties/AddressLine"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsAddressLine.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address/properties/AddressLine"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Address/properties/AddressLine"});
		}
		return errors;
	}
	CoreDefinitionsAddressPropertiesAddressLineClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAddressPropertiesAddressLineClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude */
	var CoreDefinitionsLatitudeClass = classes.CoreDefinitionsLatitude = function CoreDefinitionsLatitudeClass(value) {
		if (!(this instanceof CoreDefinitionsLatitudeClass)) return new CoreDefinitionsLatitudeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLatitudeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLatitudeClass.prototype.constructor = CoreDefinitionsLatitudeClass;
	CoreDefinitionsLatitudeClass.description = "The angular distance north or south between an imaginary line around a heavenly body parallel to its equator and the equator itself. Measured with with WGS84 datum.\nConcepts: http://ncimeta.nci.nih.gov:C1627936";
	CoreDefinitionsLatitudeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude";
	CoreDefinitionsLatitudeClass.links = {};
	CoreDefinitionsLatitudeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsLatitudePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude"});
		}
		return errors;
	}
	CoreDefinitionsLatitudeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLatitudeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLatitudeClass, CoreDefinitionsLatitudeClass.Value, {
		get: function() { return CoreDefinitionsLatitudeClass.Value; },
		set: function(newValue) { CoreDefinitionsLatitudeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude */
	var CoreDefinitionsLongitudeClass = classes.CoreDefinitionsLongitude = function CoreDefinitionsLongitudeClass(value) {
		if (!(this instanceof CoreDefinitionsLongitudeClass)) return new CoreDefinitionsLongitudeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLongitudeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLongitudeClass.prototype.constructor = CoreDefinitionsLongitudeClass;
	CoreDefinitionsLongitudeClass.description = "An imaginary great circle on the surface of a heavenly body passing through the poles at right angles to the equator. Measured with with WGS84 datum.\nConcepts: http://ncimeta.nci.nih.gov:C1657623";
	CoreDefinitionsLongitudeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude";
	CoreDefinitionsLongitudeClass.links = {};
	CoreDefinitionsLongitudeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsLongitudePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude"});
		}
		return errors;
	}
	CoreDefinitionsLongitudeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLongitudeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLongitudeClass, CoreDefinitionsLongitudeClass.Value, {
		get: function() { return CoreDefinitionsLongitudeClass.Value; },
		set: function(newValue) { CoreDefinitionsLongitudeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude */
	var CoreDefinitionsAltitudeClass = classes.CoreDefinitionsAltitude = function CoreDefinitionsAltitudeClass(value) {
		if (!(this instanceof CoreDefinitionsAltitudeClass)) return new CoreDefinitionsAltitudeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAltitudeClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAltitudeClass.prototype.constructor = CoreDefinitionsAltitudeClass;
	CoreDefinitionsAltitudeClass.description = "Height above sea level or above the earth's surface. Measured with with WGS84 datum.\nConcepts: http://ncimeta.nci.nih.gov:C0002349";
	CoreDefinitionsAltitudeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude";
	CoreDefinitionsAltitudeClass.links = {};
	CoreDefinitionsAltitudeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsAltitudePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude"});
		}
		return errors;
	}
	CoreDefinitionsAltitudeClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAltitudeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsAltitudeClass, CoreDefinitionsAltitudeClass.Value, {
		get: function() { return CoreDefinitionsAltitudeClass.Value; },
		set: function(newValue) { CoreDefinitionsAltitudeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/ShrId */
	var AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass = classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrId = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/ShrId";
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/ShrId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/ShrId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/ShrId"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesShrIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryType */
	var AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass = classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryType = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryType";
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryType"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryType"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryId */
	var AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass = classes.AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryId = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryId";
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass.links = {};
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryId"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryId"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/adverse#/definitions/AdverseReactionAttribution/allOf/1/properties/Value/properties/EntryId"});
		}
		return errors;
	}
	AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass.validate = function (value) {
		var missing = {};
		var errors = AdverseDefinitionsAdverseReactionAttributionAllOf1PropertiesValuePropertiesEntryIdClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail/properties/Value */
	var DemographicsDefinitionsRaceDetailPropertiesValueClass = classes.DemographicsDefinitionsRaceDetailPropertiesValue = function DemographicsDefinitionsRaceDetailPropertiesValueClass(value) {
		if (!(this instanceof DemographicsDefinitionsRaceDetailPropertiesValueClass)) return new DemographicsDefinitionsRaceDetailPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsRaceDetailPropertiesValueClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsRaceDetailPropertiesValueClass.prototype.constructor = DemographicsDefinitionsRaceDetailPropertiesValueClass;
	DemographicsDefinitionsRaceDetailPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail/properties/Value";
	DemographicsDefinitionsRaceDetailPropertiesValueClass.links = {};
	DemographicsDefinitionsRaceDetailPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/RaceDetail/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	DemographicsDefinitionsRaceDetailPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsRaceDetailPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail/properties/Value */
	var DemographicsDefinitionsEthnicityDetailPropertiesValueClass = classes.DemographicsDefinitionsEthnicityDetailPropertiesValue = function DemographicsDefinitionsEthnicityDetailPropertiesValueClass(value) {
		if (!(this instanceof DemographicsDefinitionsEthnicityDetailPropertiesValueClass)) return new DemographicsDefinitionsEthnicityDetailPropertiesValueClass(value);
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.prototype.constructor = DemographicsDefinitionsEthnicityDetailPropertiesValueClass;
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail/properties/Value";
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.links = {};
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		var actualErrors = errors;
		var anyOfPassCount = 0;
		var anyOfSubErrors = [];
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[0] = errors;
		errors = [];
		errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value, dataPath, missing));
		if (!errors.length) {
			anyOfPassCount++;
		}
		anyOfSubErrors[1] = errors;
		errors = actualErrors;
		if (!anyOfPassCount) {
			errors.push({code: 10, params: {errors: anyOfSubErrors}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/EthnicityDetail/properties/Value"});
		}
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	DemographicsDefinitionsEthnicityDetailPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsEthnicityDetailPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix/properties/Value */
	var CoreDefinitionsHumanNamePrefixPropertiesValueClass = classes.CoreDefinitionsHumanNamePrefixPropertiesValue = {};
	CoreDefinitionsHumanNamePrefixPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix/properties/Value";
	CoreDefinitionsHumanNamePrefixPropertiesValueClass.links = {};
	CoreDefinitionsHumanNamePrefixPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNamePrefix/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsHumanNamePrefixPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNamePrefixPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName/properties/Value */
	var CoreDefinitionsFamilyNamePropertiesValueClass = classes.CoreDefinitionsFamilyNamePropertiesValue = {};
	CoreDefinitionsFamilyNamePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName/properties/Value";
	CoreDefinitionsFamilyNamePropertiesValueClass.links = {};
	CoreDefinitionsFamilyNamePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/FamilyName/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsFamilyNamePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsFamilyNamePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse/properties/Value */
	var CoreDefinitionsHumanNameUsePropertiesValueClass = classes.CoreDefinitionsHumanNameUsePropertiesValue = {};
	CoreDefinitionsHumanNameUsePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse/properties/Value";
	CoreDefinitionsHumanNameUsePropertiesValueClass.links = {};
	CoreDefinitionsHumanNameUsePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameUse/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsHumanNameUsePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNameUsePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod/allOf/1 */
	var CoreDefinitionsEffectiveTimePeriodAllOf1Class = classes.CoreDefinitionsEffectiveTimePeriodAllOf1 = function CoreDefinitionsEffectiveTimePeriodAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsEffectiveTimePeriodAllOf1Class)) return new CoreDefinitionsEffectiveTimePeriodAllOf1Class(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.prototype.constructor = CoreDefinitionsEffectiveTimePeriodAllOf1Class;
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.description = "Empty DataElement?";
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod/allOf/1";
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.links = {};
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod/allOf/1"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/EffectiveTimePeriod/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsEffectiveTimePeriodAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsEffectiveTimePeriodAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName */
	var CoreDefinitionsGivenNameClass = classes.CoreDefinitionsGivenName = function CoreDefinitionsGivenNameClass(value) {
		if (!(this instanceof CoreDefinitionsGivenNameClass)) return new CoreDefinitionsGivenNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGivenNameClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGivenNameClass.prototype.constructor = CoreDefinitionsGivenNameClass;
	CoreDefinitionsGivenNameClass.description = "A set of names given to a person at birth, but not including the family name. In western cultures, this property would contain the 'first' and 'middle' names. Note that in some cultures, the given name is placed after the family name. Note also that this property contains multiple elements, so it can handle those situations where a person has more than one 'middle' name. (Source: HL7 V3).\nConcepts: http://loinc.org:45392-8,http://snomed.info/sct:408677003";
	CoreDefinitionsGivenNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName";
	CoreDefinitionsGivenNameClass.links = {};
	CoreDefinitionsGivenNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsGivenNamePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName"});
		}
		return errors;
	}
	CoreDefinitionsGivenNameClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGivenNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsGivenNameClass, CoreDefinitionsGivenNameClass.Value, {
		get: function() { return CoreDefinitionsGivenNameClass.Value; },
		set: function(newValue) { CoreDefinitionsGivenNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix */
	var CoreDefinitionsHumanNameSuffixClass = classes.CoreDefinitionsHumanNameSuffix = function CoreDefinitionsHumanNameSuffixClass(value) {
		if (!(this instanceof CoreDefinitionsHumanNameSuffixClass)) return new CoreDefinitionsHumanNameSuffixClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsHumanNameSuffixClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsHumanNameSuffixClass.prototype.constructor = CoreDefinitionsHumanNameSuffixClass;
	CoreDefinitionsHumanNameSuffixClass.description = "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.\nConcepts: http://loinc.org:45395-1,http://snomed.info/sct:715196001";
	CoreDefinitionsHumanNameSuffixClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix";
	CoreDefinitionsHumanNameSuffixClass.links = {};
	CoreDefinitionsHumanNameSuffixClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsHumanNameSuffixPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix"});
		}
		return errors;
	}
	CoreDefinitionsHumanNameSuffixClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNameSuffixClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsHumanNameSuffixClass, CoreDefinitionsHumanNameSuffixClass.Value, {
		get: function() { return CoreDefinitionsHumanNameSuffixClass.Value; },
		set: function(newValue) { CoreDefinitionsHumanNameSuffixClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/AddressUse */
	var DemographicsDefinitionsAddressUsedPropertiesAddressUseClass = classes.DemographicsDefinitionsAddressUsedPropertiesAddressUse = {};
	DemographicsDefinitionsAddressUsedPropertiesAddressUseClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/AddressUse";
	DemographicsDefinitionsAddressUsedPropertiesAddressUseClass.links = {};
	DemographicsDefinitionsAddressUsedPropertiesAddressUseClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			if (value.length < 1) {
				errors.push({code: 400, params: {length: value.length, minimum: 1}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/AddressUse"});
			}
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUse.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/AddressUse"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/AddressUse"});
		}
		return errors;
	}
	DemographicsDefinitionsAddressUsedPropertiesAddressUseClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsAddressUsedPropertiesAddressUseClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/Setting */
	var DemographicsDefinitionsAddressUsedPropertiesSettingClass = classes.DemographicsDefinitionsAddressUsedPropertiesSetting = {};
	DemographicsDefinitionsAddressUsedPropertiesSettingClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/Setting";
	DemographicsDefinitionsAddressUsedPropertiesSettingClass.links = {};
	DemographicsDefinitionsAddressUsedPropertiesSettingClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.CoreDefinitionsSetting.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/Setting"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUsed/properties/Setting"});
		}
		return errors;
	}
	DemographicsDefinitionsAddressUsedPropertiesSettingClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsAddressUsedPropertiesSettingClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress */
	var DemographicsDefinitionsTelecomNumberOrAddressClass = classes.DemographicsDefinitionsTelecomNumberOrAddress = function DemographicsDefinitionsTelecomNumberOrAddressClass(value) {
		if (!(this instanceof DemographicsDefinitionsTelecomNumberOrAddressClass)) return new DemographicsDefinitionsTelecomNumberOrAddressClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsTelecomNumberOrAddressClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsTelecomNumberOrAddressClass.prototype.constructor = DemographicsDefinitionsTelecomNumberOrAddressClass;
	DemographicsDefinitionsTelecomNumberOrAddressClass.description = "A user name or other identifier on a telecommunication network, such as a telephone number (including country code and extension, if necessary), email address, or SkypeID.";
	DemographicsDefinitionsTelecomNumberOrAddressClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress";
	DemographicsDefinitionsTelecomNumberOrAddressClass.links = {};
	DemographicsDefinitionsTelecomNumberOrAddressClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomNumberOrAddressPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomNumberOrAddressClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomNumberOrAddressClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsTelecomNumberOrAddressClass, DemographicsDefinitionsTelecomNumberOrAddressClass.Value, {
		get: function() { return DemographicsDefinitionsTelecomNumberOrAddressClass.Value; },
		set: function(newValue) { DemographicsDefinitionsTelecomNumberOrAddressClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType */
	var DemographicsDefinitionsTelecomTypeClass = classes.DemographicsDefinitionsTelecomType = function DemographicsDefinitionsTelecomTypeClass(value) {
		if (!(this instanceof DemographicsDefinitionsTelecomTypeClass)) return new DemographicsDefinitionsTelecomTypeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsTelecomTypeClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsTelecomTypeClass.prototype.constructor = DemographicsDefinitionsTelecomTypeClass;
	DemographicsDefinitionsTelecomTypeClass.description = "The type or channel of the communication, such as email or telephone. If an messaging app, such as Skype, specify other.";
	DemographicsDefinitionsTelecomTypeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType";
	DemographicsDefinitionsTelecomTypeClass.links = {};
	DemographicsDefinitionsTelecomTypeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomTypePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomTypeClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomTypeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsTelecomTypeClass, DemographicsDefinitionsTelecomTypeClass.Value, {
		get: function() { return DemographicsDefinitionsTelecomTypeClass.Value; },
		set: function(newValue) { DemographicsDefinitionsTelecomTypeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther */
	var DemographicsDefinitionsTelecomTypeOtherClass = classes.DemographicsDefinitionsTelecomTypeOther = function DemographicsDefinitionsTelecomTypeOtherClass(value) {
		if (!(this instanceof DemographicsDefinitionsTelecomTypeOtherClass)) return new DemographicsDefinitionsTelecomTypeOtherClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsTelecomTypeOtherClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsTelecomTypeOtherClass.prototype.constructor = DemographicsDefinitionsTelecomTypeOtherClass;
	DemographicsDefinitionsTelecomTypeOtherClass.description = "Specification of the type of telecom channel, if the TelecomType is other.";
	DemographicsDefinitionsTelecomTypeOtherClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther";
	DemographicsDefinitionsTelecomTypeOtherClass.links = {};
	DemographicsDefinitionsTelecomTypeOtherClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomTypeOtherPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomTypeOtherClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomTypeOtherClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsTelecomTypeOtherClass, DemographicsDefinitionsTelecomTypeOtherClass.Value, {
		get: function() { return DemographicsDefinitionsTelecomTypeOtherClass.Value; },
		set: function(newValue) { DemographicsDefinitionsTelecomTypeOtherClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier */
	var DemographicsDefinitionsTelecomQualifierClass = classes.DemographicsDefinitionsTelecomQualifier = function DemographicsDefinitionsTelecomQualifierClass(value) {
		if (!(this instanceof DemographicsDefinitionsTelecomQualifierClass)) return new DemographicsDefinitionsTelecomQualifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsTelecomQualifierClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsTelecomQualifierClass.prototype.constructor = DemographicsDefinitionsTelecomQualifierClass;
	DemographicsDefinitionsTelecomQualifierClass.description = "Provides more information about the type and uses of the telecom address.";
	DemographicsDefinitionsTelecomQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier";
	DemographicsDefinitionsTelecomQualifierClass.links = {};
	DemographicsDefinitionsTelecomQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecomQualifierPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomQualifierClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsTelecomQualifierClass, DemographicsDefinitionsTelecomQualifierClass.Value, {
		get: function() { return DemographicsDefinitionsTelecomQualifierClass.Value; },
		set: function(newValue) { DemographicsDefinitionsTelecomQualifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency */
	var ActorDefinitionsSpokenLanguageProficiencyClass = classes.ActorDefinitionsSpokenLanguageProficiency = function ActorDefinitionsSpokenLanguageProficiencyClass(value) {
		if (!(this instanceof ActorDefinitionsSpokenLanguageProficiencyClass)) return new ActorDefinitionsSpokenLanguageProficiencyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsSpokenLanguageProficiencyClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsSpokenLanguageProficiencyClass.prototype.constructor = ActorDefinitionsSpokenLanguageProficiencyClass;
	ActorDefinitionsSpokenLanguageProficiencyClass.description = "Accuracy and fluency in spoken communication in a language.\nConcepts: http://ncimeta.nci.nih.gov:C0678997";
	ActorDefinitionsSpokenLanguageProficiencyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency";
	ActorDefinitionsSpokenLanguageProficiencyClass.links = {};
	ActorDefinitionsSpokenLanguageProficiencyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/SpokenLanguageProficiency"});
		}
		return errors;
	}
	ActorDefinitionsSpokenLanguageProficiencyClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsSpokenLanguageProficiencyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsSpokenLanguageProficiencyClass, ActorDefinitionsSpokenLanguageProficiencyClass.Value, {
		get: function() { return ActorDefinitionsSpokenLanguageProficiencyClass.Value; },
		set: function(newValue) { ActorDefinitionsSpokenLanguageProficiencyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency */
	var ActorDefinitionsWrittenLanguageProficiencyClass = classes.ActorDefinitionsWrittenLanguageProficiency = function ActorDefinitionsWrittenLanguageProficiencyClass(value) {
		if (!(this instanceof ActorDefinitionsWrittenLanguageProficiencyClass)) return new ActorDefinitionsWrittenLanguageProficiencyClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsWrittenLanguageProficiencyClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsWrittenLanguageProficiencyClass.prototype.constructor = ActorDefinitionsWrittenLanguageProficiencyClass;
	ActorDefinitionsWrittenLanguageProficiencyClass.description = "Accuracy and fluency of reading and writing in a language.\nConcepts: http://ncimeta.nci.nih.gov:C0586739";
	ActorDefinitionsWrittenLanguageProficiencyClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency";
	ActorDefinitionsWrittenLanguageProficiencyClass.links = {};
	ActorDefinitionsWrittenLanguageProficiencyClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/WrittenLanguageProficiency"});
		}
		return errors;
	}
	ActorDefinitionsWrittenLanguageProficiencyClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsWrittenLanguageProficiencyClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsWrittenLanguageProficiencyClass, ActorDefinitionsWrittenLanguageProficiencyClass.Value, {
		get: function() { return ActorDefinitionsWrittenLanguageProficiencyClass.Value; },
		set: function(newValue) { ActorDefinitionsWrittenLanguageProficiencyClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed/properties/LanguageQualifier */
	var ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass = classes.ActorDefinitionsLanguageUsedPropertiesLanguageQualifier = {};
	ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed/properties/LanguageQualifier";
	ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass.links = {};
	ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsLanguageQualifier.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed/properties/LanguageQualifier"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageUsed/properties/LanguageQualifier"});
		}
		return errors;
	}
	ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsLanguageUsedPropertiesLanguageQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue */
	var DemographicsDefinitionsStateOfIssueClass = classes.DemographicsDefinitionsStateOfIssue = function DemographicsDefinitionsStateOfIssueClass(value) {
		if (!(this instanceof DemographicsDefinitionsStateOfIssueClass)) return new DemographicsDefinitionsStateOfIssueClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsState(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsStateOfIssueClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsStateOfIssueClass.prototype.constructor = DemographicsDefinitionsStateOfIssueClass;
	DemographicsDefinitionsStateOfIssueClass.description = "Issuing authority for a drivers license.\nConcepts: http://ncimeta.nci.nih.gov:C1547728";
	DemographicsDefinitionsStateOfIssueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue";
	DemographicsDefinitionsStateOfIssueClass.links = {};
	DemographicsDefinitionsStateOfIssueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsState.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/StateOfIssue"});
		}
		return errors;
	}
	DemographicsDefinitionsStateOfIssueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsStateOfIssueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsStateOfIssueClass, DemographicsDefinitionsStateOfIssueClass.Value, {
		get: function() { return DemographicsDefinitionsStateOfIssueClass.Value; },
		set: function(newValue) { DemographicsDefinitionsStateOfIssueClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber/properties/Value */
	var DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass = classes.DemographicsDefinitionsDriversLicenseNumberPropertiesValue = {};
	DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber/properties/Value";
	DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass.links = {};
	DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/DriversLicenseNumber/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsDriversLicenseNumberPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue */
	var DemographicsDefinitionsCountryOfIssueClass = classes.DemographicsDefinitionsCountryOfIssue = function DemographicsDefinitionsCountryOfIssueClass(value) {
		if (!(this instanceof DemographicsDefinitionsCountryOfIssueClass)) return new DemographicsDefinitionsCountryOfIssueClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCountry(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsCountryOfIssueClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsCountryOfIssueClass.prototype.constructor = DemographicsDefinitionsCountryOfIssueClass;
	DemographicsDefinitionsCountryOfIssueClass.description = "A country acting as an assuing authority for a document.";
	DemographicsDefinitionsCountryOfIssueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue";
	DemographicsDefinitionsCountryOfIssueClass.links = {};
	DemographicsDefinitionsCountryOfIssueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCountry.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/CountryOfIssue"});
		}
		return errors;
	}
	DemographicsDefinitionsCountryOfIssueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsCountryOfIssueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsCountryOfIssueClass, DemographicsDefinitionsCountryOfIssueClass.Value, {
		get: function() { return DemographicsDefinitionsCountryOfIssueClass.Value; },
		set: function(newValue) { DemographicsDefinitionsCountryOfIssueClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber/properties/Value */
	var DemographicsDefinitionsPassportNumberPropertiesValueClass = classes.DemographicsDefinitionsPassportNumberPropertiesValue = {};
	DemographicsDefinitionsPassportNumberPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber/properties/Value";
	DemographicsDefinitionsPassportNumberPropertiesValueClass.links = {};
	DemographicsDefinitionsPassportNumberPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/PassportNumber/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsPassportNumberPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsPassportNumberPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName */
	var ActorDefinitionsOrganizationNameClass = classes.ActorDefinitionsOrganizationName = function ActorDefinitionsOrganizationNameClass(value) {
		if (!(this instanceof ActorDefinitionsOrganizationNameClass)) return new ActorDefinitionsOrganizationNameClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsOrganizationNameClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsOrganizationNameClass.prototype.constructor = ActorDefinitionsOrganizationNameClass;
	ActorDefinitionsOrganizationNameClass.description = "The name of the organization.";
	ActorDefinitionsOrganizationNameClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName";
	ActorDefinitionsOrganizationNameClass.links = {};
	ActorDefinitionsOrganizationNameClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationNamePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationNameClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationNameClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsOrganizationNameClass, ActorDefinitionsOrganizationNameClass.Value, {
		get: function() { return ActorDefinitionsOrganizationNameClass.Value; },
		set: function(newValue) { ActorDefinitionsOrganizationNameClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag */
	var ActorDefinitionsActiveFlagClass = classes.ActorDefinitionsActiveFlag = function ActorDefinitionsActiveFlagClass(value) {
		if (!(this instanceof ActorDefinitionsActiveFlagClass)) return new ActorDefinitionsActiveFlagClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsActiveFlagClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsActiveFlagClass.prototype.constructor = ActorDefinitionsActiveFlagClass;
	ActorDefinitionsActiveFlagClass.description = "If the ActiveFlag is false, it indicates the record is no longer to be used and should generally be hidden for the user in the UI.";
	ActorDefinitionsActiveFlagClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag";
	ActorDefinitionsActiveFlagClass.links = {};
	ActorDefinitionsActiveFlagClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsActiveFlagPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag"});
		}
		return errors;
	}
	ActorDefinitionsActiveFlagClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsActiveFlagClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsActiveFlagClass, ActorDefinitionsActiveFlagClass.Value, {
		get: function() { return ActorDefinitionsActiveFlagClass.Value; },
		set: function(newValue) { ActorDefinitionsActiveFlagClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationAlias */
	var ActorDefinitionsOrganizationPropertiesOrganizationAliasClass = classes.ActorDefinitionsOrganizationPropertiesOrganizationAlias = {};
	ActorDefinitionsOrganizationPropertiesOrganizationAliasClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationAlias";
	ActorDefinitionsOrganizationPropertiesOrganizationAliasClass.links = {};
	ActorDefinitionsOrganizationPropertiesOrganizationAliasClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationAlias.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationAlias"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationAlias"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationPropertiesOrganizationAliasClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationPropertiesOrganizationAliasClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationIdentifyingCode */
	var ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass = classes.ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCode = {};
	ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationIdentifyingCode";
	ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass.links = {};
	ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationIdentifyingCode.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationIdentifyingCode"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/OrganizationIdentifyingCode"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationPropertiesOrganizationIdentifyingCodeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/AddressUsed */
	var ActorDefinitionsOrganizationPropertiesAddressUsedClass = classes.ActorDefinitionsOrganizationPropertiesAddressUsed = {};
	ActorDefinitionsOrganizationPropertiesAddressUsedClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/AddressUsed";
	ActorDefinitionsOrganizationPropertiesAddressUsedClass.links = {};
	ActorDefinitionsOrganizationPropertiesAddressUsedClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsAddressUsed.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/AddressUsed"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/AddressUsed"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationPropertiesAddressUsedClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationPropertiesAddressUsedClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/Telecom */
	var ActorDefinitionsOrganizationPropertiesTelecomClass = classes.ActorDefinitionsOrganizationPropertiesTelecom = {};
	ActorDefinitionsOrganizationPropertiesTelecomClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/Telecom";
	ActorDefinitionsOrganizationPropertiesTelecomClass.links = {};
	ActorDefinitionsOrganizationPropertiesTelecomClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				errors = errors.concat(classes.DemographicsDefinitionsTelecom.validationErrors(value[i], dataPath + "/" + i, missing));
			}
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/Telecom"});
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "array"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/Organization/properties/Telecom"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationPropertiesTelecomClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationPropertiesTelecomClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1/properties/Value */
	var CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass = classes.CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValue = {};
	CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1/properties/Value";
	CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass.links = {};
	CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/OrganizationalIdentifier/allOf/1/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsOrganizationalIdentifierAllOf1PropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration */
	var CoreDefinitionsDurationClass = classes.CoreDefinitionsDuration = function CoreDefinitionsDurationClass(value) {
		if (!(this instanceof CoreDefinitionsDurationClass)) return new CoreDefinitionsDurationClass(value);
		if (typeof value.Units !== "undefined") {
			this.Units = value.Units;
		}
		if (this.Units && !Array.isArray(this.Units) && this.Units) {
			this.Units = new classes.CoreDefinitionsUnits(this.Units);
		}
		
		CoreDefinitionsQuantityClass.apply(this, arguments);
	};
	CoreDefinitionsDurationClass.prototype = Object.create(CoreDefinitionsQuantityClass.prototype);
	CoreDefinitionsDurationClass.prototype.constructor = CoreDefinitionsDurationClass;
	CoreDefinitionsDurationClass.description = "The length of time that something continues.\nConcepts: http://ncimeta.nci.nih.gov:C0449238";
	CoreDefinitionsDurationClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration";
	CoreDefinitionsDurationClass.links = {};
	CoreDefinitionsDurationClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		errors = errors.concat(classes.CoreDefinitionsQuantity.validationErrors(value, dataPath, missing));
		errors = errors.concat(classes.CoreDefinitionsDurationAllOf1.validationErrors(value, dataPath, missing));
		if (Array.isArray(value)) {
		} else if (value == null) {
		}
		return errors;
	}
	CoreDefinitionsDurationClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDurationClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDurationClass, CoreDefinitionsDurationClass.Units, {
		get: function() { return CoreDefinitionsDurationClass.Units; },
		set: function(newValue) { CoreDefinitionsDurationClass.Units = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age/allOf/1 */
	var CoreDefinitionsAgeAllOf1Class = classes.CoreDefinitionsAgeAllOf1 = function CoreDefinitionsAgeAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsAgeAllOf1Class)) return new CoreDefinitionsAgeAllOf1Class(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAgeAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAgeAllOf1Class.prototype.constructor = CoreDefinitionsAgeAllOf1Class;
	CoreDefinitionsAgeAllOf1Class.description = "Empty DataElement?";
	CoreDefinitionsAgeAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age/allOf/1";
	CoreDefinitionsAgeAllOf1Class.links = {};
	CoreDefinitionsAgeAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age/allOf/1"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Age/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsAgeAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAgeAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound */
	var CoreDefinitionsUpperAgeBoundClass = classes.CoreDefinitionsUpperAgeBound = function CoreDefinitionsUpperAgeBoundClass(value) {
		if (!(this instanceof CoreDefinitionsUpperAgeBoundClass)) return new CoreDefinitionsUpperAgeBoundClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsAge(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsUpperAgeBoundClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsUpperAgeBoundClass.prototype.constructor = CoreDefinitionsUpperAgeBoundClass;
	CoreDefinitionsUpperAgeBoundClass.description = "The upper limit on an age range";
	CoreDefinitionsUpperAgeBoundClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound";
	CoreDefinitionsUpperAgeBoundClass.links = {};
	CoreDefinitionsUpperAgeBoundClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsAge.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/UpperAgeBound"});
		}
		return errors;
	}
	CoreDefinitionsUpperAgeBoundClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsUpperAgeBoundClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsUpperAgeBoundClass, CoreDefinitionsUpperAgeBoundClass.Value, {
		get: function() { return CoreDefinitionsUpperAgeBoundClass.Value; },
		set: function(newValue) { CoreDefinitionsUpperAgeBoundClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound */
	var CoreDefinitionsLowerAgeBoundClass = classes.CoreDefinitionsLowerAgeBound = function CoreDefinitionsLowerAgeBoundClass(value) {
		if (!(this instanceof CoreDefinitionsLowerAgeBoundClass)) return new CoreDefinitionsLowerAgeBoundClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsAge(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsLowerAgeBoundClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsLowerAgeBoundClass.prototype.constructor = CoreDefinitionsLowerAgeBoundClass;
	CoreDefinitionsLowerAgeBoundClass.description = "The lower limit on an age range";
	CoreDefinitionsLowerAgeBoundClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound";
	CoreDefinitionsLowerAgeBoundClass.links = {};
	CoreDefinitionsLowerAgeBoundClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsAge.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/LowerAgeBound"});
		}
		return errors;
	}
	CoreDefinitionsLowerAgeBoundClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLowerAgeBoundClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsLowerAgeBoundClass, CoreDefinitionsLowerAgeBoundClass.Value, {
		get: function() { return CoreDefinitionsLowerAgeBoundClass.Value; },
		set: function(newValue) { CoreDefinitionsLowerAgeBoundClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge/allOf/1 */
	var CoreDefinitionsGestationalAgeAllOf1Class = classes.CoreDefinitionsGestationalAgeAllOf1 = function CoreDefinitionsGestationalAgeAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsGestationalAgeAllOf1Class)) return new CoreDefinitionsGestationalAgeAllOf1Class(value);
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsGestationalAgeAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsGestationalAgeAllOf1Class.prototype.constructor = CoreDefinitionsGestationalAgeAllOf1Class;
	CoreDefinitionsGestationalAgeAllOf1Class.description = "Empty DataElement?";
	CoreDefinitionsGestationalAgeAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge/allOf/1";
	CoreDefinitionsGestationalAgeAllOf1Class.links = {};
	CoreDefinitionsGestationalAgeAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge/allOf/1"});
		} else if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GestationalAge/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsGestationalAgeAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGestationalAgeAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City/properties/Value */
	var CoreDefinitionsCityPropertiesValueClass = classes.CoreDefinitionsCityPropertiesValue = {};
	CoreDefinitionsCityPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City/properties/Value";
	CoreDefinitionsCityPropertiesValueClass.links = {};
	CoreDefinitionsCityPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/City/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCityPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCityPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County/properties/Value */
	var CoreDefinitionsCountyPropertiesValueClass = classes.CoreDefinitionsCountyPropertiesValue = {};
	CoreDefinitionsCountyPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County/properties/Value";
	CoreDefinitionsCountyPropertiesValueClass.links = {};
	CoreDefinitionsCountyPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/County/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCountyPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCountyPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State/properties/Value */
	var CoreDefinitionsStatePropertiesValueClass = classes.CoreDefinitionsStatePropertiesValue = {};
	CoreDefinitionsStatePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State/properties/Value";
	CoreDefinitionsStatePropertiesValueClass.links = {};
	CoreDefinitionsStatePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/State/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsStatePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsStatePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode/properties/Value */
	var CoreDefinitionsPostalCodePropertiesValueClass = classes.CoreDefinitionsPostalCodePropertiesValue = {};
	CoreDefinitionsPostalCodePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode/properties/Value";
	CoreDefinitionsPostalCodePropertiesValueClass.links = {};
	CoreDefinitionsPostalCodePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/PostalCode/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsPostalCodePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsPostalCodePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country/properties/Value */
	var CoreDefinitionsCountryPropertiesValueClass = classes.CoreDefinitionsCountryPropertiesValue = {};
	CoreDefinitionsCountryPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country/properties/Value";
	CoreDefinitionsCountryPropertiesValueClass.links = {};
	CoreDefinitionsCountryPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Country/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsCountryPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsCountryPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine */
	var CoreDefinitionsAddressLineClass = classes.CoreDefinitionsAddressLine = function CoreDefinitionsAddressLineClass(value) {
		if (!(this instanceof CoreDefinitionsAddressLineClass)) return new CoreDefinitionsAddressLineClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsAddressLineClass.prototype = Object.create(superclass.prototype);
	CoreDefinitionsAddressLineClass.prototype.constructor = CoreDefinitionsAddressLineClass;
	CoreDefinitionsAddressLineClass.description = "Part of an address that contains the house number, apartment number, street name, street direction, P.O. Box number, delivery hints, and similar address information. (Source: HL7 FHIR).";
	CoreDefinitionsAddressLineClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine";
	CoreDefinitionsAddressLineClass.links = {};
	CoreDefinitionsAddressLineClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsAddressLinePropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine"});
		}
		return errors;
	}
	CoreDefinitionsAddressLineClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAddressLineClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsAddressLineClass, CoreDefinitionsAddressLineClass.Value, {
		get: function() { return CoreDefinitionsAddressLineClass.Value; },
		set: function(newValue) { CoreDefinitionsAddressLineClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude/properties/Value */
	var CoreDefinitionsLatitudePropertiesValueClass = classes.CoreDefinitionsLatitudePropertiesValue = {};
	CoreDefinitionsLatitudePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude/properties/Value";
	CoreDefinitionsLatitudePropertiesValueClass.links = {};
	CoreDefinitionsLatitudePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "number"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Latitude/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsLatitudePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLatitudePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude/properties/Value */
	var CoreDefinitionsLongitudePropertiesValueClass = classes.CoreDefinitionsLongitudePropertiesValue = {};
	CoreDefinitionsLongitudePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude/properties/Value";
	CoreDefinitionsLongitudePropertiesValueClass.links = {};
	CoreDefinitionsLongitudePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "number"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Longitude/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsLongitudePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsLongitudePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude/properties/Value */
	var CoreDefinitionsAltitudePropertiesValueClass = classes.CoreDefinitionsAltitudePropertiesValue = {};
	CoreDefinitionsAltitudePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude/properties/Value";
	CoreDefinitionsAltitudePropertiesValueClass.links = {};
	CoreDefinitionsAltitudePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "number"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "number"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Altitude/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsAltitudePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAltitudePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName/properties/Value */
	var CoreDefinitionsGivenNamePropertiesValueClass = classes.CoreDefinitionsGivenNamePropertiesValue = {};
	CoreDefinitionsGivenNamePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName/properties/Value";
	CoreDefinitionsGivenNamePropertiesValueClass.links = {};
	CoreDefinitionsGivenNamePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/GivenName/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsGivenNamePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsGivenNamePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix/properties/Value */
	var CoreDefinitionsHumanNameSuffixPropertiesValueClass = classes.CoreDefinitionsHumanNameSuffixPropertiesValue = {};
	CoreDefinitionsHumanNameSuffixPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix/properties/Value";
	CoreDefinitionsHumanNameSuffixPropertiesValueClass.links = {};
	CoreDefinitionsHumanNameSuffixPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/HumanNameSuffix/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsHumanNameSuffixPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsHumanNameSuffixPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse */
	var DemographicsDefinitionsAddressUseClass = classes.DemographicsDefinitionsAddressUse = function DemographicsDefinitionsAddressUseClass(value) {
		if (!(this instanceof DemographicsDefinitionsAddressUseClass)) return new DemographicsDefinitionsAddressUseClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	DemographicsDefinitionsAddressUseClass.prototype = Object.create(superclass.prototype);
	DemographicsDefinitionsAddressUseClass.prototype.constructor = DemographicsDefinitionsAddressUseClass;
	DemographicsDefinitionsAddressUseClass.description = "Describes how the address is used, in particular, as a dwelling (primary, secondary, temporary), a former address, mailing address, etc.";
	DemographicsDefinitionsAddressUseClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse";
	DemographicsDefinitionsAddressUseClass.links = {};
	DemographicsDefinitionsAddressUseClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/AddressUse"});
		}
		return errors;
	}
	DemographicsDefinitionsAddressUseClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsAddressUseClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(DemographicsDefinitionsAddressUseClass, DemographicsDefinitionsAddressUseClass.Value, {
		get: function() { return DemographicsDefinitionsAddressUseClass.Value; },
		set: function(newValue) { DemographicsDefinitionsAddressUseClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress/properties/Value */
	var DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass = classes.DemographicsDefinitionsTelecomNumberOrAddressPropertiesValue = {};
	DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress/properties/Value";
	DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass.links = {};
	DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomNumberOrAddress/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomNumberOrAddressPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType/properties/Value */
	var DemographicsDefinitionsTelecomTypePropertiesValueClass = classes.DemographicsDefinitionsTelecomTypePropertiesValue = {};
	DemographicsDefinitionsTelecomTypePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType/properties/Value";
	DemographicsDefinitionsTelecomTypePropertiesValueClass.links = {};
	DemographicsDefinitionsTelecomTypePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomType/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomTypePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomTypePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther/properties/Value */
	var DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass = classes.DemographicsDefinitionsTelecomTypeOtherPropertiesValue = {};
	DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther/properties/Value";
	DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass.links = {};
	DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomTypeOther/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomTypeOtherPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier/properties/Value */
	var DemographicsDefinitionsTelecomQualifierPropertiesValueClass = classes.DemographicsDefinitionsTelecomQualifierPropertiesValue = {};
	DemographicsDefinitionsTelecomQualifierPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier/properties/Value";
	DemographicsDefinitionsTelecomQualifierPropertiesValueClass.links = {};
	DemographicsDefinitionsTelecomQualifierPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/demographics#/definitions/TelecomQualifier/properties/Value"});
		}
		return errors;
	}
	DemographicsDefinitionsTelecomQualifierPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = DemographicsDefinitionsTelecomQualifierPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier */
	var ActorDefinitionsLanguageQualifierClass = classes.ActorDefinitionsLanguageQualifier = function ActorDefinitionsLanguageQualifierClass(value) {
		if (!(this instanceof ActorDefinitionsLanguageQualifierClass)) return new ActorDefinitionsLanguageQualifierClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value)) {
			this.Value = new classes.CoreDefinitionsCodeableConcept(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsLanguageQualifierClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsLanguageQualifierClass.prototype.constructor = ActorDefinitionsLanguageQualifierClass;
	ActorDefinitionsLanguageQualifierClass.description = "Additional information about a person's use of language.";
	ActorDefinitionsLanguageQualifierClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier";
	ActorDefinitionsLanguageQualifierClass.links = {};
	ActorDefinitionsLanguageQualifierClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsCodeableConcept.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/LanguageQualifier"});
		}
		return errors;
	}
	ActorDefinitionsLanguageQualifierClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsLanguageQualifierClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsLanguageQualifierClass, ActorDefinitionsLanguageQualifierClass.Value, {
		get: function() { return ActorDefinitionsLanguageQualifierClass.Value; },
		set: function(newValue) { ActorDefinitionsLanguageQualifierClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName/properties/Value */
	var ActorDefinitionsOrganizationNamePropertiesValueClass = classes.ActorDefinitionsOrganizationNamePropertiesValue = {};
	ActorDefinitionsOrganizationNamePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName/properties/Value";
	ActorDefinitionsOrganizationNamePropertiesValueClass.links = {};
	ActorDefinitionsOrganizationNamePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationName/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationNamePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationNamePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag/properties/Value */
	var ActorDefinitionsActiveFlagPropertiesValueClass = classes.ActorDefinitionsActiveFlagPropertiesValue = {};
	ActorDefinitionsActiveFlagPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag/properties/Value";
	ActorDefinitionsActiveFlagPropertiesValueClass.links = {};
	ActorDefinitionsActiveFlagPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "boolean"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag/properties/Value"});
		} else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
			errors.push({code: 0, params: {type: typeof value, expected: "boolean"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/ActiveFlag/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsActiveFlagPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsActiveFlagPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias */
	var ActorDefinitionsOrganizationAliasClass = classes.ActorDefinitionsOrganizationAlias = function ActorDefinitionsOrganizationAliasClass(value) {
		if (!(this instanceof ActorDefinitionsOrganizationAliasClass)) return new ActorDefinitionsOrganizationAliasClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsOrganizationAliasClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsOrganizationAliasClass.prototype.constructor = ActorDefinitionsOrganizationAliasClass;
	ActorDefinitionsOrganizationAliasClass.description = "A list of alternate names that the organization is known as, or was known as in the past.";
	ActorDefinitionsOrganizationAliasClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias";
	ActorDefinitionsOrganizationAliasClass.links = {};
	ActorDefinitionsOrganizationAliasClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.ActorDefinitionsOrganizationAliasPropertiesValue.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationAliasClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationAliasClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsOrganizationAliasClass, ActorDefinitionsOrganizationAliasClass.Value, {
		get: function() { return ActorDefinitionsOrganizationAliasClass.Value; },
		set: function(newValue) { ActorDefinitionsOrganizationAliasClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode */
	var ActorDefinitionsOrganizationIdentifyingCodeClass = classes.ActorDefinitionsOrganizationIdentifyingCode = function ActorDefinitionsOrganizationIdentifyingCodeClass(value) {
		if (!(this instanceof ActorDefinitionsOrganizationIdentifyingCodeClass)) return new ActorDefinitionsOrganizationIdentifyingCodeClass(value);
		if (typeof value.Value !== "undefined") {
			this.Value = value.Value;
		}
		if (this.Value && !Array.isArray(this.Value) && typeof this.Value === "object") {
			this.Value = new classes.CoreDefinitionsOrganizationalIdentifier(this.Value);
		}
		
		superclass.apply(this, arguments);
	};
	ActorDefinitionsOrganizationIdentifyingCodeClass.prototype = Object.create(superclass.prototype);
	ActorDefinitionsOrganizationIdentifyingCodeClass.prototype.constructor = ActorDefinitionsOrganizationIdentifyingCodeClass;
	ActorDefinitionsOrganizationIdentifyingCodeClass.description = "A code identifying a specific organization. The NPI should be provided, if available. Other business identifiers, such employer tax ID, or MVX code for vaccine manufacturers, should also be provided.";
	ActorDefinitionsOrganizationIdentifyingCodeClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode";
	ActorDefinitionsOrganizationIdentifyingCodeClass.links = {};
	ActorDefinitionsOrganizationIdentifyingCodeClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode"});
		} else if (typeof value === "object") {
			if ("Value" in value) {
				errors = errors.concat(classes.CoreDefinitionsOrganizationalIdentifier.validationErrors(value.Value, dataPath + "/Value", missing));
			} else {
				errors.push({code: 302, params: {key: "Value"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationIdentifyingCode"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationIdentifyingCodeClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationIdentifyingCodeClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(ActorDefinitionsOrganizationIdentifyingCodeClass, ActorDefinitionsOrganizationIdentifyingCodeClass.Value, {
		get: function() { return ActorDefinitionsOrganizationIdentifyingCodeClass.Value; },
		set: function(newValue) { ActorDefinitionsOrganizationIdentifyingCodeClass.Value = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1 */
	var CoreDefinitionsDurationAllOf1Class = classes.CoreDefinitionsDurationAllOf1 = function CoreDefinitionsDurationAllOf1Class(value) {
		if (!(this instanceof CoreDefinitionsDurationAllOf1Class)) return new CoreDefinitionsDurationAllOf1Class(value);
		if (typeof value.Units !== "undefined") {
			this.Units = value.Units;
		}
		if (this.Units && !Array.isArray(this.Units)) {
			this.Units = new classes.CoreDefinitionsUnits(this.Units);
		}
		
		superclass.apply(this, arguments);
	};
	CoreDefinitionsDurationAllOf1Class.prototype = Object.create(superclass.prototype);
	CoreDefinitionsDurationAllOf1Class.prototype.constructor = CoreDefinitionsDurationAllOf1Class;
	CoreDefinitionsDurationAllOf1Class.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1";
	CoreDefinitionsDurationAllOf1Class.links = {};
	CoreDefinitionsDurationAllOf1Class.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "object"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1"});
		} else if (typeof value === "object") {
			if ("Units" in value) {
				errors = errors.concat(classes.CoreDefinitionsUnits.validationErrors(value.Units, dataPath + "/Units", missing));
			} else {
				errors.push({code: 302, params: {key: "Units"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1"});
			}
		} else {
			errors.push({code: 0, params: {type: typeof value, expected: "object"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/Duration/allOf/1"});
		}
		return errors;
	}
	CoreDefinitionsDurationAllOf1Class.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsDurationAllOf1Class.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	Object.defineProperty(CoreDefinitionsDurationAllOf1Class, CoreDefinitionsDurationAllOf1Class.Units, {
		get: function() { return CoreDefinitionsDurationAllOf1Class.Units; },
		set: function(newValue) { CoreDefinitionsDurationAllOf1Class.Units = newValue; },
		enumerable: true,
		configurable: true
	});
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine/properties/Value */
	var CoreDefinitionsAddressLinePropertiesValueClass = classes.CoreDefinitionsAddressLinePropertiesValue = {};
	CoreDefinitionsAddressLinePropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine/properties/Value";
	CoreDefinitionsAddressLinePropertiesValueClass.links = {};
	CoreDefinitionsAddressLinePropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/core#/definitions/AddressLine/properties/Value"});
		}
		return errors;
	}
	CoreDefinitionsAddressLinePropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = CoreDefinitionsAddressLinePropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	/* Schema: http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias/properties/Value */
	var ActorDefinitionsOrganizationAliasPropertiesValueClass = classes.ActorDefinitionsOrganizationAliasPropertiesValue = {};
	ActorDefinitionsOrganizationAliasPropertiesValueClass.schema = "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias/properties/Value";
	ActorDefinitionsOrganizationAliasPropertiesValueClass.links = {};
	ActorDefinitionsOrganizationAliasPropertiesValueClass.validationErrors = function (value, dataPath, missing) {
		dataPath = dataPath || "";
		var errors = [];
		if (Array.isArray(value)) {
			errors.push({code: 0, params: {type: "array", expected: "string"}, path: dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias/properties/Value"});
		} else if (value == null) {
			errors.push({code: 0, params: {type: "null", expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias/properties/Value"});
		} else if (typeof value === "object" || typeof value === "number" || typeof value === "boolean") {
			errors.push({code: 0, params: {type: typeof value, expected: "string"}, path:dataPath, schema: "http://jstars-linux-1.mitre.org/json-schema/shr/actor#/definitions/OrganizationAlias/properties/Value"});
		}
		return errors;
	}
	ActorDefinitionsOrganizationAliasPropertiesValueClass.validate = function (value) {
		var missing = {};
		var errors = ActorDefinitionsOrganizationAliasPropertiesValueClass.validationErrors(value, "", missing);
		return {valid: !errors.length, errors: errors, missing: missing};
	}
	
	
	return classes;
}
module.exports = { makeHierarchy };
