import request from "request";
import IOutcomesService from './IOutcomesService';
import FilterOptions from '../../utils/FilterOptions';
import _ from 'lodash';

export default class CLQOutcomesService extends IOutcomesService {
    constructor(params) {
        super();
        this.serviceUrl = params.serviceUrl;
        this.timescale = params.timescale || [];
    }

    /* Build the CLQ demograpchics filter section based off of the Compass filter criteria
     */
    buildDemographicsFilter(activeFilterValues) {
        let filter = {};
        let gender = activeFilterValues["shr.core.BirthSex"];
        let race = activeFilterValues["shr.core.Race"];
        let age = activeFilterValues["shr.core.DateOfBirth"];
        let age_at_diagnosis = activeFilterValues["shr.core.DateOfDiagnosis"];
        if (gender) {
            filter.gender = {
                codeSystemName: "AdministrativeGender",
                codeSystem: "2.16.840.1.113883.4.642.2.1",
                code: gender.value
            };
        }
        if (age) {
            filter.age = {
                min: age.minValue,
                max: age.maxValue
            };
        }
        if (age_at_diagnosis) {
            filter.age_at_diagnosis = {
                min: age_at_diagnosis.minValue,
                max: age_at_diagnosis.maxValue
            };
        }
        if (race) {
            filter.race = {
                "codeSystemName": "HL7 v3 Code System Race",
                "codeSystem": "2.16.840.1.113883.5.104",
                "code": race.value
            };
        }
        return filter;
    }

    /* Build the CLQ diagnosis filter based off of the Comapss Filter options
     */
    buildDiagnosisFilter(activeFilterValues) {
        let filter = {};
        let stage = activeFilterValues["onco.core.TNMClinicalStageGroup"];
        let t = activeFilterValues["onco.core.TNMClinicalPrimaryTumorCategory"];
        let n = activeFilterValues["onco.core.TNMClinicalRegionalNodesCategory"];
        let m = activeFilterValues["onco.core.TNMClinicalDistantMetastasesCategory"];
        let grade = activeFilterValues["onco.core.CancerHistologicGrade"];
        if (stage) {
            filter.stage = stage.reference.stage;
        }
        if (grade) {
            filter.grade = grade.reference.getGradeAsSimpleNumber();
        }
        filter.tnm = {};
        if (t) {
            filter.tnm.t = t.value;
        }
        if (n) {
            filter.tnm.n = n.value;
        }
        if (m) {
            filter.tnm.m = m.value;
        }
        return filter;
    }

    /* Build the CLQ tumor markers filter sections based off the tumor makrkers found in the similar
    patient properties
    */
    buildTumorMarkersFilter(activeFilterValues) {
        let filter = [];
        // loop over options look for tumor markers and add to filter
        let markers = activeFilterValues["onco.core.TumorMarkerTest"];
        if (!_.isEmpty(markers) && !Array.isArray(markers)) {
            markers = [markers];
        }
        for (let x in markers) {
            let option = markers[x];
            let code = option.reference.receptorTypeCodeableConcept;
            let value = option.value;
            filter.push({
                code: code.code.code,
                codeSystem: code.codeSystem.uri,
                displayName: code.displayText.string,
                value: value
            });
        }
        return filter;
    }

    /* Process a filter generated by Compass.  This method will map the Compass filter items
    into a filter that is expected by the CLQ service and then call the service and process the
    response into a format that is used by the Compass UI */
    processSimilarPatientOutcomes(similarPatientProps) {
        let filter = {};
        const fOptions = new FilterOptions(similarPatientProps);
        const activeFilterValues = fOptions.getAllActiveValuesByMcodeElement();
        filter.demographics = this.buildDemographicsFilter(activeFilterValues);
        filter.diagnosis = this.buildDiagnosisFilter(activeFilterValues);
        filter.tumorMarkers = this.buildTumorMarkersFilter(activeFilterValues);
        filter.outcomes = {survival: this.timescale.map((ts) => { return {"value": ts*12, "interval": "months" }; })};
        return new Promise((accept, reject) => {
            request({
                url: this.serviceUrl,
                method: "POST",
                json: filter
            }, (err, _response, data) => {
                if (err) {
                    reject(err);
                }
                try {
                    data.timescale = this.timescale;
                    accept(data);
                } catch (ex) {
                    reject(ex);
                }
            });

        });
    }
}
